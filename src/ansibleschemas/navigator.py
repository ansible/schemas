# Used to generate JSON Validation Schema for ansible-navigator config files
# https://ansible-navigator.readthedocs.io/en/latest/settings/#the-ansible-navigator-settings-file
import sys
from typing import List, Mapping, Optional

from pydantic import BaseModel as NavigatorBaseModel
from pydantic import Extra
from pydantic.fields import Field

from . import consts

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module
else:
    from typing_extensions import Literal


class BaseModel(NavigatorBaseModel):
    class Config:
        @classmethod
        def alias_generator(cls, string: str) -> str:
            """rewrites all field names as ansible navigator uses dashes"""
            return string.replace("_", "-")


class AnsibleModel(BaseModel):
    config: Optional[str] = Field(
        description="Specify the path to the ansible configuration file"
    )
    cmdline: Optional[str] = Field(
        description="Extra parameters passed to the corresponding command"
    )
    inventories: Optional[List[str]] = Field(
        description="Specify an inventory file path or host list"
    )
    playbook: Optional[str] = Field(description="Specify the playbook name")

    class Config:
        extra = Extra.forbid


class AnsibleRunnerModel(BaseModel):
    artifact_dir: Optional[str] = Field(
        description="The directory path to store artifacts generated by ansible-runner"
    )
    rotate_artifacts_count: Optional[int] = Field(
        description="Keep ansible-runner artifact directories, for last n runs, if set to 0 artifact directories won't be deleted"
    )
    timeout: Optional[int] = Field(
        description="The timeout value after which ansible-runner willforce stop the execution"
    )

    class Config:
        extra = Extra.forbid


class ColorModel(BaseModel):
    enable: Optional[bool] = Field(
        default=False, description="Enable the use of color in the display"
    )
    osc4: Optional[bool] = Field(
        default=True,
        description="Enable or disable terminal color changing support with OSC 4",
    )

    class Config:
        extra = Extra.forbid


class DocumentationModel(BaseModel):
    class PluginModel(BaseModel):
        name: Optional[str] = Field(description="Specify the plugin name")
        type: Optional[
            Literal[
                "become",
                "cache",
                "callback",
                "cliconf",
                "connection",
                "httpapi",
                "inventory",
                "lookup",
                "module",
                "netconf",
                "shell",
                "strategy",
                "vars",
            ]
        ] = Field(
            default="module",
            description="Specify the plugin type",
        )

        class Config:
            extra = Extra.forbid

    plugin: Optional[PluginModel]

    class Config:
        extra = Extra.forbid


class EditorModel(BaseModel):
    command: Optional[str] = Field(
        default="vi +{line_number} {filename}",
        description="Specify the editor command",
    )
    console: Optional[bool] = Field(
        default=True, description="Specify if the editor is console based"
    )

    class Config:
        extra = Extra.forbid


class ExecModel(BaseModel):
    shell: Optional[bool] = Field(
        default=True, description="Specify the exec command should be run in a shell"
    )
    command: Optional[str] = Field(
        default="/bin/bash",
        description="Specify the command to run within the execution environment",
    )

    class Config:
        extra = Extra.forbid


class ExecutionEnvironmentModel(BaseModel):
    class EnvironmentVariablesModel(BaseModel):
        pass_: Optional[List[str]] = Field(
            alias="pass",
            description="Specify an exiting environment variable to be passed through to and set within the execution environment",
        )
        set: Optional[Mapping[str, str]] = Field(
            description="Specify an environment variable and a value to be set within the execution environment"
        )

        class Config:
            extra = Extra.forbid

    class VolumeMountsModel(BaseModel):
        src: str
        dest: str
        label: Optional[str]

        class Config:
            extra = Extra.forbid

    container_engine: Optional[Literal["auto", "podman", "docker"]] = Field(
        default="auto",
        description="Specify the container engine (auto=podman then docker)",
    )
    enabled: Optional[bool] = Field(
        default=True,
        description="Enable or disable the use of an execution environment",
    )
    environment_variables: Optional[EnvironmentVariablesModel]
    image: Optional[str] = Field(
        default="quay.io/ansible/creator-ee:v0.2.0",
        description="Specify the name of the execution environment image",
    )
    pull_policy: Optional[Literal["always", "missing", "never", "tag"]] = Field(
        default="tag",
        description="""Specify the image pull policy.
always: Always pull the image
missing: Pull if not locally available
never: Never pull the image
tag: if the image tag is 'latest', always pull the image, otherwise pull if not locally available""",
    )
    volume_mounts: Optional[List[VolumeMountsModel]] = Field(
        description="Specify volume to be bind mounted within an execution environment"
    )
    container_options: Optional[List[str]] = Field(
        description="Extra parameters passed to the container engine command"
    )

    class Config:
        extra = Extra.forbid


class LoggingModel(BaseModel):
    level: Optional[Literal["debug", "info", "warning", "error", "critical"]] = Field(
        default="warning", description="Specify the ansible-navigator log level"
    )
    append: Optional[bool] = Field(
        default=True,
        description="Specify if log messages should be appended to an existing log file, otherwise a new log file will be created per session",
    )
    file: Optional[str] = Field(
        default="$PWD/ansible-navigator.",
        description="Specify the full path for the ansible-navigator log file",
    )

    class Config:
        extra = Extra.forbid


class PlaybookArtifactModel(BaseModel):
    enable: Optional[bool] = Field(
        default=True,
        description="""Enable or disable the creation of artifacts for completed playbooks.
Note: not compatible with 'mode: stdout' when playbooks require user input""",
    )
    replay: Optional[str] = Field(
        description="Specify the path for the playbook artifact to replay"
    )
    save_as: Optional[str] = Field(
        default="{playbook_dir}/{playbook_name}-artifact-{ts_utc}.json",
        description="Specify the name for artifacts created from completed playbooks",
    )

    class Config:
        extra = Extra.forbid


class AnsibleNavigatorModel(BaseModel):
    ansible: Optional[AnsibleModel]
    ansible_runner: Optional[AnsibleRunnerModel]
    app: Optional[
        Literal[
            "collections",
            "config",
            "doc",
            "exec",
            "images",
            "inventory",
            "replay",
            "run",
            "welcome",
        ]
    ] = Field(default="welcome", description="Subcommands")
    collection_doc_cache_path: Optional[str] = Field(
        default="$HOME/.cache/ansible-navigator/collection_doc_cache.db",
        description="The path to collection doc cache",
    )
    color: Optional[ColorModel]
    documentation: Optional[DocumentationModel]
    editor: Optional[EditorModel]
    exec: Optional[ExecModel]
    execution_environment: Optional[ExecutionEnvironmentModel]
    help_config: Optional[bool] = Field(
        default=False,
        description="Help options for ansible-config command in stdout mode",
    )
    help_doc: Optional[bool] = Field(
        default=False,
        description="Help options for ansible-doc command in stdout mode",
    )
    help_inventory: Optional[bool] = Field(
        default=False,
        description="Help options for ansible-inventory command in stdout mode",
    )
    help_playbook: Optional[bool] = Field(
        default=False,
        description="Help options for ansible-playbook command in stdout mode",
    )
    inventory_columns: Optional[List[str]] = Field(
        description="Specify a host attribute to show in the inventory view"
    )
    logging: Optional[LoggingModel]
    mode: Optional[Literal["stdout", "interactive"]] = Field(
        default="interactive", description="Specify the user-interface mode"
    )
    playbook_artifact: Optional[PlaybookArtifactModel]

    class Config:
        extra = Extra.forbid


class NavigatorModel(BaseModel):
    ansible_navigator: AnsibleNavigatorModel

    class Config:
        extra = Extra.forbid
        title = "Ansible-Navigator Configuration Schema"
        schema_extra = {
            "$schema": consts.META_SCHEMA_URI,
            "examples": ["ansible-navigator.yml"],
        }
