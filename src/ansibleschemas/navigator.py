# Used to generate JSON Validations chema for ansible-navigator config files
# https://github.com/ansible-community/ansible-lint/blob/master/.ansible-lint
import sys
from typing import List, Mapping, Optional

from pydantic import BaseModel as NavigatorBaseModel
from pydantic import Extra
from pydantic.fields import Field

from . import consts

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module
else:
    from typing_extensions import Literal


class BaseModel(NavigatorBaseModel):
    class Config:
        @classmethod
        def alias_generator(cls, string: str) -> str:
            """rewrites all field names as ansible navigator uses dashes"""
            return string.replace("_", "-")


class AnsibleModel(BaseModel):
    config: str  # tododo "/tmp/ansible.cfg"
    cmdline: Optional[str] = Field(
        description="Extra parameters passed to the corresponding command"
    )
    inventories: List[str]
    # tododo "- /tmp/test_inventory.yml"
    playbook: str  # tododo "/tmp/test_playbook.yml"

    class Config:
        extra = Extra.forbid


class AnsibleRunnerModel(BaseModel):
    artifact_dir: Optional[str] = Field(
        description="The directory path to store artifacts generated by ansible-runner"
    )
    rotate_artifacts_count: Optional[int] = Field(
        description="Keep ansible-runner artifact directories, for last n runs, if set to 0 artifact directories wonâ€™t be deleted"
    )
    timeout: Optional[int] = Field(
        description="The timeout value after which ansible-runner willforce stop the execution"
    )

    class Config:
        extra = Extra.forbid


class ColorModel(BaseModel):
    enable: bool  # False
    osc4: bool  # False

    class Config:
        extra = Extra.forbid


class DocumentationModel(BaseModel):
    class PluginModel(BaseModel):
        name: str  # tododo "shell"
        type: str  # tododo "become"

        class Config:
            extra = Extra.forbid

    plugin: PluginModel

    class Config:
        extra = Extra.forbid


class EditorModel(BaseModel):
    command: str  # tododo "vim_from_setting"
    console: Optional[bool]

    class Config:
        extra = Extra.forbid


class ExecModel(BaseModel):
    shell: Optional[bool]
    command: str  # tododo "/bin/foo"

    class Config:
        extra = Extra.forbid


class ExecutionEnvironmentModel(BaseModel):
    class EnvironmentVariablesModel(BaseModel):
        pass_: List[str] = Field(alias="pass")
        set: Optional[Mapping[str, str]]

        class Config:
            extra = Extra.forbid

    class VolumeMountsModel(BaseModel):
        src: str  # tododo "/test1"
        dest: str  # tododo "/test1"
        label: str  # tododo "Z"

        class Config:
            extra = Extra.forbid

    container_engine: Optional[Literal["auto", "podman", "docker"]] = Field(
        default="auto",
        description="Specify the container engine (auto=podman then docker)",
    )
    enabled: bool
    environment_variables: EnvironmentVariablesModel
    image: str  # tododo "test_image:latest"
    pull_policy: str  # tododo "never"
    volume_mounts: List[VolumeMountsModel]
    container_options: List[str]  # tododo
    # - "--net=host"

    class Config:
        extra = Extra.forbid


class LoggingModel(BaseModel):
    level: str  # tododo "critical"
    append: Optional[bool]
    file: str  # tododo "/tmp/log.txt"

    class Config:
        extra = Extra.forbid


class PlaybookArtifactModel(BaseModel):
    enable: bool
    replay: str  # tododo "/tmp/test_artifact.json"
    save_as: str  # tododo "/tmp/test_artifact.json"

    class Config:
        extra = Extra.forbid


class AnsibleNavigatorModel(BaseModel):
    ansible: AnsibleModel
    ansible_runner: AnsibleRunnerModel
    app: Optional[
        Literal[
            "collections",
            "config",
            "doc",
            "exec",
            "images",
            "inventory",
            "replay",
            "run",
            "welcome",
        ]
    ] = Field(default="welcome", description="Subcommands")
    collection_doc_cache_path: Optional[str] = Field(
        default="$HOME/.cache/ansible-navigator/collection_doc_cache.db",
        description="The path to collection doc cache",
    )
    color: ColorModel
    documentation: DocumentationModel
    editor: EditorModel
    exec: ExecModel
    execution_environment: ExecutionEnvironmentModel
    help_config: Optional[bool]
    help_doc: Optional[bool]
    help_inventory: Optional[bool]
    help_playbook: Optional[bool]
    inventory_columns: List[str]  # tododo
    # - ansible_network_os
    # - ansible_network_cli_ssh_type
    # - ansible_connection
    logging: LoggingModel
    mode: str  # tododo "stdout"
    playbook_artifact: PlaybookArtifactModel

    class Config:
        extra = Extra.forbid


class NavigatorModel(BaseModel):
    ansible_navigator: AnsibleNavigatorModel

    class Config:
        extra = Extra.forbid
        title = "Ansible-Navigator Configuration Schema"
        schema_extra = {
            "$schema": consts.META_SCHEMA_URI,
            "examples": ["ansible-navigator.yml"],
        }
