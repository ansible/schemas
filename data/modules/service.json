{
    "service": {
        "doc": {
            "author": [
                "Ansible Core Team",
                "Michael DeHaan"
            ],
            "collection": "ansible.builtin",
            "description": [
                "Controls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.",
                "For Windows targets, use the M(ansible.windows.win_service) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/service.py",
            "has_action": true,
            "module": "service",
            "notes": [
                "For AIX, group subsystem names can be used.",
                "Supports C(check_mode)."
            ],
            "options": {
                "arguments": {
                    "aliases": [
                        "args"
                    ],
                    "description": [
                        "Additional arguments provided on the command line.",
                        "While using remote hosts with systemd this setting will be ignored."
                    ],
                    "type": "str"
                },
                "enabled": {
                    "description": [
                        "Whether the service should start on boot.",
                        "B(At least one of state and enabled are required.)"
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "Name of the service."
                    ],
                    "required": true,
                    "type": "str"
                },
                "pattern": {
                    "description": [
                        "If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result.",
                        "If the string is found, the service will be assumed to be started.",
                        "While using remote hosts with systemd this setting will be ignored."
                    ],
                    "type": "str",
                    "version_added": "0.7",
                    "version_added_collection": "ansible.builtin"
                },
                "runlevel": {
                    "default": "default",
                    "description": [
                        "For OpenRC init scripts (e.g. Gentoo) only.",
                        "The runlevel that this service belongs to.",
                        "While using remote hosts with systemd this setting will be ignored."
                    ],
                    "type": "str"
                },
                "sleep": {
                    "description": [
                        "If the service is being C(restarted) then sleep this many seconds between the stop and start command.",
                        "This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop.",
                        "Not all service managers support sleep, i.e when using systemd this setting will be ignored."
                    ],
                    "type": "int",
                    "version_added": "1.3",
                    "version_added_collection": "ansible.builtin"
                },
                "state": {
                    "choices": [
                        "reloaded",
                        "restarted",
                        "started",
                        "stopped"
                    ],
                    "description": [
                        "C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.",
                        "C(restarted) will always bounce the service.",
                        "C(reloaded) will always reload.",
                        "B(At least one of state and enabled are required.)",
                        "Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally."
                    ],
                    "type": "str"
                },
                "use": {
                    "default": "auto",
                    "description": [
                        "The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module.",
                        "Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found."
                    ],
                    "type": "str",
                    "version_added": 2.2,
                    "version_added_collection": "ansible.builtin"
                }
            },
            "seealso": [
                {
                    "module": "ansible.windows.win_service"
                }
            ],
            "short_description": "Manage services",
            "version_added": "0.1",
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n- name: Start service httpd, if not started\n  ansible.builtin.service:\n    name: httpd\n    state: started\n\n- name: Stop service httpd, if started\n  ansible.builtin.service:\n    name: httpd\n    state: stopped\n\n- name: Restart service httpd, in all cases\n  ansible.builtin.service:\n    name: httpd\n    state: restarted\n\n- name: Reload service httpd, in all cases\n  ansible.builtin.service:\n    name: httpd\n    state: reloaded\n\n- name: Enable service httpd, and not touch the state\n  ansible.builtin.service:\n    name: httpd\n    enabled: yes\n\n- name: Start service foo, based on running process /usr/bin/foo\n  ansible.builtin.service:\n    name: foo\n    pattern: /usr/bin/foo\n    state: started\n\n- name: Restart network service for interface eth0\n  ansible.builtin.service:\n    name: network\n    state: restarted\n    args: eth0\n",
        "metadata": null,
        "return": null
    }
}
