{
    "hetzner.hcloud.hcloud_load_balancer_service": {
        "doc": {
            "author": [
                "Lukas Kaemmerling (@LKaemmerling)"
            ],
            "collection": "hetzner.hcloud",
            "description": [
                "Create, update and manage the services of cloud Load Balancers on the Hetzner Cloud."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/hetzner/hcloud/plugins/modules/hcloud_load_balancer_service.py",
            "has_action": false,
            "module": "hcloud_load_balancer_service",
            "options": {
                "api_token": {
                    "description": [
                        "This is the API Token for the Hetzner Cloud."
                    ],
                    "required": true,
                    "type": "str"
                },
                "destination_port": {
                    "description": [
                        "The port traffic is forwarded to, i.e. the port the targets are listening and accepting connections on.",
                        "Required if services does not exists and protocol is tcp."
                    ],
                    "type": "int"
                },
                "endpoint": {
                    "default": "https://api.hetzner.cloud/v1",
                    "description": [
                        "This is the API Endpoint for the Hetzner Cloud."
                    ],
                    "type": "str"
                },
                "health_check": {
                    "description": [
                        "Configuration for health checks"
                    ],
                    "suboptions": {
                        "http": {
                            "description": [
                                "Additional Configuration of health checks with protocol http/https"
                            ],
                            "suboptions": {
                                "domain": {
                                    "description": [
                                        "Domain we will set within the HTTP HOST header"
                                    ],
                                    "type": "str"
                                },
                                "path": {
                                    "description": [
                                        "Path we will try to access"
                                    ],
                                    "type": "str"
                                },
                                "response": {
                                    "description": [
                                        "Response we expect, if response is not within the health check response the target is unhealthy"
                                    ],
                                    "type": "str"
                                },
                                "status_codes": {
                                    "description": [
                                        "List of HTTP status codes we expect to get when we perform the health check."
                                    ],
                                    "elements": "str",
                                    "type": "list"
                                },
                                "tls": {
                                    "default": false,
                                    "description": [
                                        "Verify the TLS certificate, only available if health check protocol is https"
                                    ],
                                    "type": "bool"
                                }
                            },
                            "type": "dict"
                        },
                        "interval": {
                            "description": [
                                "Interval of health checks, in seconds"
                            ],
                            "type": "int"
                        },
                        "port": {
                            "description": [
                                "Port the health check will be performed on"
                            ],
                            "type": "int"
                        },
                        "protocol": {
                            "choices": [
                                "http",
                                "https",
                                "tcp"
                            ],
                            "description": [
                                "Protocol the health checks will be performed over"
                            ],
                            "type": "str"
                        },
                        "retries": {
                            "description": [
                                "Number of retries until a target is marked as unhealthy"
                            ],
                            "type": "int"
                        },
                        "timeout": {
                            "description": [
                                "Timeout of health checks, in seconds"
                            ],
                            "type": "int"
                        }
                    },
                    "type": "dict"
                },
                "http": {
                    "description": [
                        "Configuration for HTTP and HTTPS services"
                    ],
                    "suboptions": {
                        "certificates": {
                            "description": [
                                "List of Names or IDs of certificates"
                            ],
                            "elements": "str",
                            "type": "list"
                        },
                        "cookie_lifetime": {
                            "description": [
                                "Lifetime of the cookie which will be set when you enable sticky sessions, in seconds"
                            ],
                            "type": "int"
                        },
                        "cookie_name": {
                            "description": [
                                "Name of the cookie which will be set when you enable sticky sessions"
                            ],
                            "type": "str"
                        },
                        "redirect_http": {
                            "default": false,
                            "description": [
                                "Redirect Traffic from Port 80 to Port 443, only available if protocol is https"
                            ],
                            "type": "bool"
                        },
                        "sticky_sessions": {
                            "default": false,
                            "description": [
                                "Enable or disable sticky_sessions"
                            ],
                            "type": "bool"
                        }
                    },
                    "type": "dict"
                },
                "listen_port": {
                    "description": [
                        "The port the service listens on, i.e. the port users can connect to."
                    ],
                    "required": true,
                    "type": "int"
                },
                "load_balancer": {
                    "description": [
                        "The Name of the Hetzner Cloud Load Balancer the service belongs to"
                    ],
                    "required": true,
                    "type": "str"
                },
                "protocol": {
                    "choices": [
                        "http",
                        "https",
                        "tcp"
                    ],
                    "description": [
                        "Protocol of the service.",
                        "Required if Load Balancer does not exists."
                    ],
                    "type": "str"
                },
                "proxyprotocol": {
                    "default": false,
                    "description": [
                        "Enable the PROXY protocol."
                    ],
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "State of the Load Balancer."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "hcloud-python >= 1.0.0",
                "hcloud-python >= 1.8.1"
            ],
            "seealso": [
                {
                    "description": "Complete reference for the Hetzner Cloud API.",
                    "link": "https://docs.hetzner.cloud/",
                    "name": "Documentation for Hetzner Cloud API"
                }
            ],
            "short_description": "Create and manage the services of cloud Load Balancers on the Hetzner Cloud.",
            "version_added": "0.1.0",
            "version_added_collection": "hetzner.hcloud"
        },
        "examples": "\n- name: Create a basic Load Balancer service with Port 80\n  hcloud_load_balancer_service:\n    load_balancer: my-load-balancer\n    protocol: http\n    listen_port: 80\n    state: present\n\n- name: Ensure the Load Balancer is absent (remove if needed)\n  hcloud_load_balancer_service:\n    load_balancer: my-Load Balancer\n    protocol: http\n    listen_port: 80\n    state: absent\n",
        "metadata": null,
        "return": {
            "hcloud_load_balancer_service": {
                "contains": {
                    "destination_port": {
                        "description": [
                            "The port traffic is forwarded to, i.e. the port the targets are listening and accepting connections on."
                        ],
                        "returned": "always",
                        "sample": 80,
                        "type": "int"
                    },
                    "health_check": {
                        "contains": {
                            "http": {
                                "contains": {
                                    "domain": {
                                        "description": "Domain we will set within the HTTP HOST header",
                                        "returned": "always",
                                        "sample": "example.com",
                                        "type": "str"
                                    },
                                    "path": {
                                        "description": "Path we will try to access",
                                        "returned": "always",
                                        "sample": "/",
                                        "type": "str"
                                    },
                                    "response": {
                                        "description": "Response we expect, if response is not within the health check response the target is unhealthy",
                                        "returned": "always",
                                        "type": "str"
                                    },
                                    "status_codes": {
                                        "description": "List of HTTP status codes we expect to get when we perform the health check.",
                                        "elements": "str",
                                        "returned": "always",
                                        "sample": [
                                            "2??",
                                            "3??"
                                        ],
                                        "type": "list"
                                    },
                                    "tls": {
                                        "description": "Verify the TLS certificate, only available if health check protocol is https",
                                        "returned": "always",
                                        "sample": false,
                                        "type": "bool"
                                    }
                                },
                                "description": "Additional Configuration of health checks with protocol http/https",
                                "returned": "always",
                                "type": "complex"
                            },
                            "interval": {
                                "description": "Interval of health checks, in seconds",
                                "returned": "always",
                                "sample": 15,
                                "type": "int"
                            },
                            "port": {
                                "description": "Port the health check will be performed on",
                                "returned": "always",
                                "sample": 80,
                                "type": "int"
                            },
                            "protocol": {
                                "description": "Protocol the health checks will be performed over",
                                "returned": "always",
                                "sample": "http",
                                "type": "str"
                            },
                            "retries": {
                                "description": "Number of retries until a target is marked as unhealthy",
                                "returned": "always",
                                "sample": 3,
                                "type": "int"
                            },
                            "timeout": {
                                "description": "Timeout of health checks, in seconds",
                                "returned": "always",
                                "sample": 10,
                                "type": "int"
                            }
                        },
                        "description": "Configuration for health checks",
                        "returned": "always",
                        "type": "complex"
                    },
                    "http": {
                        "contains": {
                            "certificates": {
                                "description": "List of Names or IDs of certificates",
                                "elements": "str",
                                "returned": "always",
                                "type": "list"
                            },
                            "cookie_lifetime": {
                                "description": "Lifetime of the cookie which will be set when you enable sticky sessions, in seconds",
                                "returned": "always",
                                "sample": 3600,
                                "type": "int"
                            },
                            "cookie_name": {
                                "description": "Name of the cookie which will be set when you enable sticky sessions",
                                "returned": "always",
                                "sample": "HCLBSTICKY",
                                "type": "str"
                            },
                            "redirect_http": {
                                "description": "Redirect Traffic from Port 80 to Port 443, only available if protocol is https",
                                "returned": "always",
                                "sample": false,
                                "type": "bool"
                            },
                            "sticky_sessions": {
                                "description": "Enable or disable sticky_sessions",
                                "returned": "always",
                                "sample": true,
                                "type": "bool"
                            }
                        },
                        "description": "Configuration for HTTP and HTTPS services",
                        "returned": "always",
                        "type": "complex"
                    },
                    "listen_port": {
                        "description": "The port the service listens on, i.e. the port users can connect to.",
                        "returned": "always",
                        "sample": 443,
                        "type": "int"
                    },
                    "load_balancer": {
                        "description": "The name of the Load Balancer where the service belongs to",
                        "returned": "always",
                        "sample": "my-load-balancer",
                        "type": "str"
                    },
                    "protocol": {
                        "description": "Protocol of the service",
                        "returned": "always",
                        "sample": "http",
                        "type": "str"
                    },
                    "proxyprotocol": {
                        "description": [
                            "Enable the PROXY protocol."
                        ],
                        "returned": "always",
                        "sample": false,
                        "type": "bool"
                    }
                },
                "description": "The Load Balancer service instance",
                "returned": "Always",
                "type": "complex"
            }
        }
    }
}
