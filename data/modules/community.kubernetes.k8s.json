{
    "community.kubernetes.k8s": {
        "doc": {
            "author": [
                "Chris Houseknecht (@chouseknecht)",
                "Fabian von Feilitzsch (@fabianvf)"
            ],
            "collection": "community.kubernetes",
            "description": [
                "Use the OpenShift Python client to perform CRUD operations on K8s objects.",
                "Pass the object definition from a source file or inline. See examples for reading files and using Jinja templates or vault-encrypted files.",
                "Access to the full range of K8s APIs.",
                "Use the M(community.kubernetes.k8s_info) module to obtain a list of items about an object of type C(kind)",
                "Authenticate using either a config file, certificates, password or token.",
                "Supports check mode."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/kubernetes/plugins/modules/k8s.py",
            "has_action": true,
            "module": "k8s",
            "notes": [
                "If your OpenShift Python library is not 0.9.0 or newer and you are trying to remove an item from an associative array/dictionary, for example a label or an annotation, you will need to explicitly set the value of the item to be removed to `null`. Simply deleting the entry in the dictionary will not remove it from openshift or kubernetes.",
                "The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on both platforms. For API version details and additional information visit https://github.com/openshift/openshift-restclient-python",
                "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file."
            ],
            "options": {
                "api_key": {
                    "description": [
                        "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable."
                    ],
                    "type": "str"
                },
                "api_version": {
                    "aliases": [
                        "api",
                        "version"
                    ],
                    "default": "v1",
                    "description": [
                        "Use to specify the API version.",
                        "Use to create, delete, or discover an object without providing a full resource definition.",
                        "Use in conjunction with I(kind), I(name), and I(namespace) to identify a specific object.",
                        "If I(resource definition) is provided, the I(apiVersion) value from the I(resource_definition) will override this option."
                    ],
                    "type": "str"
                },
                "append_hash": {
                    "default": false,
                    "description": [
                        "Whether to append a hash to a resource name for immutability purposes",
                        "Applies only to ConfigMap and Secret resources",
                        "The parameter will be silently ignored for other resource kinds",
                        "The full definition of an object is needed to generate the hash - this means that deleting an object created with append_hash will only work if the same object is passed with state=absent (alternatively, just use state=absent with the name including the generated hash and append_hash=no)",
                        "Requires openshift >= 0.7.2"
                    ],
                    "type": "bool"
                },
                "apply": {
                    "default": false,
                    "description": [
                        "C(apply) compares the desired resource definition with the previously supplied resource definition, ignoring properties that are automatically generated",
                        "C(apply) works better with Services than 'force=yes'",
                        "Requires openshift >= 0.9.2",
                        "mutually exclusive with C(merge_type)"
                    ],
                    "type": "bool"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_ca_cert"
                    ],
                    "description": [
                        "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable."
                    ],
                    "type": "path"
                },
                "client_cert": {
                    "aliases": [
                        "cert_file"
                    ],
                    "description": [
                        "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "key_file"
                    ],
                    "description": [
                        "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable."
                    ],
                    "type": "path"
                },
                "context": {
                    "description": [
                        "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable."
                    ],
                    "type": "str"
                },
                "delete_options": {
                    "description": [
                        "Configure behavior when deleting an object.",
                        "Only used when I(state=absent)."
                    ],
                    "suboptions": {
                        "gracePeriodSeconds": {
                            "description": [
                                "Specify how many seconds to wait before forcefully terminating.",
                                "Only implemented for Pod resources.",
                                "If not specified, the default grace period for the object type will be used."
                            ],
                            "type": "int"
                        },
                        "preconditions": {
                            "description": [
                                "Specify condition that must be met for delete to proceed."
                            ],
                            "suboptions": {
                                "resourceVersion": {
                                    "description": [
                                        "Specify the resource version of the target object."
                                    ],
                                    "type": "str"
                                },
                                "uid": {
                                    "description": [
                                        "Specify the UID of the target object."
                                    ],
                                    "type": "str"
                                }
                            },
                            "type": "dict"
                        },
                        "propagationPolicy": {
                            "choices": [
                                "Foreground",
                                "Background",
                                "Orphan"
                            ],
                            "description": [
                                "Use to control how dependent objects are deleted.",
                                "If not specified, the default policy for the object type will be used. This may vary across object types."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict",
                    "version_added": "1.2.0",
                    "version_added_collection": "community.kubernetes"
                },
                "force": {
                    "default": false,
                    "description": [
                        "If set to C(yes), and I(state) is C(present), an existing object will be replaced."
                    ],
                    "type": "bool"
                },
                "host": {
                    "description": [
                        "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable."
                    ],
                    "type": "str"
                },
                "kind": {
                    "description": [
                        "Use to specify an object model.",
                        "Use to create, delete, or discover an object without providing a full resource definition.",
                        "Use in conjunction with I(api_version), I(name), and I(namespace) to identify a specific object.",
                        "If I(resource definition) is provided, the I(kind) value from the I(resource_definition) will override this option."
                    ],
                    "type": "str"
                },
                "kubeconfig": {
                    "description": [
                        "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json). Can also be specified via K8S_AUTH_KUBECONFIG environment variable."
                    ],
                    "type": "path"
                },
                "merge_type": {
                    "choices": [
                        "json",
                        "merge",
                        "strategic-merge"
                    ],
                    "description": [
                        "Whether to override the default patch merge approach with a specific type. By default, the strategic merge will typically be used.",
                        "For example, Custom Resource Definitions typically aren't updatable by the usual strategic merge. You may want to use C(merge) if you see \"strategic merge patch format is not supported\"",
                        "See U(https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment)",
                        "Requires openshift >= 0.6.2",
                        "If more than one merge_type is given, the merge_types will be tried in order",
                        "If openshift >= 0.6.2, this defaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters on resource kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default is simply C(strategic-merge).",
                        "mutually exclusive with C(apply)"
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "name": {
                    "description": [
                        "Use to specify an object name.",
                        "Use to create, delete, or discover an object without providing a full resource definition.",
                        "Use in conjunction with I(api_version), I(kind) and I(namespace) to identify a specific object.",
                        "If I(resource definition) is provided, the I(metadata.name) value from the I(resource_definition) will override this option."
                    ],
                    "type": "str"
                },
                "namespace": {
                    "description": [
                        "Use to specify an object namespace.",
                        "Useful when creating, deleting, or discovering an object without providing a full resource definition.",
                        "Use in conjunction with I(api_version), I(kind), and I(name) to identify a specific object.",
                        "If I(resource definition) is provided, the I(metadata.namespace) value from the I(resource_definition) will override this option."
                    ],
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.",
                        "Please read the description of the C(username) option for a discussion of when this option is applicable."
                    ],
                    "type": "str"
                },
                "persist_config": {
                    "description": [
                        "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.",
                        "When the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.",
                        "Default to false.",
                        "Please note that the current version of the k8s python client library does not support setting this flag to True yet.",
                        "The fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169"
                    ],
                    "type": "bool"
                },
                "proxy": {
                    "description": [
                        "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.",
                        "Please note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY)."
                    ],
                    "type": "str"
                },
                "resource_definition": {
                    "aliases": [
                        "definition",
                        "inline"
                    ],
                    "description": [
                        "Provide a valid YAML definition (either as a string, list, or dict) for an object when creating or updating.",
                        "NOTE: I(kind), I(api_version), I(name), and I(namespace) will be overwritten by corresponding values found in the provided I(resource_definition)."
                    ]
                },
                "src": {
                    "description": [
                        "Provide a path to a file containing a valid YAML definition of an object or objects to be created or updated. Mutually exclusive with I(resource_definition). NOTE: I(kind), I(api_version), I(name), and I(namespace) will be overwritten by corresponding values found in the configuration read in from the I(src) file.",
                        "Reads from the local file system. To read from the Ansible controller's file system, including vaulted files, use the file lookup plugin or template lookup plugin, combined with the from_yaml filter, and pass the result to I(resource_definition). See Examples below.",
                        "Mutually exclusive with I(template) in case of M(k8s) module."
                    ],
                    "type": "path"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Determines if an object should be created, patched, or deleted. When set to C(present), an object will be created, if it does not already exist. If set to C(absent), an existing object will be deleted. If set to C(present), an existing object will be patched, if its attributes differ from those specified using I(resource_definition) or I(src)."
                    ],
                    "type": "str"
                },
                "template": {
                    "description": [
                        "Provide a valid YAML template definition file for an object when creating or updating.",
                        "Value can be provided as string or dictionary.",
                        "Mutually exclusive with C(src) and C(resource_definition).",
                        "Template files needs to be present on the Ansible Controller's file system.",
                        "Additional parameters can be specified using dictionary.",
                        "Valid additional parameters - ",
                        "C(newline_sequence) (str): Specify the newline sequence to use for templating files. valid choices are \"\\n\", \"\\r\", \"\\r\\n\". Default value \"\\n\".",
                        "C(block_start_string) (str): The string marking the beginning of a block. Default value \"{%\".",
                        "C(block_end_string) (str): The string marking the end of a block. Default value \"%}\".",
                        "C(variable_start_string) (str): The string marking the beginning of a print statement. Default value \"{{\".",
                        "C(variable_end_string) (str): The string marking the end of a print statement. Default value \"}}\".",
                        "C(trim_blocks) (bool): Determine when newlines should be removed from blocks. When set to C(yes) the first newline after a block is removed (block, not variable tag!). Default value is true.",
                        "C(lstrip_blocks) (bool): Determine when leading spaces and tabs should be stripped. When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block. This functionality requires Jinja 2.7 or newer. Default value is false."
                    ],
                    "type": "raw"
                },
                "username": {
                    "description": [
                        "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.",
                        "Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the C(k8s_auth) module, as that might do what you need."
                    ],
                    "type": "str"
                },
                "validate": {
                    "description": [
                        "how (if at all) to validate the resource definition against the kubernetes schema. Requires the kubernetes-validate python module and openshift >= 0.8.0"
                    ],
                    "suboptions": {
                        "fail_on_error": {
                            "description": "whether to fail on validation errors.",
                            "type": "bool"
                        },
                        "strict": {
                            "default": true,
                            "description": "whether to fail when passing unexpected properties",
                            "type": "bool"
                        },
                        "version": {
                            "description": "version of Kubernetes to validate against. defaults to Kubernetes server version",
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "description": [
                        "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": false,
                    "description": [
                        "Whether to wait for certain resource kinds to end up in the desired state.",
                        "By default the module exits once Kubernetes has received the request.",
                        "Implemented for C(state=present) for C(Deployment), C(DaemonSet) and C(Pod), and for C(state=absent) for all resource kinds.",
                        "For resource kinds without an implementation, C(wait) returns immediately unless C(wait_condition) is set."
                    ],
                    "type": "bool"
                },
                "wait_condition": {
                    "description": [
                        "Specifies a custom condition on the status to wait for.",
                        "Ignored if C(wait) is not set or is set to False."
                    ],
                    "suboptions": {
                        "reason": {
                            "description": [
                                "The value of the reason field in your desired condition",
                                "For example, if a C(Deployment) is paused, The C(Progressing) C(type) will have the C(DeploymentPaused) reason.",
                                "The possible reasons in a condition are specific to each resource type in Kubernetes.",
                                "See the API documentation of the status field for a given resource to see possible choices."
                            ],
                            "type": "str"
                        },
                        "status": {
                            "choices": [
                                "True",
                                "False",
                                "Unknown"
                            ],
                            "default": "True",
                            "description": [
                                "The value of the status field in your desired condition.",
                                "For example, if a C(Deployment) is paused, the C(Progressing) C(type) will have the C(Unknown) status."
                            ],
                            "type": "str"
                        },
                        "type": {
                            "description": [
                                "The type of condition to wait for.",
                                "For example, the C(Pod) resource will set the C(Ready) condition (among others).",
                                "Required if you are specifying a C(wait_condition).",
                                "If left empty, the C(wait_condition) field will be ignored.",
                                "The possible types for a condition are specific to each resource type in Kubernetes.",
                                "See the API documentation of the status field for a given resource to see possible choices."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "wait_sleep": {
                    "default": 5,
                    "description": [
                        "Number of seconds to sleep between checks."
                    ],
                    "type": "int"
                },
                "wait_timeout": {
                    "default": 120,
                    "description": [
                        "How long in seconds to wait for the resource to end up in the desired state.",
                        "Ignored if C(wait) is not set."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "python >= 2.7",
                "openshift >= 0.6",
                "PyYAML >= 3.11"
            ],
            "short_description": "Manage Kubernetes (K8s) objects"
        },
        "examples": "\n- name: Create a k8s namespace\n  community.kubernetes.k8s:\n    name: testing\n    api_version: v1\n    kind: Namespace\n    state: present\n\n- name: Create a Service object from an inline definition\n  community.kubernetes.k8s:\n    state: present\n    definition:\n      apiVersion: v1\n      kind: Service\n      metadata:\n        name: web\n        namespace: testing\n        labels:\n          app: galaxy\n          service: web\n      spec:\n        selector:\n          app: galaxy\n          service: web\n        ports:\n        - protocol: TCP\n          targetPort: 8000\n          name: port-8000-tcp\n          port: 8000\n\n- name: Remove an existing Service object\n  community.kubernetes.k8s:\n    state: absent\n    api_version: v1\n    kind: Service\n    namespace: testing\n    name: web\n\n# Passing the object definition from a file\n\n- name: Create a Deployment by reading the definition from a local file\n  community.kubernetes.k8s:\n    state: present\n    src: /testing/deployment.yml\n\n- name: >-\n    Read definition file from the Ansible controller file system.\n    If the definition file has been encrypted with Ansible Vault it will automatically be decrypted.\n  community.kubernetes.k8s:\n    state: present\n    definition: \"{{ lookup('file', '/testing/deployment.yml') | from_yaml }}\"\n\n- name: Read definition template file from the Ansible controller file system\n  community.kubernetes.k8s:\n    state: present\n    template: '/testing/deployment.j2'\n\n- name: Read definition template file from the Ansible controller file system that uses custom start/end strings\n  community.kubernetes.k8s:\n    state: present\n    template:\n      path: '/testing/deployment.j2'\n      variable_start_string: '[['\n      variable_end_string: ']]'\n\n- name: fail on validation errors\n  community.kubernetes.k8s:\n    state: present\n    definition: \"{{ lookup('template', '/testing/deployment.yml') | from_yaml }}\"\n    validate:\n      fail_on_error: yes\n\n- name: warn on validation errors, check for unexpected properties\n  community.kubernetes.k8s:\n    state: present\n    definition: \"{{ lookup('template', '/testing/deployment.yml') | from_yaml }}\"\n    validate:\n      fail_on_error: no\n      strict: yes\n\n# Download and apply manifest\n- name: Download metrics-server manifest to the cluster.\n  ansible.builtin.get_url:\n    url: https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n    dest: ~/metrics-server.yaml\n    mode: '0664'\n\n- name: Apply metrics-server manifest to the cluster.\n  community.kubernetes.k8s:\n    state: present\n    src: ~/metrics-server.yaml\n",
        "metadata": null,
        "return": {
            "result": {
                "contains": {
                    "api_version": {
                        "description": "The versioned schema of this representation of an object.",
                        "returned": "success",
                        "type": "str"
                    },
                    "duration": {
                        "description": "elapsed time of task in seconds",
                        "returned": "when C(wait) is true",
                        "sample": 48,
                        "type": "int"
                    },
                    "items": {
                        "description": "Returned only when multiple yaml documents are passed to src or resource_definition",
                        "returned": "when resource_definition or src contains list of objects",
                        "type": "list"
                    },
                    "kind": {
                        "description": "Represents the REST resource this object represents.",
                        "returned": "success",
                        "type": "str"
                    },
                    "metadata": {
                        "description": "Standard object metadata. Includes name, namespace, annotations, labels, etc.",
                        "returned": "success",
                        "type": "complex"
                    },
                    "spec": {
                        "description": "Specific attributes of the object. Will vary based on the I(api_version) and I(kind).",
                        "returned": "success",
                        "type": "complex"
                    },
                    "status": {
                        "description": "Current status details for the object.",
                        "returned": "success",
                        "type": "complex"
                    }
                },
                "description": [
                    "The created, patched, or otherwise present object. Will be empty in the case of a deletion."
                ],
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
