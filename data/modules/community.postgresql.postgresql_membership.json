{
    "community.postgresql.postgresql_membership": {
        "doc": {
            "author": [
                "Andrew Klychkov (@Andersson007)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Adds or removes PostgreSQL roles from groups (other roles).",
                "Users are roles with login privilege.",
                "Groups are PostgreSQL roles usually without LOGIN privilege.",
                "Common use case:",
                "1) add a new group (groups) by M(community.postgresql.postgresql_user) module with I(role_attr_flags=NOLOGIN)",
                "2) grant them desired privileges by M(community.postgresql.postgresql_privs) module",
                "3) add desired PostgreSQL users to the new group (groups) by this module"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_membership.py",
            "has_action": false,
            "module": "postgresql_membership",
            "notes": [
                "Supports C(check_mode).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of database to connect to."
                    ],
                    "type": "str"
                },
                "fail_on_role": {
                    "default": true,
                    "description": [
                        "If C(yes), fail when group or target_role doesn't exist. If C(no), just warn and continue."
                    ],
                    "type": "bool"
                },
                "groups": {
                    "aliases": [
                        "group",
                        "source_role",
                        "source_roles"
                    ],
                    "description": [
                        "The list of groups (roles) that need to be granted to or revoked from I(target_roles)."
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Membership state.",
                        "I(state=present) implies the I(groups)must be granted to I(target_roles).",
                        "I(state=absent) implies the I(groups) must be revoked from I(target_roles)."
                    ],
                    "type": "str"
                },
                "target_roles": {
                    "aliases": [
                        "target_role",
                        "users",
                        "user"
                    ],
                    "description": [
                        "The list of target roles (groups will be granted to them)."
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters I(groups), I(target_roles), I(session_role) are potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections via the parameters are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "module": "community.postgresql.postgresql_user"
                },
                {
                    "module": "community.postgresql.postgresql_privs"
                },
                {
                    "module": "community.postgresql.postgresql_owner"
                },
                {
                    "description": "Complete reference of the PostgreSQL role membership documentation.",
                    "link": "https://www.postgresql.org/docs/current/role-membership.html",
                    "name": "PostgreSQL role membership reference"
                },
                {
                    "description": "Complete reference of the PostgreSQL role attributes documentation.",
                    "link": "https://www.postgresql.org/docs/current/role-attributes.html",
                    "name": "PostgreSQL role attributes reference"
                }
            ],
            "short_description": "Add or remove PostgreSQL roles from groups"
        },
        "examples": "\n- name: Grant role read_only to alice and bob\n  community.postgresql.postgresql_membership:\n    group: read_only\n    target_roles:\n    - alice\n    - bob\n    state: present\n\n# you can also use target_roles: alice,bob,etc to pass the role list\n\n- name: Revoke role read_only and exec_func from bob. Ignore if roles don't exist\n  community.postgresql.postgresql_membership:\n    groups:\n    - read_only\n    - exec_func\n    target_role: bob\n    fail_on_role: no\n    state: absent\n",
        "metadata": null,
        "return": {
            "granted": {
                "description": "Dict of granted groups and roles.",
                "returned": "if I(state=present)",
                "sample": {
                    "ro_group": [
                        "alice",
                        "bob"
                    ]
                },
                "type": "dict"
            },
            "queries": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "GRANT \"user_ro\" TO \"alice\""
                ],
                "type": "str"
            },
            "revoked": {
                "description": "Dict of revoked groups and roles.",
                "returned": "if I(state=absent)",
                "sample": {
                    "ro_group": [
                        "alice",
                        "bob"
                    ]
                },
                "type": "dict"
            },
            "state": {
                "description": "Membership state that tried to be set.",
                "returned": "always",
                "sample": "present",
                "type": "str"
            }
        }
    }
}
