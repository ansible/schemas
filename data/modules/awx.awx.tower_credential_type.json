{
    "awx.awx.tower_credential_type": {
        "doc": {
            "author": "Adrien Fleury (@fleu42)",
            "collection": "awx.awx",
            "description": [
                "Create, update, or destroy Ansible Tower credential type. See U(https://www.ansible.com/tower) for an overview."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/awx/awx/plugins/modules/tower_credential_type.py",
            "has_action": false,
            "module": "tower_credential_type",
            "notes": [
                "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your Tower host information.",
                "I(config_file) should contain Tower configuration in the following format host=hostname username=username password=password"
            ],
            "options": {
                "description": {
                    "description": [
                        "The description of the credential type to give more detail about it."
                    ],
                    "type": "str"
                },
                "injectors": {
                    "description": [
                        "Enter injectors using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax."
                    ],
                    "type": "dict"
                },
                "inputs": {
                    "description": [
                        "Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax."
                    ],
                    "type": "dict"
                },
                "kind": {
                    "choices": [
                        "ssh",
                        "vault",
                        "net",
                        "scm",
                        "cloud",
                        "insights"
                    ],
                    "description": [
                        "The type of credential type being added. Note that only cloud and net can be used for creating credential types. Refer to the Ansible for more information."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "The name of the credential type."
                    ],
                    "required": true,
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Desired state of the resource."
                    ],
                    "type": "str"
                },
                "tower_config_file": {
                    "description": [
                        "Path to the Tower or AWX config file.",
                        "If provided, the other locations for config files will not be considered."
                    ],
                    "type": "path"
                },
                "tower_host": {
                    "description": [
                        "URL to your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_HOST) and then config files",
                        "If value not specified by any means, the value of C(127.0.0.1) will be used"
                    ],
                    "type": "str"
                },
                "tower_oauthtoken": {
                    "description": [
                        "The Tower OAuth token to use.",
                        "This value can be in one of two formats.",
                        "A string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)",
                        "A dictionary structure as returned by the tower_token module.",
                        "If value not set, will try environment variable C(TOWER_OAUTH_TOKEN) and then config files"
                    ],
                    "type": "raw",
                    "version_added": "3.7",
                    "version_added_collection": "awx.awx"
                },
                "tower_password": {
                    "description": [
                        "Password for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_PASSWORD) and then config files"
                    ],
                    "type": "str"
                },
                "tower_username": {
                    "description": [
                        "Username for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_USERNAME) and then config files"
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "tower_verify_ssl"
                    ],
                    "description": [
                        "Whether to allow insecure connections to Tower or AWX.",
                        "If C(no), SSL certificates will not be validated.",
                        "This should only be used on personally controlled sites using self-signed certificates.",
                        "If value not set, will try environment variable C(TOWER_VERIFY_SSL) and then config files"
                    ],
                    "type": "bool"
                }
            },
            "short_description": "Create, update, or destroy custom Ansible Tower credential type."
        },
        "examples": "\n- tower_credential_type:\n    name: Nexus\n    description: Credentials type for Nexus\n    kind: cloud\n    inputs: \"{{ lookup('file', 'tower_credential_inputs_nexus.json') }}\"\n    injectors: {'extra_vars': {'nexus_credential': 'test' }}\n    state: present\n    validate_certs: false\n\n- tower_credential_type:\n    name: Nexus\n    state: absent\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": null
    }
}
