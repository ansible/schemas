{
    "community.network.ig_config": {
        "doc": {
            "author": [
                "Ingate Systems AB (@ingatesystems)"
            ],
            "collection": "community.network",
            "description": [
                "Manage the configuration database on an Ingate SBC."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/network/plugins/modules/ig_config.py",
            "has_action": false,
            "module": "ig_config",
            "notes": [
                "If C(store_download) is set to True, and C(path) and C(filename) is omitted, the file will be stored in the current directory with an automatic filename.",
                "This module requires that the Ingate Python SDK is installed on the host. To install the SDK use the pip command from your shell C(pip install ingatesdk)."
            ],
            "options": {
                "add": {
                    "description": [
                        "Add a row to a table."
                    ],
                    "type": "bool"
                },
                "client": {
                    "description": [
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "address": {
                            "description": [
                                "The hostname or IP address to the unit."
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "The password for the REST API user."
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Which HTTP(S) port to connect to."
                            ],
                            "type": "int"
                        },
                        "scheme": {
                            "choices": [
                                "http",
                                "https"
                            ],
                            "description": [
                                "Which HTTP protocol to use."
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "timeout": {
                            "description": [
                                "The timeout (in seconds) for REST API requests."
                            ],
                            "type": "int"
                        },
                        "username": {
                            "description": [
                                "The username of the REST API user."
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "validate_certs": {
                            "aliases": [
                                "verify_ssl"
                            ],
                            "default": true,
                            "description": [
                                "Verify the unit's HTTPS certificate."
                            ],
                            "type": "bool"
                        },
                        "version": {
                            "choices": [
                                "v1"
                            ],
                            "default": "v1",
                            "description": [
                                "REST API version."
                            ],
                            "type": "str"
                        }
                    }
                },
                "columns": {
                    "description": [
                        "A dict containing column names/values."
                    ]
                },
                "delete": {
                    "description": [
                        "Delete all rows in a table or a specific row."
                    ],
                    "type": "bool"
                },
                "download": {
                    "description": [
                        "Download the configuration database from the unit."
                    ],
                    "type": "bool"
                },
                "factory": {
                    "description": [
                        "Reset the preliminary configuration to its factory defaults."
                    ],
                    "type": "bool"
                },
                "filename": {
                    "description": [
                        "The name of the file to store the downloaded configuration in. Refer to the C(download) option."
                    ]
                },
                "get": {
                    "description": [
                        "Return all rows in a table or a specific row."
                    ],
                    "type": "bool"
                },
                "modify": {
                    "description": [
                        "Modify a row in a table."
                    ],
                    "type": "bool"
                },
                "no_response": {
                    "default": false,
                    "description": [
                        "Expect no response when storing the preliminary configuration. Refer to the C(store) option."
                    ],
                    "type": "bool"
                },
                "path": {
                    "description": [
                        "Where in the filesystem to store the downloaded configuration. Refer to the C(download) option."
                    ]
                },
                "return_rowid": {
                    "description": [
                        "Get rowid(s) from a table where the columns match."
                    ],
                    "type": "bool"
                },
                "revert": {
                    "description": [
                        "Reset the preliminary configuration."
                    ],
                    "type": "bool"
                },
                "rowid": {
                    "description": [
                        "A row id."
                    ],
                    "type": "int"
                },
                "store": {
                    "description": [
                        "Store the preliminary configuration."
                    ],
                    "type": "bool"
                },
                "store_download": {
                    "default": false,
                    "description": [
                        "If the downloaded configuration should be stored on disk. Refer to the C(download) option."
                    ],
                    "type": "bool"
                },
                "table": {
                    "description": [
                        "The name of the table."
                    ]
                }
            },
            "requirements": [
                "ingatesdk >= 1.0.6"
            ],
            "short_description": "Manage the configuration database on an Ingate SBC."
        },
        "examples": "\n- name: Add/remove DNS servers\n  hosts: 192.168.1.1\n  connection: local\n  vars:\n    client_rw:\n      version: v1\n      address: \"{{ inventory_hostname }}\"\n      scheme: http\n      username: alice\n      password: foobar\n  tasks:\n\n  - name: Load factory defaults\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      factory: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Revert to last known applied configuration\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      revert: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Change the unit name\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      modify: true\n      table: misc.unitname\n      columns:\n        unitname: \"Test Ansible\"\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Add a DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      add: true\n      table: misc.dns_servers\n      columns:\n        server: 192.168.1.21\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Add a DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      add: true\n      table: misc.dns_servers\n      columns:\n        server: 192.168.1.22\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Add a DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      add: true\n      table: misc.dns_servers\n      columns:\n        server: 192.168.1.23\n    register: last_dns\n  - ansible.builtin.debug:\n      var: last_dns\n\n  - name: Modify the last added DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      modify: true\n      table: misc.dns_servers\n      rowid: \"{{ last_dns['add'][0]['id'] }}\"\n      columns:\n        server: 192.168.1.24\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Return the last added DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      get: true\n      table: misc.dns_servers\n      rowid: \"{{ last_dns['add'][0]['id'] }}\"\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Remove last added DNS server\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      delete: true\n      table: misc.dns_servers\n      rowid: \"{{ last_dns['add'][0]['id'] }}\"\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Return the all rows from table misc.dns_servers\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      get: true\n      table: misc.dns_servers\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Remove remaining DNS servers\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      delete: true\n      table: misc.dns_servers\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Get rowid for interface eth0\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      return_rowid: true\n      table: network.local_nets\n      columns:\n        interface: eth0\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Store the preliminary configuration\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      store: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n\n  - name: Do backup of the configuration database\n    community.network.ig_config:\n      client: \"{{ client_rw }}\"\n      download: true\n      store_download: true\n    register: result\n  - ansible.builtin.debug:\n      var: result\n",
        "metadata": null,
        "return": {
            "add": {
                "contains": {
                    "data": {
                        "description": "Column names/values",
                        "returned": "success",
                        "sample": {
                            "number": "2",
                            "server": "10.48.254.33"
                        },
                        "type": "complex"
                    },
                    "href": {
                        "description": "The REST API URL to the added row",
                        "returned": "success",
                        "sample": "http://192.168.1.1/api/v1/misc/dns_servers/2",
                        "type": "str"
                    },
                    "id": {
                        "description": "The row id",
                        "returned": "success",
                        "sample": 22,
                        "type": "int"
                    }
                },
                "description": "A list containing information about the added row",
                "returned": "when C(add) is yes and success",
                "type": "complex"
            },
            "delete": {
                "contains": {
                    "data": {
                        "description": "Column names/values",
                        "returned": "success",
                        "sample": {
                            "number": "2",
                            "server": "10.48.254.33"
                        },
                        "type": "complex"
                    },
                    "id": {
                        "description": "The row id",
                        "returned": "success",
                        "sample": 22,
                        "type": "int"
                    },
                    "table": {
                        "description": "The name of the table",
                        "returned": "success",
                        "sample": "misc.dns_servers",
                        "type": "str"
                    }
                },
                "description": "A list containing information about the deleted row(s)",
                "returned": "when C(delete) is yes and success",
                "type": "complex"
            },
            "download": {
                "contains": {
                    "config": {
                        "description": "The configuration database",
                        "returned": "success",
                        "type": "str"
                    },
                    "filename": {
                        "description": "A suggested name for the configuration",
                        "returned": "success",
                        "sample": "testname_2018-10-01T214040.cfg",
                        "type": "str"
                    },
                    "mimetype": {
                        "description": "The mimetype",
                        "returned": "success",
                        "sample": "application/x-config-database",
                        "type": "str"
                    }
                },
                "description": "Configuration database and meta data",
                "returned": "when C(download) is yes and success",
                "type": "complex"
            },
            "factory": {
                "contains": {
                    "msg": {
                        "description": "The command status message",
                        "returned": "success",
                        "sample": "reverted the configuration to the factory configuration.",
                        "type": "str"
                    }
                },
                "description": "A command status message",
                "returned": "when C(factory) is yes and success",
                "type": "complex"
            },
            "get": {
                "contains": {
                    "data": {
                        "description": "Column names/values",
                        "returned": "success",
                        "sample": {
                            "number": "2",
                            "server": "10.48.254.33"
                        },
                        "type": "complex"
                    },
                    "href": {
                        "description": "The REST API URL to the row",
                        "returned": "success",
                        "sample": "http://192.168.1.1/api/v1/misc/dns_servers/1",
                        "type": "str"
                    },
                    "id": {
                        "description": "The row id",
                        "returned": "success",
                        "sample": 1,
                        "type": "int"
                    },
                    "table": {
                        "description": "The name of the table",
                        "returned": "success",
                        "sample": "Testname",
                        "type": "str"
                    }
                },
                "description": "A list containing information about the row(s)",
                "returned": "when C(get) is yes and success",
                "type": "complex"
            },
            "modify": {
                "contains": {
                    "data": {
                        "description": "Column names/values",
                        "returned": "success",
                        "sample": {
                            "number": "2",
                            "server": "10.48.254.33"
                        },
                        "type": "complex"
                    },
                    "href": {
                        "description": "The REST API URL to the modified row",
                        "returned": "success",
                        "sample": "http://192.168.1.1/api/v1/misc/dns_servers/1",
                        "type": "str"
                    },
                    "id": {
                        "description": "The row id",
                        "returned": "success",
                        "sample": 10,
                        "type": "int"
                    },
                    "table": {
                        "description": "The name of the table",
                        "returned": "success",
                        "sample": "Testname",
                        "type": "str"
                    }
                },
                "description": "A list containing information about the modified row",
                "returned": "when C(modify) is yes and success",
                "type": "complex"
            },
            "return_rowid": {
                "description": "The matched row id(s).",
                "returned": "when C(return_rowid) is yes and success",
                "sample": [
                    1,
                    3
                ],
                "type": "list"
            },
            "revert": {
                "contains": {
                    "msg": {
                        "description": "The command status message",
                        "returned": "success",
                        "sample": "reverted the configuration to the last applied configuration.",
                        "type": "str"
                    }
                },
                "description": "A command status message",
                "returned": "when C(revert) is yes and success",
                "type": "complex"
            },
            "store": {
                "contains": {
                    "msg": {
                        "description": "The command status message",
                        "returned": "success",
                        "sample": "Successfully applied and saved the configuration.",
                        "type": "str"
                    }
                },
                "description": "A command status message",
                "returned": "when C(store) is yes and success",
                "type": "complex"
            }
        }
    }
}
