{
    "community.postgresql.postgresql_schema": {
        "doc": {
            "author": [
                "Flavien Chantelot (@Dorn-) <contact@flavien.io>",
                "Thomas O'Donnell (@andytom)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Add or remove PostgreSQL schema."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_schema.py",
            "has_action": false,
            "module": "postgresql_schema",
            "notes": [
                "Supports C(check_mode).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "cascade_drop": {
                    "default": false,
                    "description": [
                        "Drop schema with CASCADE to remove child objects."
                    ],
                    "type": "bool"
                },
                "database": {
                    "aliases": [
                        "db",
                        "login_db"
                    ],
                    "default": "postgres",
                    "description": [
                        "Name of the database to connect to and add or remove the schema."
                    ],
                    "type": "str"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "name": {
                    "aliases": [
                        "schema"
                    ],
                    "description": [
                        "Name of the schema to add or remove."
                    ],
                    "required": true,
                    "type": "str"
                },
                "owner": {
                    "description": [
                        "Name of the role to set as owner of the schema."
                    ],
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting.",
                        "The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "The schema state."
                    ],
                    "type": "str"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters I(schema), I(owner), I(session_role) are potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections via the parameters are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "description": "General information about PostgreSQL schemas.",
                    "link": "https://www.postgresql.org/docs/current/ddl-schemas.html",
                    "name": "PostgreSQL schemas"
                },
                {
                    "description": "Complete reference of the CREATE SCHEMA command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-createschema.html",
                    "name": "CREATE SCHEMA reference"
                },
                {
                    "description": "Complete reference of the ALTER SCHEMA command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-alterschema.html",
                    "name": "ALTER SCHEMA reference"
                },
                {
                    "description": "Complete reference of the DROP SCHEMA command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-dropschema.html",
                    "name": "DROP SCHEMA reference"
                }
            ],
            "short_description": "Add or remove PostgreSQL schema"
        },
        "examples": "\n- name: Create a new schema with name acme in test database\n  community.postgresql.postgresql_schema:\n    db: test\n    name: acme\n\n- name: Create a new schema acme with a user bob who will own it\n  community.postgresql.postgresql_schema:\n    name: acme\n    owner: bob\n\n- name: Drop schema \"acme\" with cascade\n  community.postgresql.postgresql_schema:\n    name: acme\n    state: absent\n    cascade_drop: yes\n",
        "metadata": null,
        "return": {
            "queries": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "CREATE SCHEMA \"acme\""
                ],
                "type": "list"
            },
            "schema": {
                "description": "Name of the schema.",
                "returned": "success, changed",
                "sample": "acme",
                "type": "str"
            }
        }
    }
}
