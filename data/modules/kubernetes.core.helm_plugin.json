{
    "kubernetes.core.helm_plugin": {
        "doc": {
            "author": [
                "Abhijeet Kasurde (@Akasurde)"
            ],
            "collection": "kubernetes.core",
            "description": [
                "Manages Helm plugins."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/kubernetes/core/plugins/modules/helm_plugin.py",
            "has_action": true,
            "module": "helm_plugin",
            "options": {
                "api_key": {
                    "description": [
                        "Token used to authenticate with the API. Can also be specified via C(K8S_AUTH_API_KEY) environment variable."
                    ],
                    "type": "str",
                    "version_added": "1.2.0",
                    "version_added_collection": "kubernetes.core"
                },
                "binary_path": {
                    "description": [
                        "The path of a helm binary to use."
                    ],
                    "required": false,
                    "type": "path"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_ca_cert"
                    ],
                    "description": [
                        "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via C(K8S_AUTH_SSL_CA_CERT) environment variable."
                    ],
                    "type": "path",
                    "version_added": "1.2.0",
                    "version_added_collection": "kubernetes.core"
                },
                "context": {
                    "aliases": [
                        "kube_context"
                    ],
                    "description": [
                        "Helm option to specify which kubeconfig context to use.",
                        "If the value is not specified in the task, the value of environment variable C(K8S_AUTH_CONTEXT) will be used instead."
                    ],
                    "type": "str"
                },
                "host": {
                    "description": [
                        "Provide a URL for accessing the API. Can also be specified via C(K8S_AUTH_HOST) environment variable."
                    ],
                    "type": "str",
                    "version_added": "1.2.0",
                    "version_added_collection": "kubernetes.core"
                },
                "kubeconfig": {
                    "aliases": [
                        "kubeconfig_path"
                    ],
                    "description": [
                        "Helm option to specify kubeconfig path to use.",
                        "If the value is not specified in the task, the value of environment variable C(K8S_AUTH_KUBECONFIG) will be used instead."
                    ],
                    "type": "path"
                },
                "plugin_name": {
                    "description": [
                        "Name of Helm plugin.",
                        "Required only if C(state=absent)."
                    ],
                    "type": "str"
                },
                "plugin_path": {
                    "description": [
                        "Plugin path to a plugin on your local file system or a url of a remote VCS repo.",
                        "If plugin path from file system is provided, make sure that tar is present on remote machine and not on Ansible controller.",
                        "Required only if C(state=present)."
                    ],
                    "type": "str"
                },
                "release_namespace": {
                    "aliases": [
                        "namespace"
                    ],
                    "description": [
                        "Kubernetes namespace where the helm plugin should be installed."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "If C(state=present) the Helm plugin will be installed.",
                        "If C(state=absent) the Helm plugin will be removed."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "default": true,
                    "description": [
                        "Whether or not to verify the API server's SSL certificates. Can also be specified via C(K8S_AUTH_VERIFY_SSL) environment variable."
                    ],
                    "type": "bool",
                    "version_added": "1.2.0",
                    "version_added_collection": "kubernetes.core"
                }
            },
            "requirements": [
                "helm (https://github.com/helm/helm/releases)"
            ],
            "short_description": "Manage Helm plugins",
            "version_added": "1.0.0",
            "version_added_collection": "kubernetes.core"
        },
        "examples": "\n- name: Install Helm env plugin\n  kubernetes.core.helm_plugin:\n    plugin_path: https://github.com/adamreese/helm-env\n    state: present\n\n- name: Install Helm plugin from local filesystem\n  kubernetes.core.helm_plugin:\n    plugin_path: https://domain/path/to/plugin.tar.gz\n    state: present\n\n- name: Remove Helm env plugin\n  kubernetes.core.helm_plugin:\n    plugin_name: env\n    state: absent\n",
        "metadata": null,
        "return": {
            "command": {
                "description": "Full `helm` command built by this module, in case you want to re-run the command outside the module or debug a problem.",
                "returned": "always",
                "sample": "helm plugin list ...",
                "type": "str"
            },
            "msg": {
                "description": "Info about successful command",
                "returned": "always",
                "sample": "Plugin installed successfully",
                "type": "str"
            },
            "rc": {
                "description": "Helm plugin command return code",
                "returned": "always",
                "sample": 1,
                "type": "int"
            },
            "stderr": {
                "description": "Full `helm` command stderr, in case you want to display it or examine the event log",
                "returned": "always",
                "sample": "",
                "type": "str"
            },
            "stdout": {
                "description": "Full `helm` command stdout, in case you want to display it or examine the event log",
                "returned": "always",
                "sample": "",
                "type": "str"
            }
        }
    }
}
