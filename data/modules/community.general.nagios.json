{
    "community.general.nagios": {
        "doc": {
            "author": "Tim Bielawa (@tbielawa)",
            "collection": "community.general",
            "description": [
                "The C(nagios) module has two basic functions: scheduling downtime and toggling alerts for services or hosts.",
                "The C(nagios) module is not idempotent.",
                "All actions require the I(host) parameter to be given explicitly. In playbooks you can use the C({{inventory_hostname}}) variable to refer to the host the playbook is currently running on.",
                "You can specify multiple services at once by separating them with commas, .e.g., C(services=httpd,nfs,puppet).",
                "When specifying what service to handle there is a special service value, I(host), which will handle alerts/downtime/acknowledge for the I(host itself), e.g., C(service=host). This keyword may not be given with other services at the same time. I(Setting alerts/downtime/acknowledge for a host does not affect alerts/downtime/acknowledge for any of the services running on it.) To schedule downtime for all services on particular host use keyword \"all\", e.g., C(service=all)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/nagios.py",
            "has_action": false,
            "module": "nagios",
            "options": {
                "action": {
                    "choices": [
                        "downtime",
                        "delete_downtime",
                        "enable_alerts",
                        "disable_alerts",
                        "silence",
                        "unsilence",
                        "silence_nagios",
                        "unsilence_nagios",
                        "command",
                        "servicegroup_service_downtime",
                        "servicegroup_host_downtime",
                        "acknowledge",
                        "forced_check"
                    ],
                    "description": [
                        "Action to take.",
                        "servicegroup options were added in 2.0.",
                        "delete_downtime options were added in 2.2.",
                        "The C(acknowledge) and C(forced_check) actions were added in community.general 1.2.0."
                    ],
                    "required": true,
                    "type": "str"
                },
                "author": {
                    "default": "Ansible",
                    "description": [
                        "Author to leave downtime comments as. Only usable with the C(downtime) and C(acknowledge) action."
                    ],
                    "type": "str"
                },
                "cmdfile": {
                    "description": [
                        "Path to the nagios I(command file) (FIFO pipe). Only required if auto-detection fails."
                    ],
                    "type": "str"
                },
                "command": {
                    "description": [
                        "The raw command to send to nagios, which should not include the submitted time header or the line-feed B(Required) option when using the C(command) action."
                    ],
                    "type": "str"
                },
                "comment": {
                    "default": "Scheduling downtime",
                    "description": [
                        "Comment for C(downtime) and C(acknowledge)action."
                    ],
                    "type": "str"
                },
                "host": {
                    "description": [
                        "Host to operate on in Nagios."
                    ],
                    "type": "str"
                },
                "minutes": {
                    "default": 30,
                    "description": [
                        "Minutes to schedule downtime for.",
                        "Only usable with the C(downtime) action."
                    ],
                    "type": "int"
                },
                "servicegroup": {
                    "description": [
                        "The Servicegroup we want to set downtimes/alerts for. B(Required) option when using the C(servicegroup_service_downtime) amd C(servicegroup_host_downtime)."
                    ],
                    "type": "str"
                },
                "services": {
                    "aliases": [
                        "service"
                    ],
                    "description": [
                        "What to manage downtime/alerts for. Separate multiple services with commas. C(service) is an alias for C(services). B(Required) option when using the C(downtime), C(acknowledge), C(forced_check), C(enable_alerts), and C(disable_alerts) actions."
                    ],
                    "type": "str"
                },
                "start": {
                    "description": [
                        "When downtime should start, in time_t format (epoch seconds)."
                    ],
                    "type": "str",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.general"
                }
            },
            "short_description": "Perform common tasks in Nagios related to downtime and notifications."
        },
        "examples": "\n- name: Set 30 minutes of apache downtime\n  community.general.nagios:\n    action: downtime\n    minutes: 30\n    service: httpd\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule an hour of HOST downtime\n  community.general.nagios:\n    action: downtime\n    minutes: 60\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule an hour of HOST downtime starting at 2019-04-23T02:00:00+00:00\n  community.general.nagios:\n    action: downtime\n    start: 1555984800\n    minutes: 60\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule an hour of HOST downtime, with a comment describing the reason\n  community.general.nagios:\n    action: downtime\n    minutes: 60\n    service: host\n    host: '{{ inventory_hostname }}'\n    comment: Rebuilding machine\n\n- name: Schedule downtime for ALL services on HOST\n  community.general.nagios:\n    action: downtime\n    minutes: 45\n    service: all\n    host: '{{ inventory_hostname }}'\n\n- name: Schedule downtime for a few services\n  community.general.nagios:\n    action: downtime\n    services: frob,foobar,qeuz\n    host: '{{ inventory_hostname }}'\n\n- name: Set 30 minutes downtime for all services in servicegroup foo\n  community.general.nagios:\n    action: servicegroup_service_downtime\n    minutes: 30\n    servicegroup: foo\n    host: '{{ inventory_hostname }}'\n\n- name: Set 30 minutes downtime for all host in servicegroup foo\n  community.general.nagios:\n    action: servicegroup_host_downtime\n    minutes: 30\n    servicegroup: foo\n    host: '{{ inventory_hostname }}'\n\n- name: Delete all downtime for a given host\n  community.general.nagios:\n    action: delete_downtime\n    host: '{{ inventory_hostname }}'\n    service: all\n\n- name: Delete all downtime for HOST with a particular comment\n  community.general.nagios:\n    action: delete_downtime\n    host: '{{ inventory_hostname }}'\n    service: host\n    comment: Planned maintenance\n\n- name: Acknowledge an HOST with a particular comment\n  community.general.nagios:\n    action: acknowledge\n    service: host\n    host: '{{ inventory_hostname }}'\n    comment: 'power outage - see casenr 12345'\n\n- name: Acknowledge an active service problem for the httpd service with a particular comment\n  community.general.nagios:\n    action: acknowledge\n    service: httpd\n    host: '{{ inventory_hostname }}'\n    comment: 'service crashed - see casenr 12345'\n\n- name: Reset a passive service check for snmp trap\n  community.general.nagios:\n    action: forced_check\n    service: snmp\n    host: '{{ inventory_hostname }}'\n\n- name: Force an active service check for the httpd service\n  community.general.nagios:\n    action: forced_check\n    service: httpd\n    host: '{{ inventory_hostname }}'\n\n- name: Force an active service check for all services of a particular host\n  community.general.nagios:\n    action: forced_check\n    service: all\n    host: '{{ inventory_hostname }}'\n\n- name: Force an active service check for a particular host\n  community.general.nagios:\n    action: forced_check\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Enable SMART disk alerts\n  community.general.nagios:\n    action: enable_alerts\n    service: smart\n    host: '{{ inventory_hostname }}'\n\n- name: Disable httpd and nfs alerts\n  community.general.nagios:\n    action: disable_alerts\n    service: httpd,nfs\n    host: '{{ inventory_hostname }}'\n\n- name: Disable HOST alerts\n  community.general.nagios:\n    action: disable_alerts\n    service: host\n    host: '{{ inventory_hostname }}'\n\n- name: Silence ALL alerts\n  community.general.nagios:\n    action: silence\n    host: '{{ inventory_hostname }}'\n\n- name: Unsilence all alerts\n  community.general.nagios:\n    action: unsilence\n    host: '{{ inventory_hostname }}'\n\n- name: Shut up nagios\n  community.general.nagios:\n    action: silence_nagios\n\n- name: Annoy me negios\n  community.general.nagios:\n    action: unsilence_nagios\n\n- name: Command something\n  community.general.nagios:\n    action: command\n    command: DISABLE_FAILURE_PREDICTION\n",
        "metadata": null,
        "return": null
    }
}
