{
    "ansible.windows.win_shell": {
        "doc": {
            "author": [
                "Matt Davis (@nitzmahone)"
            ],
            "collection": "ansible.windows",
            "description": [
                "The M(ansible.windows.win_shell) module takes the command name followed by a list of space-delimited arguments. It is similar to the M(ansible.windows.win_command) module, but runs the command via a shell (defaults to PowerShell) on the target host.",
                "For non-Windows targets, use the M(ansible.builtin.shell) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ansible/windows/plugins/modules/win_shell.py",
            "has_action": false,
            "module": "win_shell",
            "notes": [
                "If you want to run an executable securely and predictably, it may be better to use the M(ansible.windows.win_command) module instead. Best practices when writing playbooks will follow the trend of using M(ansible.windows.win_command) unless C(win_shell) is explicitly required. When running ad-hoc commands, use your best judgement.",
                "WinRM will not return from a command execution until all child processes created have exited. Thus, it is not possible to use M(ansible.windows.win_shell) to spawn long-running child or background processes. Consider creating a Windows service for managing background processes. - Consider using M(ansible.windows.win_powershell) if you want to capture the output from the PowerShell script as structured objects."
            ],
            "options": {
                "chdir": {
                    "description": [
                        "Set the specified path as the current working directory before executing a command"
                    ],
                    "type": "path"
                },
                "creates": {
                    "description": [
                        "A path or path filter pattern; when the referenced path exists on the target host, the task will be skipped."
                    ],
                    "type": "path"
                },
                "executable": {
                    "description": [
                        "Change the shell used to execute the command (eg, C(cmd)).",
                        "The target shell must accept a C(/c) parameter followed by the raw command line to be executed."
                    ],
                    "type": "path"
                },
                "free_form": {
                    "description": [
                        "The M(ansible.windows.win_shell) module takes a free form command to run.",
                        "There is no parameter actually named 'free form'. See the examples!"
                    ],
                    "required": true,
                    "type": "str"
                },
                "no_profile": {
                    "default": false,
                    "description": [
                        "Do not load the user profile before running a command. This is only valid when using PowerShell as the executable."
                    ],
                    "type": "bool"
                },
                "output_encoding_override": {
                    "description": [
                        "This option overrides the encoding of stdout/stderr output.",
                        "You can use this option when you need to run a command which ignore the console's codepage.",
                        "You should only need to use this option in very rare circumstances.",
                        "This value can be any valid encoding C(Name) based on the output of C([System.Text.Encoding]::GetEncodings()). See U(https://docs.microsoft.com/dotnet/api/system.text.encoding.getencodings)."
                    ],
                    "type": "str"
                },
                "removes": {
                    "description": [
                        "A path or path filter pattern; when the referenced path B(does not) exist on the target host, the task will be skipped."
                    ],
                    "type": "path"
                },
                "stdin": {
                    "description": [
                        "Set the stdin of the command directly to the specified value."
                    ],
                    "type": "str"
                }
            },
            "seealso": [
                {
                    "module": "community.windows.psexec"
                },
                {
                    "module": "ansible.builtin.raw"
                },
                {
                    "module": "ansible.builtin.script"
                },
                {
                    "module": "ansible.builtin.shell"
                },
                {
                    "module": "ansible.windows.win_command"
                },
                {
                    "module": "ansible.windows.win_powershell"
                },
                {
                    "module": "community.windows.win_psexec"
                }
            ],
            "short_description": "Execute shell commands on target hosts"
        },
        "examples": "\n- name: Execute a command in the remote shell, stdout goes to the specified file on the remote\n  ansible.windows.win_shell: C:\\somescript.ps1 >> C:\\somelog.txt\n\n- name: Change the working directory to somedir/ before executing the command\n  ansible.windows.win_shell: C:\\somescript.ps1 >> C:\\somelog.txt\n  args:\n    chdir: C:\\somedir\n\n- name: Run a command with an idempotent check on what it creates, will only run when somedir/somelog.txt does not exist\n  ansible.windows.win_shell: C:\\somescript.ps1 >> C:\\somelog.txt\n  args:\n    chdir: C:\\somedir\n    creates: C:\\somelog.txt\n\n- name: Run a command under a non-Powershell interpreter (cmd in this case)\n  ansible.windows.win_shell: echo %HOMEDIR%\n  args:\n    executable: cmd\n  register: homedir_out\n\n- name: Run multi-lined shell commands\n  ansible.windows.win_shell: |\n    $value = Test-Path -Path C:\\temp\n    if ($value) {\n        Remove-Item -Path C:\\temp -Force\n    }\n    New-Item -Path C:\\temp -ItemType Directory\n\n- name: Retrieve the input based on stdin\n  ansible.windows.win_shell: '$string = [Console]::In.ReadToEnd(); Write-Output $string.Trim()'\n  args:\n    stdin: Input message\n",
        "metadata": null,
        "return": {
            "cmd": {
                "description": "The command executed by the task.",
                "returned": "always",
                "sample": "rabbitmqctl join_cluster rabbit@main",
                "type": "str"
            },
            "delta": {
                "description": "The command execution delta time.",
                "returned": "always",
                "sample": "0:00:00.325771",
                "type": "str"
            },
            "end": {
                "description": "The command execution end time.",
                "returned": "always",
                "sample": "2016-02-25 09:18:26.755339",
                "type": "str"
            },
            "msg": {
                "description": "Changed.",
                "returned": "always",
                "sample": true,
                "type": "bool"
            },
            "rc": {
                "description": "The command return code (0 means success).",
                "returned": "always",
                "sample": 0,
                "type": "int"
            },
            "start": {
                "description": "The command execution start time.",
                "returned": "always",
                "sample": "2016-02-25 09:18:26.429568",
                "type": "str"
            },
            "stderr": {
                "description": "The command standard error.",
                "returned": "always",
                "sample": "ls: cannot access foo: No such file or directory",
                "type": "str"
            },
            "stdout": {
                "description": "The command standard output.",
                "returned": "always",
                "sample": "Clustering node rabbit@slave1 with rabbit@main ...",
                "type": "str"
            },
            "stdout_lines": {
                "description": "The command standard output split in lines.",
                "returned": "always",
                "sample": [
                    "u'Clustering node rabbit@slave1 with rabbit@main ...'"
                ],
                "type": "list"
            }
        }
    }
}
