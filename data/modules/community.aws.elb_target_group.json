{
    "community.aws.elb_target_group": {
        "doc": {
            "author": "Rob White (@wimnat)",
            "collection": "community.aws",
            "description": [
                "Manage an AWS Elastic Load Balancer target group. See U(https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html) or U(https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html) for details."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/elb_target_group.py",
            "has_action": false,
            "module": "elb_target_group",
            "notes": [
                "Once a target group has been created, only its health check can then be modified using subsequent calls",
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "deregistration_delay_timeout": {
                    "description": [
                        "The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds."
                    ],
                    "type": "int"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "health_check_interval": {
                    "description": [
                        "The approximate amount of time, in seconds, between health checks of an individual target."
                    ],
                    "required": false,
                    "type": "int"
                },
                "health_check_path": {
                    "description": [
                        "The ping path that is the destination on the targets for health checks. The path must be defined in order to set a health check.",
                        "Requires the I(health_check_protocol) parameter to be set."
                    ],
                    "required": false,
                    "type": "str"
                },
                "health_check_port": {
                    "description": [
                        "The port the load balancer uses when performing health checks on targets. Can be set to 'traffic-port' to match target port.",
                        "When not defined will default to the port on which each target receives traffic from the load balancer."
                    ],
                    "required": false,
                    "type": "str"
                },
                "health_check_protocol": {
                    "choices": [
                        "http",
                        "https",
                        "tcp",
                        "tls",
                        "udp",
                        "tcp_udp",
                        "HTTP",
                        "HTTPS",
                        "TCP",
                        "TLS",
                        "UDP",
                        "TCP_UDP"
                    ],
                    "description": [
                        "The protocol the load balancer uses when performing health checks on targets."
                    ],
                    "required": false,
                    "type": "str"
                },
                "health_check_timeout": {
                    "description": [
                        "The amount of time, in seconds, during which no response from a target means a failed health check."
                    ],
                    "required": false,
                    "type": "int"
                },
                "healthy_threshold_count": {
                    "description": [
                        "The number of consecutive health checks successes required before considering an unhealthy target healthy."
                    ],
                    "required": false,
                    "type": "int"
                },
                "modify_targets": {
                    "default": true,
                    "description": [
                        "Whether or not to alter existing targets in the group to match what is passed with the module"
                    ],
                    "required": false,
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "The name of the target group."
                    ],
                    "required": true,
                    "type": "str"
                },
                "port": {
                    "description": [
                        "The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. Required if I(state) is C(present)."
                    ],
                    "required": false,
                    "type": "int"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "protocol": {
                    "choices": [
                        "http",
                        "https",
                        "tcp",
                        "tls",
                        "udp",
                        "tcp_udp",
                        "HTTP",
                        "HTTPS",
                        "TCP",
                        "TLS",
                        "UDP",
                        "TCP_UDP"
                    ],
                    "description": [
                        "The protocol to use for routing traffic to the targets. Required when I(state) is C(present)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "purge_tags": {
                    "default": true,
                    "description": [
                        "If yes, existing tags will be purged from the resource to match exactly what is defined by I(tags) parameter. If the tag parameter is not set then tags will not be modified."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": [
                        "Create or destroy the target group."
                    ],
                    "required": true,
                    "type": "str"
                },
                "stickiness_app_cookie_duration": {
                    "description": [
                        "The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the application-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds)."
                    ],
                    "type": "int",
                    "version_added": "1.5.0",
                    "version_added_collection": "community.aws"
                },
                "stickiness_app_cookie_name": {
                    "description": [
                        "The name of the application cookie. Required if I(stickiness_type=app_cookie)."
                    ],
                    "type": "str",
                    "version_added": "1.5.0",
                    "version_added_collection": "community.aws"
                },
                "stickiness_enabled": {
                    "description": [
                        "Indicates whether sticky sessions are enabled."
                    ],
                    "type": "bool"
                },
                "stickiness_lb_cookie_duration": {
                    "description": [
                        "The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds)."
                    ],
                    "type": "int"
                },
                "stickiness_type": {
                    "description": [
                        "The type of sticky sessions.",
                        "Valid values are C(lb_cookie), C(app_cookie) or C(source_ip).",
                        "If not set AWS will default to C(lb_cookie) for Application Load Balancers or C(source_ip) for Network Load Balancers."
                    ],
                    "type": "str"
                },
                "successful_response_codes": {
                    "description": [
                        "The HTTP codes to use when checking for a successful response from a target.",
                        "Accepts multiple values (for example, \"200,202\") or a range of values (for example, \"200-299\").",
                        "Requires the I(health_check_protocol) parameter to be set."
                    ],
                    "required": false,
                    "type": "str"
                },
                "tags": {
                    "description": [
                        "A dictionary of one or more tags to assign to the target group."
                    ],
                    "required": false,
                    "type": "dict"
                },
                "target_type": {
                    "choices": [
                        "instance",
                        "ip",
                        "lambda"
                    ],
                    "description": [
                        "The type of target that you must specify when registering targets with this target group. The possible values are C(instance) (targets are specified by instance ID), C(ip) (targets are specified by IP address) or C(lambda) (target is specified by ARN). Note that you can't specify targets for a target group using more than one type. Target type lambda only accept one target. When more than one target is specified, only the first one is used. All additional targets are ignored. If the target type is ip, specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.",
                        "The default behavior is C(instance)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "targets": {
                    "description": [
                        "A list of targets to assign to the target group. This parameter defaults to an empty list. Unless you set the 'modify_targets' parameter then all existing targets will be removed from the group. The list should be an Id and a Port parameter. See the Examples for detail."
                    ],
                    "elements": "dict",
                    "required": false,
                    "type": "list"
                },
                "unhealthy_threshold_count": {
                    "description": [
                        "The number of consecutive health check failures required before considering a target unhealthy."
                    ],
                    "required": false,
                    "type": "int"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "vpc_id": {
                    "description": [
                        "The identifier of the virtual private cloud (VPC). Required when I(state) is C(present)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "wait": {
                    "default": false,
                    "description": [
                        "Whether or not to wait for the target group."
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 200,
                    "description": [
                        "The time to wait for the target group."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Manage a target group for an Application or Network load balancer",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n- name: Create a target group with a default health check\n  community.aws.elb_target_group:\n    name: mytargetgroup\n    protocol: http\n    port: 80\n    vpc_id: vpc-01234567\n    state: present\n\n- name: Modify the target group with a custom health check\n  community.aws.elb_target_group:\n    name: mytargetgroup\n    protocol: http\n    port: 80\n    vpc_id: vpc-01234567\n    health_check_protocol: http\n    health_check_path: /health_check\n    health_check_port: 80\n    successful_response_codes: 200\n    health_check_interval: 15\n    health_check_timeout: 3\n    healthy_threshold_count: 4\n    unhealthy_threshold_count: 3\n    state: present\n\n- name: Delete a target group\n  community.aws.elb_target_group:\n    name: mytargetgroup\n    state: absent\n\n- name: Create a target group with instance targets\n  community.aws.elb_target_group:\n    name: mytargetgroup\n    protocol: http\n    port: 81\n    vpc_id: vpc-01234567\n    health_check_protocol: http\n    health_check_path: /\n    successful_response_codes: \"200,250-260\"\n    targets:\n      - Id: i-01234567\n        Port: 80\n      - Id: i-98765432\n        Port: 80\n    state: present\n    wait_timeout: 200\n    wait: True\n\n- name: Create a target group with IP address targets\n  community.aws.elb_target_group:\n    name: mytargetgroup\n    protocol: http\n    port: 81\n    vpc_id: vpc-01234567\n    health_check_protocol: http\n    health_check_path: /\n    successful_response_codes: \"200,250-260\"\n    target_type: ip\n    targets:\n      - Id: 10.0.0.10\n        Port: 80\n        AvailabilityZone: all\n      - Id: 10.0.0.20\n        Port: 80\n    state: present\n    wait_timeout: 200\n    wait: True\n\n# Using lambda as targets require that the target group\n# itself is allow to invoke the lambda function.\n# therefore you need first to create an empty target group\n# to receive its arn, second, allow the target group\n# to invoke the lambda function and third, add the target\n# to the target group\n- name: first, create empty target group\n  community.aws.elb_target_group:\n    name: my-lambda-targetgroup\n    target_type: lambda\n    state: present\n    modify_targets: False\n  register: out\n\n- name: second, allow invoke of the lambda\n  community.aws.lambda_policy:\n    state: \"{{ state | default('present') }}\"\n    function_name: my-lambda-function\n    statement_id: someID\n    action: lambda:InvokeFunction\n    principal: elasticloadbalancing.amazonaws.com\n    source_arn: \"{{ out.target_group_arn }}\"\n\n- name: third, add target\n  community.aws.elb_target_group:\n    name: my-lambda-targetgroup\n    target_type: lambda\n    state: present\n    targets:\n        - Id: arn:aws:lambda:eu-central-1:123456789012:function:my-lambda-function\n\n",
        "metadata": null,
        "return": {
            "deregistration_delay_timeout_seconds": {
                "description": "The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused.",
                "returned": "when state present",
                "sample": 300,
                "type": "int"
            },
            "health_check_interval_seconds": {
                "description": "The approximate amount of time, in seconds, between health checks of an individual target.",
                "returned": "when state present",
                "sample": 30,
                "type": "int"
            },
            "health_check_path": {
                "description": "The destination for the health check request.",
                "returned": "when state present",
                "sample": "/index.html",
                "type": "str"
            },
            "health_check_port": {
                "description": "The port to use to connect with the target.",
                "returned": "when state present",
                "sample": "traffic-port",
                "type": "str"
            },
            "health_check_protocol": {
                "description": "The protocol to use to connect with the target.",
                "returned": "when state present",
                "sample": "HTTP",
                "type": "str"
            },
            "health_check_timeout_seconds": {
                "description": "The amount of time, in seconds, during which no response means a failed health check.",
                "returned": "when state present",
                "sample": 5,
                "type": "int"
            },
            "healthy_threshold_count": {
                "description": "The number of consecutive health checks successes required before considering an unhealthy target healthy.",
                "returned": "when state present",
                "sample": 5,
                "type": "int"
            },
            "load_balancer_arns": {
                "description": "The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.",
                "returned": "when state present",
                "sample": [],
                "type": "list"
            },
            "matcher": {
                "description": "The HTTP codes to use when checking for a successful response from a target.",
                "returned": "when state present",
                "sample": {
                    "http_code": "200"
                },
                "type": "dict"
            },
            "port": {
                "description": "The port on which the targets are listening.",
                "returned": "when state present",
                "sample": 80,
                "type": "int"
            },
            "protocol": {
                "description": "The protocol to use for routing traffic to the targets.",
                "returned": "when state present",
                "sample": "HTTP",
                "type": "str"
            },
            "stickiness_enabled": {
                "description": "Indicates whether sticky sessions are enabled.",
                "returned": "when state present",
                "sample": true,
                "type": "bool"
            },
            "stickiness_lb_cookie_duration_seconds": {
                "description": "The time period, in seconds, during which requests from a client should be routed to the same target.",
                "returned": "when state present",
                "sample": 86400,
                "type": "int"
            },
            "stickiness_type": {
                "description": "The type of sticky sessions.",
                "returned": "when state present",
                "sample": "lb_cookie",
                "type": "str"
            },
            "tags": {
                "description": "The tags attached to the target group.",
                "returned": "when state present",
                "sample": "{ 'Tag': 'Example' }",
                "type": "dict"
            },
            "target_group_arn": {
                "description": "The Amazon Resource Name (ARN) of the target group.",
                "returned": "when state present",
                "sample": "arn:aws:elasticloadbalancing:ap-southeast-2:01234567890:targetgroup/mytargetgroup/aabbccddee0044332211",
                "type": "str"
            },
            "target_group_name": {
                "description": "The name of the target group.",
                "returned": "when state present",
                "sample": "mytargetgroup",
                "type": "str"
            },
            "unhealthy_threshold_count": {
                "description": "The number of consecutive health check failures required before considering the target unhealthy.",
                "returned": "when state present",
                "sample": 2,
                "type": "int"
            },
            "vpc_id": {
                "description": "The ID of the VPC for the targets.",
                "returned": "when state present",
                "sample": "vpc-0123456",
                "type": "str"
            }
        }
    }
}
