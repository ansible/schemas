{
    "community.aws.cloudwatchlogs_log_group_metric_filter": {
        "doc": {
            "author": [
                "Markus Bergholz (@markuman)"
            ],
            "collection": "community.aws",
            "description": [
                "Create, modify and delete CloudWatch log group metric filter.",
                "CloudWatch log group metric filter can be use with M(community.aws.ec2_metric_alarm)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/cloudwatchlogs_log_group_metric_filter.py",
            "has_action": false,
            "module": "cloudwatchlogs_log_group_metric_filter",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "filter_name": {
                    "description": [
                        "A name for the metric filter you create."
                    ],
                    "required": true,
                    "type": "str"
                },
                "filter_pattern": {
                    "description": [
                        "A filter pattern for extracting metric data out of ingested log events. Required when I(state=present)."
                    ],
                    "type": "str"
                },
                "log_group_name": {
                    "description": [
                        "The name of the log group where the metric filter is applied on."
                    ],
                    "required": true,
                    "type": "str"
                },
                "metric_transformation": {
                    "description": [
                        "A collection of information that defines how metric data gets emitted. Required when I(state=present)."
                    ],
                    "suboptions": {
                        "default_value": {
                            "description": [
                                "The value to emit when a filter pattern does not match a log event."
                            ],
                            "type": "float"
                        },
                        "metric_name": {
                            "description": [
                                "The name of the cloudWatch metric."
                            ],
                            "type": "str"
                        },
                        "metric_namespace": {
                            "description": [
                                "The namespace of the cloudWatch metric."
                            ],
                            "type": "str"
                        },
                        "metric_value": {
                            "description": [
                                "The value to publish to the cloudWatch metric when a filter pattern matches a log event."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": [
                        "Whether the rule is present or absent."
                    ],
                    "required": true,
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "python >= 2.6"
            ],
            "short_description": "Manage CloudWatch log group metric filter",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n- name: set metric filter on log group /fluentd/testcase\n  community.aws.cloudwatchlogs_log_group_metric_filter:\n    log_group_name: /fluentd/testcase\n    filter_name: BoxFreeStorage\n    filter_pattern: '{($.value = *) && ($.hostname = \"box\")}'\n    state: present\n    metric_transformation:\n        metric_name: box_free_space\n        metric_namespace: fluentd_metrics\n        metric_value: \"$.value\"\n\n- name: delete metric filter on log group /fluentd/testcase\n  community.aws.cloudwatchlogs_log_group_metric_filter:\n    log_group_name: /fluentd/testcase\n    filter_name: BoxFreeStorage\n    state: absent\n",
        "metadata": null,
        "return": {
            "metric_filters": {
                "description": "Return the origin response value",
                "returned": "success",
                "sample": [
                    {
                        "default_value": 3.1415,
                        "metric_name": "box_free_space",
                        "metric_namespace": "made_with_ansible",
                        "metric_value": "$.value"
                    }
                ],
                "type": "list"
            }
        }
    }
}
