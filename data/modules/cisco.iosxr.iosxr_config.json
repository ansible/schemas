{
    "cisco.iosxr.iosxr_config": {
        "doc": {
            "author": "Ricardo Carrillo Cruz (@rcarrillocruz)",
            "collection": "cisco.iosxr",
            "description": [
                "Cisco IOS XR configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with IOS XR configuration sections in a deterministic way."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/iosxr/plugins/modules/iosxr_config.py",
            "has_action": true,
            "module": "iosxr_config",
            "notes": [
                "This module works with connection C(network_cli). See L(the IOS-XR Platform Options,../network/user_guide/platform_iosxr.html).",
                "Tested against IOS XRv 6.1.3.",
                "This module does not support C(netconf) connection",
                "Abbreviated commands are NOT idempotent, see L(Network FAQ,../network/user_guide/faq.html",
                "Avoid service disrupting changes (viz. Management IP) from config replace.",
                "Do not use C(end) in the replace config file.",
                "To ensure idempotency and correct diff the configuration lines in the relevant module options should be similar to how they appear if present in the running configuration on device including the indentation.",
                "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
                "For more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_."
            ],
            "options": {
                "admin": {
                    "default": false,
                    "description": [
                        "Enters into administration configuration mode for making config changes to the device."
                    ],
                    "type": "bool"
                },
                "after": {
                    "description": [
                        "The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with I(before) this allows the playbook designer to append a set of commands to be executed after the command set."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "backup": {
                    "default": false,
                    "description": [
                        "This argument will cause the module to create a full backup of the current C(running-config) from the remote device before any changes are made. If the C(backup_options) value is not given, the backup file is written to the C(backup) folder in the playbook root directory or role root directory, if playbook is part of an ansible role. If the directory does not exist, it is created."
                    ],
                    "type": "bool"
                },
                "backup_options": {
                    "description": [
                        "This is a dict object containing configurable options related to backup file path. The value of this option is read only when C(backup) is set to I(yes), if C(backup) is set to I(no) this option will be silently ignored."
                    ],
                    "suboptions": {
                        "dir_path": {
                            "description": [
                                "This option provides the path ending with directory name in which the backup configuration file will be stored. If the directory does not exist it will be first created and the filename is either the value of C(filename) or default filename as described in C(filename) options description. If the path value is not given in that case a I(backup) directory will be created in the current working directory and backup configuration will be copied in C(filename) within I(backup) directory."
                            ],
                            "type": "path"
                        },
                        "filename": {
                            "description": [
                                "The filename to be used to store the backup configuration. If the filename is not given it will be generated based on the hostname, current time and date in format defined by <hostname>_config.<current-date>@<current-time>"
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "before": {
                    "description": [
                        "The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched against the system."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "comment": {
                    "default": "configured by iosxr_config",
                    "description": [
                        "Allows a commit description to be specified to be included when the configuration is committed.  If the configuration is not changed or committed, this argument is ignored."
                    ],
                    "type": "str"
                },
                "config": {
                    "description": [
                        "The module, by default, will connect to the remote device and retrieve the current running-config to use as a base for comparing against the contents of source.  There are times when it is not desirable to have the task get the current running-config for every task in a playbook.  The I(config) argument allows the implementer to pass in the configuration to use as the base config for comparison. The configuration lines for this option should be similar to how it will appear if present in the running-configuration of the device to ensure idempotency and correct diff."
                    ],
                    "type": "str"
                },
                "exclusive": {
                    "default": false,
                    "description": [
                        "Enters into exclusive configuration mode that locks out all users from committing configuration changes until the exclusive session ends."
                    ],
                    "type": "bool"
                },
                "force": {
                    "default": false,
                    "description": [
                        "The force argument instructs the module to not consider the current devices running-config.  When set to true, this will cause the module to push the contents of I(src) into the device without first checking if already configured.",
                        "Note this argument should be considered deprecated.  To achieve the equivalent, set the C(match=none) which is idempotent.  This argument will be removed in a future release."
                    ],
                    "type": "bool"
                },
                "label": {
                    "description": [
                        "Allows a commit label to be specified to be included when the configuration is committed. A valid label must begin with an alphabet and not exceed 30 characters, only alphabets, digits, hyphens and underscores are allowed. If the configuration is not changed or committed, this argument is ignored."
                    ],
                    "type": "str"
                },
                "lines": {
                    "aliases": [
                        "commands"
                    ],
                    "description": [
                        "The ordered set of commands that should be configured in the section. The commands must be the exact same commands as found in the device running-config as found in the device running-config to ensure idempotency and correct diff. Be sure to note the configuration command syntax as some commands are automatically modified by the device config parser."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "match": {
                    "choices": [
                        "line",
                        "strict",
                        "exact",
                        "none"
                    ],
                    "default": "line",
                    "description": [
                        "Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is set to I(line), commands are matched line by line.  If match is set to I(strict), command lines are matched with respect to position.  If match is set to I(exact), command lines must be an equal match.  Finally, if match is set to I(none), the module will not attempt to compare the source configuration with the running configuration on the remote device."
                    ],
                    "type": "str"
                },
                "parents": {
                    "description": [
                        "The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the parents argument is omitted, the commands are checked against the set of top level or global commands."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "provider": {
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli).",
                        "For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-protocols).",
                        "HORIZONTALLINE",
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "host": {
                            "description": [
                                "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport."
                            ],
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead."
                            ],
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Specifies the port to use when building the connection to the remote device."
                            ],
                            "type": "int"
                        },
                        "ssh_keyfile": {
                            "description": [
                                "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead."
                            ],
                            "type": "path"
                        },
                        "timeout": {
                            "description": [
                                "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error."
                            ],
                            "type": "int"
                        },
                        "transport": {
                            "choices": [
                                "cli",
                                "netconf"
                            ],
                            "default": "cli",
                            "description": [
                                "Specifies the type of connection based transport."
                            ],
                            "type": "str"
                        },
                        "username": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "replace": {
                    "choices": [
                        "line",
                        "block",
                        "config"
                    ],
                    "default": "line",
                    "description": [
                        "Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to I(line) then the modified lines are pushed to the device in configuration mode.  If the replace argument is set to I(block) then the entire command block is pushed to the device in configuration mode if any line is not correct."
                    ],
                    "type": "str"
                },
                "src": {
                    "description": [
                        "Specifies the source path to the file that contains the configuration or configuration template to load. The path to the source file can either be the full path on the Ansible control host or a relative path from the playbook or role root directory.  This argument is mutually exclusive with I(lines), I(parents). The configuration lines in the source file should be similar to how it will appear if present in the running-configuration of the device to ensure idempotency and correct diff."
                    ],
                    "type": "path"
                }
            },
            "short_description": "Manage Cisco IOS XR configuration sections",
            "version_added": "1.0.0",
            "version_added_collection": "cisco.iosxr"
        },
        "examples": "\n- name: configure top level configuration\n  cisco.iosxr.iosxr_config:\n    lines: hostname {{ inventory_hostname }}\n\n- name: configure interface settings\n  cisco.iosxr.iosxr_config:\n    lines:\n    - description test interface\n    - ip address 172.31.1.1 255.255.255.0\n    parents: interface GigabitEthernet0/0/0/0\n\n- name: load a config from disk and replace the current config\n  cisco.iosxr.iosxr_config:\n    src: config.cfg\n    replace: config\n    backup: yes\n\n- name: for idempotency, use full-form commands\n  cisco.iosxr.iosxr_config:\n    lines:\n      # - shut\n    - shutdown\n    # parents: int g0/0/0/1\n    parents: interface GigabitEthernet0/0/0/1\n\n- name: configurable backup path\n  cisco.iosxr.iosxr_config:\n    src: config.cfg\n    backup: yes\n    backup_options:\n      filename: backup.cfg\n      dir_path: /home/user\n",
        "metadata": null,
        "return": {
            "backup_path": {
                "description": "The full path to the backup file",
                "returned": "when backup is yes",
                "sample": "/playbooks/ansible/backup/iosxr01_config.2016-07-16@22:28:34",
                "type": "str"
            },
            "commands": {
                "description": "The set of commands that will be pushed to the remote device",
                "returned": "If there are commands to run against the host",
                "sample": [
                    "hostname foo",
                    "router ospf 1",
                    "router-id 1.1.1.1"
                ],
                "type": "list"
            },
            "date": {
                "description": "The date extracted from the backup file name",
                "returned": "when backup is yes",
                "sample": "2016-07-16",
                "type": "str"
            },
            "filename": {
                "description": "The name of the backup file",
                "returned": "when backup is yes and filename is not specified in backup options",
                "sample": "iosxr01_config.2016-07-16@22:28:34",
                "type": "str"
            },
            "shortname": {
                "description": "The full path to the backup file excluding the timestamp",
                "returned": "when backup is yes and filename is not specified in backup options",
                "sample": "/playbooks/ansible/backup/iosxr01_config",
                "type": "str"
            },
            "time": {
                "description": "The time extracted from the backup file name",
                "returned": "when backup is yes",
                "sample": "22:28:34",
                "type": "str"
            }
        }
    }
}
