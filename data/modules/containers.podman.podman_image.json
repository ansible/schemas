{
    "containers.podman.podman_image": {
        "doc": {
            "author": [
                "Sam Doran (@samdoran)"
            ],
            "collection": "containers.podman",
            "description": [
                "Build, pull, or push images using Podman."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/containers/podman/plugins/modules/podman_image.py",
            "has_action": false,
            "module": "podman_image",
            "notes": [],
            "options": {
                "auth_file": {
                    "aliases": [
                        "authfile"
                    ],
                    "description": [
                        "Path to file containing authorization credentials to the remote registry."
                    ],
                    "type": "path"
                },
                "build": {
                    "aliases": [
                        "build_args",
                        "buildargs"
                    ],
                    "description": "Arguments that control image build.",
                    "suboptions": {
                        "annotation": {
                            "description": [
                                "Dictionary of key=value pairs to add to the image. Only works with OCI images. Ignored for Docker containers."
                            ],
                            "type": "dict"
                        },
                        "cache": {
                            "default": true,
                            "description": [
                                "Whether or not to use cached layers when building an image"
                            ],
                            "type": "bool"
                        },
                        "extra_args": {
                            "description": [
                                "Extra args to pass to build, if executed. Does not idempotently check for new build args."
                            ],
                            "type": "str"
                        },
                        "force_rm": {
                            "default": false,
                            "description": [
                                "Always remove intermediate containers after a build, even if the build is unsuccessful."
                            ],
                            "type": "bool"
                        },
                        "format": {
                            "choices": [
                                "docker",
                                "oci"
                            ],
                            "default": "oci",
                            "description": [
                                "Format of the built image."
                            ],
                            "type": "str"
                        },
                        "rm": {
                            "default": true,
                            "description": "Remove intermediate containers after a successful build",
                            "type": "bool"
                        },
                        "volume": {
                            "description": [
                                "Specify multiple volume / mount options to mount one or more mounts to a container."
                            ],
                            "elements": "str",
                            "type": "list"
                        }
                    },
                    "type": "dict"
                },
                "ca_cert_dir": {
                    "description": [
                        "Path to directory containing TLS certificates and keys to use."
                    ],
                    "type": "path"
                },
                "executable": {
                    "default": "podman",
                    "description": [
                        "Path to C(podman) executable if it is not in the C($PATH) on the machine running C(podman)."
                    ],
                    "type": "str"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Whether or not to force push or pull an image.",
                        "When building, force the build even if the image already exists."
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "Name of the image to pull, push, or delete. It may contain a tag using the format C(image:tag)."
                    ],
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Password to use when authenticating to remote registries."
                    ],
                    "type": "str"
                },
                "path": {
                    "description": "Path to directory containing the build file.",
                    "type": "str"
                },
                "pull": {
                    "default": true,
                    "description": "Whether or not to pull the image.",
                    "type": "bool"
                },
                "push": {
                    "default": false,
                    "description": "Whether or not to push an image.",
                    "type": "bool"
                },
                "push_args": {
                    "description": "Arguments that control pushing images.",
                    "suboptions": {
                        "compress": {
                            "description": [
                                "Compress tarball image layers when pushing to a directory using the 'dir' transport."
                            ],
                            "type": "bool"
                        },
                        "dest": {
                            "aliases": [
                                "destination"
                            ],
                            "description": "Path or URL where image will be pushed.",
                            "type": "str"
                        },
                        "format": {
                            "choices": [
                                "oci",
                                "v2s1",
                                "v2s2"
                            ],
                            "description": [
                                "Manifest type to use when pushing an image using the 'dir' transport (default is manifest type of source)."
                            ],
                            "type": "str"
                        },
                        "remove_signatures": {
                            "description": "Discard any pre-existing signatures in the image",
                            "type": "bool"
                        },
                        "sign_by": {
                            "description": [
                                "Path to a key file to use to sign the image."
                            ],
                            "type": "str"
                        },
                        "transport": {
                            "choices": [
                                "dir",
                                "docker-archive",
                                "docker-daemon",
                                "oci-archive",
                                "ostree"
                            ],
                            "description": [
                                "Transport to use when pushing in image. If no transport is set, will attempt to push to a remote registry."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent",
                        "build"
                    ],
                    "default": "present",
                    "description": [
                        "Whether an image should be present, absent, or built."
                    ],
                    "type": "str"
                },
                "tag": {
                    "default": "latest",
                    "description": [
                        "Tag of the image to pull, push, or delete."
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "username to use when authenticating to remote registries."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "tlsverify",
                        "tls_verify"
                    ],
                    "description": [
                        "Require HTTPS and validate certificates when pulling or pushing. Also used during build if a pull or push is necessary."
                    ],
                    "type": "bool"
                }
            },
            "short_description": "Pull images for use by podman"
        },
        "examples": "\n- name: Pull an image\n  containers.podman.podman_image:\n    name: quay.io/bitnami/wildfly\n\n- name: Remove an image\n  containers.podman.podman_image:\n    name: quay.io/bitnami/wildfly\n    state: absent\n\n- name: Pull a specific version of an image\n  containers.podman.podman_image:\n    name: redis\n    tag: 4\n\n- name: Build a basic OCI image\n  containers.podman.podman_image:\n    name: nginx\n    path: /path/to/build/dir\n\n- name: Build a basic OCI image with advanced parameters\n  containers.podman.podman_image:\n    name: nginx\n    path: /path/to/build/dir\n    build:\n      cache: no\n      force_rm: yes\n      format: oci\n      annotation:\n        app: nginx\n        function: proxy\n        info: Load balancer for my cool app\n\n- name: Build a Docker formatted image\n  containers.podman.podman_image:\n    name: nginx\n    path: /path/to/build/dir\n    build:\n      format: docker\n\n- name: Build and push an image using existing credentials\n  containers.podman.podman_image:\n    name: nginx\n    path: /path/to/build/dir\n    push: yes\n    push_args:\n      dest: quay.io/acme\n\n- name: Build and push an image using an auth file\n  containers.podman.podman_image:\n    name: nginx\n    push: yes\n    auth_file: /etc/containers/auth.json\n    push_args:\n      dest: quay.io/acme\n\n- name: Build and push an image using username and password\n  containers.podman.podman_image:\n    name: nginx\n    push: yes\n    username: bugs\n    password: \"{{ vault_registry_password }}\"\n    push_args:\n      dest: quay.io/acme\n\n- name: Build and push an image to multiple registries\n  containers.podman.podman_image:\n    name: \"{{ item }}\"\n    path: /path/to/build/dir\n    push: yes\n    auth_file: /etc/containers/auth.json\n    loop:\n    - quay.io/acme/nginx\n    - docker.io/acme/nginx\n\n- name: Build and push an image to multiple registries with separate parameters\n  containers.podman.podman_image:\n    name: \"{{ item.name }}\"\n    tag: \"{{ item.tag }}\"\n    path: /path/to/build/dir\n    push: yes\n    auth_file: /etc/containers/auth.json\n    push_args:\n      dest: \"{{ item.dest }}\"\n    loop:\n    - name: nginx\n      tag: 4\n      dest: docker.io/acme\n\n    - name: nginx\n      tag: 3\n      dest: docker.io/acme\n",
        "metadata": null,
        "return": {
            "image": {
                "description": [
                    "Image inspection results for the image that was pulled, pushed, or built."
                ],
                "returned": "success",
                "sample": [
                    {
                        "Annotations": {},
                        "Architecture": "amd64",
                        "Author": "",
                        "Comment": "from Bitnami with love",
                        "ContainerConfig": {
                            "Cmd": [
                                "/run.sh"
                            ],
                            "Entrypoint": [
                                "/app-entrypoint.sh"
                            ],
                            "Env": [
                                "PATH=/opt/bitnami/java/bin:/opt/bitnami/wildfly/bin:/opt/bitnami/nami/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                                "IMAGE_OS=debian-9",
                                "NAMI_VERSION=1.0.0-1",
                                "GPG_KEY_SERVERS_LIST=ha.pool.sks-keyservers.net",
                                "TINI_VERSION=v0.13.2",
                                "TINI_GPG_KEY=595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7",
                                "GOSU_VERSION=1.10",
                                "GOSU_GPG_KEY=B42F6819007F00F88E364FD4036A9C25BF357DD4",
                                "BITNAMI_IMAGE_VERSION=16.0.0-debian-9-r27",
                                "BITNAMI_PKG_CHMOD=-R g+rwX",
                                "BITNAMI_PKG_EXTRA_DIRS=/home/wildfly",
                                "HOME=/",
                                "BITNAMI_APP_NAME=wildfly",
                                "NAMI_PREFIX=/.nami",
                                "WILDFLY_HOME=/home/wildfly",
                                "WILDFLY_JAVA_HOME=",
                                "WILDFLY_JAVA_OPTS=",
                                "WILDFLY_MANAGEMENT_HTTP_PORT_NUMBER=9990",
                                "WILDFLY_PASSWORD=bitnami",
                                "WILDFLY_PUBLIC_CONSOLE=true",
                                "WILDFLY_SERVER_AJP_PORT_NUMBER=8009",
                                "WILDFLY_SERVER_HTTP_PORT_NUMBER=8080",
                                "WILDFLY_SERVER_INTERFACE=0.0.0.0",
                                "WILDFLY_USERNAME=user",
                                "WILDFLY_WILDFLY_HOME=/home/wildfly",
                                "WILDFLY_WILDFLY_OPTS=-Dwildfly.as.deployment.ondemand=false"
                            ],
                            "ExposedPorts": {
                                "8080/tcp": {},
                                "9990/tcp": {}
                            },
                            "Labels": {
                                "maintainer": "Bitnami <containers@bitnami.com>"
                            },
                            "User": "1001"
                        },
                        "Created": "2019-04-10T05:48:03.553887623Z",
                        "Digest": "sha256:5a8ab28e314c2222de3feaf6dac94a0436a37fc08979d2722c99d2bef2619a9b",
                        "GraphDriver": {
                            "Data": {
                                "LowerDir": "/var/lib/containers/storage/overlay/142c1beadf1bb09fbd929465ec98c9dca3256638220450efb4214727d0d0680e/diff:/var/lib/containers/s",
                                "MergedDir": "/var/lib/containers/storage/overlay/9aa10191f5bddb59e28508e721fdeb43505e5b395845fa99723ed787878dbfea/merged",
                                "UpperDir": "/var/lib/containers/storage/overlay/9aa10191f5bddb59e28508e721fdeb43505e5b395845fa99723ed787878dbfea/diff",
                                "WorkDir": "/var/lib/containers/storage/overlay/9aa10191f5bddb59e28508e721fdeb43505e5b395845fa99723ed787878dbfea/work"
                            },
                            "Name": "overlay"
                        },
                        "History": [
                            {
                                "comment": "from Bitnami with love",
                                "created": "2019-04-09T22:27:40.659377677Z"
                            },
                            {
                                "created": "2019-04-09T22:38:53.86336555Z",
                                "created_by": "/bin/sh -c #(nop)  LABEL maintainer=Bitnami <containers@bitnami.com>",
                                "empty_layer": true
                            },
                            {
                                "created": "2019-04-09T22:38:54.022778765Z",
                                "created_by": "/bin/sh -c #(nop)  ENV IMAGE_OS=debian-9",
                                "empty_layer": true
                            }
                        ],
                        "Id": "ace34da54e4af2145e1ad277005adb235a214e4dfe1114c2db9ab460b840f785",
                        "Labels": {
                            "maintainer": "Bitnami <containers@bitnami.com>"
                        },
                        "ManifestType": "application/vnd.docker.distribution.manifest.v1+prettyjws",
                        "Os": "linux",
                        "Parent": "",
                        "RepoDigests": [
                            "quay.io/bitnami/wildfly@sha256:5a8ab28e314c2222de3feaf6dac94a0436a37fc08979d2722c99d2bef2619a9b"
                        ],
                        "RepoTags": [
                            "quay.io/bitnami/wildfly:latest"
                        ],
                        "RootFS": {
                            "Layers": [
                                "",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "",
                                "",
                                ""
                            ],
                            "Type": "layers"
                        },
                        "Size": 466180019,
                        "User": "1001",
                        "Version": "18.09.3",
                        "VirtualSize": 466180019
                    }
                ],
                "type": "dict"
            }
        }
    }
}
