{
    "setup": {
        "doc": {
            "author": [
                "Ansible Core Team",
                "Michael DeHaan"
            ],
            "collection": "ansible.builtin",
            "description": [
                "This module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.",
                "This module is also supported for Windows targets."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/setup.py",
            "has_action": false,
            "module": "setup",
            "notes": [
                "More ansible facts will be added with successive releases. If I(facter) or I(ohai) are installed, variables from these programs will also be snapshotted into the JSON file for usage in templating. These variables are prefixed with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are bubbled up to the caller. Using the ansible facts and choosing to not install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your remote systems. (See also M(community.general.facter) and M(community.general.ohai).)",
                "The filter option filters only the first level subkey below ansible_facts.",
                "If the target host is Windows, you will not currently have the ability to use C(filter) as this is provided by a simpler implementation of the module.",
                "This module is also supported for Windows targets.",
                "This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.",
                "Supports C(check_mode)."
            ],
            "options": {
                "fact_path": {
                    "default": "/etc/ansible/facts.d",
                    "description": [
                        "Path used for local ansible facts (C(*.fact)) - files in this dir will be run (if executable) and their results be added to C(ansible_local) facts. If a file is not executable it is read instead. File/results format can be JSON or INI-format. The default C(fact_path) can be specified in C(ansible.cfg) for when setup is automatically called as part of C(gather_facts). NOTE - For windows clients, the results will be added to a variable named after the local file (without extension suffix), rather than C(ansible_local).",
                        "Since Ansible 2.1, Windows hosts can use C(fact_path). Make sure that this path exists on the target host. Files in this path MUST be PowerShell scripts C(.ps1) which outputs an object. This object will be formatted by Ansible as json so the script should be outputting a raw hashtable, array, or other primitive object."
                    ],
                    "version_added": "1.3",
                    "version_added_collection": "ansible.builtin"
                },
                "filter": {
                    "default": "*",
                    "description": [
                        "If supplied, only return facts that match this shell-style (fnmatch) wildcard."
                    ],
                    "version_added": "1.1",
                    "version_added_collection": "ansible.builtin"
                },
                "gather_subset": {
                    "default": "all",
                    "description": [
                        "If supplied, restrict the additional facts collected to the given subset. Possible values: C(all), C(min), C(hardware), C(network), C(virtual), C(ohai), and C(facter). Can specify a list of values to specify a larger subset. Values can also be used with an initial C(!) to specify that that specific subset should not be collected.  For instance: C(!hardware,!network,!virtual,!ohai,!facter). If C(!all) is specified then only the min subset is collected. To avoid collecting even the min subset, specify C(!all,!min). To collect only specific facts, use C(!all,!min), and specify the particular fact subsets. Use the filter parameter if you do not want to display some collected facts."
                    ],
                    "version_added": "2.1",
                    "version_added_collection": "ansible.builtin"
                },
                "gather_timeout": {
                    "default": 10,
                    "description": [
                        "Set the default timeout in seconds for individual fact gathering."
                    ],
                    "version_added": "2.2",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "short_description": "Gathers facts about remote hosts",
            "version_added": "historical",
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).\n# ansible all -m ansible.builtin.setup --tree /tmp/facts\n\n# Display only facts regarding memory found by ansible on all hosts and output them.\n# ansible all -m ansible.builtin.setup -a 'filter=ansible_*_mb'\n\n# Display only facts returned by facter.\n# ansible all -m ansible.builtin.setup -a 'filter=facter_*'\n\n# Collect only facts returned by facter.\n# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!any,facter'\n\n- name: Collect only facts returned by facter\n  ansible.builtin.setup:\n    gather_subset:\n      - '!all'\n      - '!any'\n      - facter\n\n# Display only facts about certain interfaces.\n# ansible all -m ansible.builtin.setup -a 'filter=ansible_eth[0-2]'\n\n# Restrict additional gathered facts to network and virtual (includes default minimum facts)\n# ansible all -m ansible.builtin.setup -a 'gather_subset=network,virtual'\n\n# Collect only network and virtual (excludes default minimum facts)\n# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!any,network,virtual'\n\n# Do not call puppet facter or ohai even if present.\n# ansible all -m ansible.builtin.setup -a 'gather_subset=!facter,!ohai'\n\n# Only collect the default minimum amount of facts:\n# ansible all -m ansible.builtin.setup -a 'gather_subset=!all'\n\n# Collect no facts, even the default minimum subset of facts:\n# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!min'\n\n# Display facts from Windows hosts with custom facts stored in C(C:\\custom_facts).\n# ansible windows -m ansible.builtin.setup -a \"fact_path='c:\\custom_facts'\"\n",
        "metadata": null,
        "return": null
    }
}
