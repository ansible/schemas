{
    "awx.awx.tower_credential": {
        "doc": {
            "author": "Wayne Witzel III (@wwitzel3)",
            "collection": "awx.awx",
            "description": [
                "Create, update, or destroy Ansible Tower credentials. See U(https://www.ansible.com/tower) for an overview."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/awx/awx/plugins/modules/tower_credential.py",
            "has_action": false,
            "module": "tower_credential",
            "notes": [
                "Values `inputs` and the other deprecated fields (such as `tenant`) are replacements of existing values. See the last 4 examples for details.",
                "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your Tower host information.",
                "I(config_file) should contain Tower configuration in the following format host=hostname username=username password=password"
            ],
            "options": {
                "authorize": {
                    "default": "no",
                    "description": [
                        "Should use authorize for net type.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "bool"
                },
                "authorize_password": {
                    "description": [
                        "Password for net credentials that require authorize.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "become_method": {
                    "description": [
                        "Become method to use for privilege escalation.",
                        "Some examples are \"None\", \"sudo\", \"su\", \"pbrun\"",
                        "Due to become plugins, these can be arbitrary",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "become_password": {
                    "description": [
                        "Become password.",
                        "Use \"ASK\" and launch in Tower to be prompted.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "become_username": {
                    "description": [
                        "Become username.",
                        "Use \"ASK\" and launch in Tower to be prompted.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "client": {
                    "description": [
                        "Client or application ID for azure_rm type.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "credential_type": {
                    "description": [
                        "Name of credential type.",
                        "Will be preferred over kind"
                    ],
                    "type": "str"
                },
                "description": {
                    "description": [
                        "The description to use for the credential."
                    ],
                    "type": "str"
                },
                "domain": {
                    "description": [
                        "Domain for openstack type.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "host": {
                    "description": [
                        "Host for this credential.",
                        "Deprecated, will be removed in a future release"
                    ],
                    "type": "str"
                },
                "inputs": {
                    "description": [
                        "Credential inputs where the keys are var names used in templating. Refer to the Ansible Tower documentation for example syntax.",
                        "Any fields in this dict will take prescedence over any fields mentioned below (i.e. host, username, etc)"
                    ],
                    "type": "dict"
                },
                "kind": {
                    "choices": [
                        "aws",
                        "tower",
                        "gce",
                        "azure_rm",
                        "openstack",
                        "satellite6",
                        "rhv",
                        "vmware",
                        "aim",
                        "conjur",
                        "hashivault_kv",
                        "hashivault_ssh",
                        "azure_kv",
                        "insights",
                        "kubernetes_bearer_token",
                        "net",
                        "scm",
                        "ssh",
                        "github_token",
                        "gitlab_token",
                        "vault"
                    ],
                    "description": [
                        "Type of credential being added.",
                        "The ssh choice refers to a Tower Machine credential.",
                        "Deprecated, please use credential_type"
                    ],
                    "required": false,
                    "type": "str"
                },
                "name": {
                    "description": [
                        "The name to use for the credential."
                    ],
                    "required": true,
                    "type": "str"
                },
                "new_name": {
                    "description": [
                        "Setting this option will change the existing name (looked up via the name field."
                    ],
                    "required": false,
                    "type": "str"
                },
                "organization": {
                    "description": [
                        "Organization that should own the credential."
                    ],
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Password for this credential. ``secret_key`` for AWS. ``api_key`` for RAX.",
                        "Use \"ASK\" and launch in Tower to be prompted.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "project": {
                    "description": [
                        "Project that should use this credential for GCP.",
                        "Deprecated, will be removed in a future release"
                    ],
                    "type": "str"
                },
                "secret": {
                    "description": [
                        "Secret token for azure_rm type.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "description": [
                        "STS token for aws type.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "ssh_key_data": {
                    "description": [
                        "SSH private key content. To extract the content from a file path, use the lookup function (see examples).",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "ssh_key_unlock": {
                    "description": [
                        "Unlock password for ssh_key.",
                        "Use \"ASK\" and launch in Tower to be prompted.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Desired state of the resource."
                    ],
                    "type": "str"
                },
                "subscription": {
                    "description": [
                        "Subscription ID for azure_rm type.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "team": {
                    "description": [
                        "Team that should own this credential."
                    ],
                    "type": "str"
                },
                "tenant": {
                    "description": [
                        "Tenant ID for azure_rm type.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "tower_config_file": {
                    "description": [
                        "Path to the Tower or AWX config file.",
                        "If provided, the other locations for config files will not be considered."
                    ],
                    "type": "path"
                },
                "tower_host": {
                    "description": [
                        "URL to your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_HOST) and then config files",
                        "If value not specified by any means, the value of C(127.0.0.1) will be used"
                    ],
                    "type": "str"
                },
                "tower_oauthtoken": {
                    "description": [
                        "The Tower OAuth token to use.",
                        "This value can be in one of two formats.",
                        "A string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)",
                        "A dictionary structure as returned by the tower_token module.",
                        "If value not set, will try environment variable C(TOWER_OAUTH_TOKEN) and then config files"
                    ],
                    "type": "raw",
                    "version_added": "3.7",
                    "version_added_collection": "awx.awx"
                },
                "tower_password": {
                    "description": [
                        "Password for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_PASSWORD) and then config files"
                    ],
                    "type": "str"
                },
                "tower_username": {
                    "description": [
                        "Username for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_USERNAME) and then config files"
                    ],
                    "type": "str"
                },
                "update_secrets": {
                    "default": true,
                    "description": [
                        "C(true) will always update encrypted values.",
                        "C(false) will only updated encrypted values if a change is absolutely known to be needed."
                    ],
                    "type": "bool"
                },
                "user": {
                    "description": [
                        "User that should own this credential."
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Username for this credential. ``access_key`` for AWS.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "tower_verify_ssl"
                    ],
                    "description": [
                        "Whether to allow insecure connections to Tower or AWX.",
                        "If C(no), SSL certificates will not be validated.",
                        "This should only be used on personally controlled sites using self-signed certificates.",
                        "If value not set, will try environment variable C(TOWER_VERIFY_SSL) and then config files"
                    ],
                    "type": "bool"
                },
                "vault_id": {
                    "description": [
                        "Vault identifier.",
                        "This parameter is only valid if C(kind) is specified as C(vault).",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                },
                "vault_password": {
                    "description": [
                        "Vault password.",
                        "Use \"ASK\" and launch in Tower to be prompted.",
                        "Deprecated, please use inputs"
                    ],
                    "type": "str"
                }
            },
            "short_description": "create, update, or destroy Ansible Tower credential."
        },
        "examples": "\n- name: Add tower machine credential\n  tower_credential:\n    name: Team Name\n    description: Team Description\n    organization: test-org\n    credential_type: Machine\n    state: present\n    tower_config_file: \"~/tower_cli.cfg\"\n\n- name: Create a valid SCM credential from a private_key file\n  tower_credential:\n    name: SCM Credential\n    organization: Default\n    state: present\n    credential_type: Source Control\n    inputs:\n      username: joe\n      password: secret\n      ssh_key_data: \"{{ lookup('file', '/tmp/id_rsa') }}\"\n      ssh_key_unlock: \"passphrase\"\n\n- name: Fetch private key\n  slurp:\n    src: '$HOME/.ssh/aws-private.pem'\n  register: aws_ssh_key\n\n- name: Add Credential Into Tower\n  tower_credential:\n    name: Workshop Credential\n    credential_type: Machine\n    organization: Default\n    inputs:\n      ssh_key_data: \"{{ aws_ssh_key['content'] | b64decode }}\"\n  run_once: true\n  delegate_to: localhost\n\n- name: Add Credential with Custom Credential Type\n  tower_credential:\n    name: Workshop Credential\n    credential_type: MyCloudCredential\n    organization: Default\n    tower_username: admin\n    tower_password: ansible\n    tower_host: https://localhost\n\n- name: Create a Vaiult credential (example for notes)\n  tower_credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'hello'\n      vault_id: 'My ID'\n\n- name: Bad password update (will replace vault_id)\n  tower_credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'new_password'\n\n- name: Another bad password update (will replace vault_id)\n  tower_credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    vault_password: 'new_password'\n\n- name: A safe way to update a password and keep vault_id\n  tower_credential:\n    name: Example password\n    credential_type: Vault\n    organization: Default\n    inputs:\n      vault_password: 'new_password'\n      vault_id: 'My ID'\n\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": null
    }
}
