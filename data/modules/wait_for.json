{
    "wait_for": {
        "doc": {
            "author": [
                "Jeroen Hoekx (@jhoekx)",
                "John Jarvis (@jarv)",
                "Andrii Radyk (@AnderEnder)"
            ],
            "collection": "ansible.builtin",
            "description": [
                "You can wait for a set amount of time C(timeout), this is the default if nothing is specified or just C(timeout) is specified. This does not produce an error.",
                "Waiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers.",
                "It is also useful when starting guests with the M(community.libvirt.virt) module and needing to pause until they are ready.",
                "This module can also be used to wait for a regex match a string to be present in a file.",
                "In Ansible 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.",
                "In Ansible 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.",
                "For Windows targets, use the M(ansible.windows.win_wait_for) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/wait_for.py",
            "has_action": false,
            "module": "wait_for",
            "notes": [
                "The ability to use search_regex with a port connection was added in Ansible 1.7.",
                "Prior to Ansible 2.4, testing for the absence of a directory or UNIX socket did not work correctly.",
                "Prior to Ansible 2.4, testing for the presence of a file did not work correctly if the remote user did not have read access to that file.",
                "Under some circumstances when using mandatory access control, a path may always be treated as being absent even if it exists, but can't be modified or created by the remote user either.",
                "When waiting for a path, symbolic links will be followed.  Many other modules that manipulate files do not follow symbolic links, so operations on the path using other modules may not work exactly as expected."
            ],
            "options": {
                "active_connection_states": {
                    "default": [
                        "ESTABLISHED",
                        "FIN_WAIT1",
                        "FIN_WAIT2",
                        "SYN_RECV",
                        "SYN_SENT",
                        "TIME_WAIT"
                    ],
                    "description": [
                        "The list of TCP connection states which are counted as active connections."
                    ],
                    "type": "list",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "connect_timeout": {
                    "default": 5,
                    "description": [
                        "Maximum number of seconds to wait for a connection to happen before closing and retrying."
                    ],
                    "type": "int"
                },
                "delay": {
                    "default": 0,
                    "description": [
                        "Number of seconds to wait before starting to poll."
                    ],
                    "type": "int"
                },
                "exclude_hosts": {
                    "description": [
                        "List of hosts or IPs to ignore when looking for active TCP connections for C(drained) state."
                    ],
                    "type": "list",
                    "version_added": "1.8",
                    "version_added_collection": "ansible.builtin"
                },
                "host": {
                    "default": "127.0.0.1",
                    "description": [
                        "A resolvable hostname or IP address to wait for."
                    ],
                    "type": "str"
                },
                "msg": {
                    "description": [
                        "This overrides the normal error message from a failure to meet the required conditions."
                    ],
                    "type": "str",
                    "version_added": "2.4",
                    "version_added_collection": "ansible.builtin"
                },
                "path": {
                    "description": [
                        "Path to a file on the filesystem that must exist before continuing.",
                        "C(path) and C(port) are mutually exclusive parameters."
                    ],
                    "type": "path",
                    "version_added": "1.4",
                    "version_added_collection": "ansible.builtin"
                },
                "port": {
                    "description": [
                        "Port number to poll.",
                        "C(path) and C(port) are mutually exclusive parameters."
                    ],
                    "type": "int"
                },
                "search_regex": {
                    "description": [
                        "Can be used to match a string in either a file or a socket connection.",
                        "Defaults to a multiline regex."
                    ],
                    "type": "str",
                    "version_added": "1.4",
                    "version_added_collection": "ansible.builtin"
                },
                "sleep": {
                    "default": 1,
                    "description": [
                        "Number of seconds to sleep between checks.",
                        "Before Ansible 2.3 this was hardcoded to 1 second."
                    ],
                    "type": "int",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "state": {
                    "choices": [
                        "absent",
                        "drained",
                        "present",
                        "started",
                        "stopped"
                    ],
                    "default": "started",
                    "description": [
                        "Either C(present), C(started), or C(stopped), C(absent), or C(drained).",
                        "When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections.",
                        "When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing, C(absent) will check that file is absent or removed."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 300,
                    "description": [
                        "Maximum number of seconds to wait for, when used with another condition it will force an error.",
                        "When used without other conditions it is equivalent of just sleeping."
                    ],
                    "type": "int"
                }
            },
            "seealso": [
                {
                    "module": "ansible.builtin.wait_for_connection"
                },
                {
                    "module": "ansible.windows.win_wait_for"
                },
                {
                    "module": "community.windows.win_wait_for_process"
                }
            ],
            "short_description": "Waits for a condition before continuing",
            "version_added": "0.7",
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n- name: Sleep for 300 seconds and continue with play\n  wait_for:\n    timeout: 300\n  delegate_to: localhost\n\n- name: Wait for port 8000 to become open on the host, don't start checking for 10 seconds\n  wait_for:\n    port: 8000\n    delay: 10\n\n- name: Waits for port 8000 of any IP to close active connections, don't start checking for 10 seconds\n  wait_for:\n    host: 0.0.0.0\n    port: 8000\n    delay: 10\n    state: drained\n\n- name: Wait for port 8000 of any IP to close active connections, ignoring connections for specified hosts\n  wait_for:\n    host: 0.0.0.0\n    port: 8000\n    state: drained\n    exclude_hosts: 10.2.1.2,10.2.1.3\n\n- name: Wait until the file /tmp/foo is present before continuing\n  wait_for:\n    path: /tmp/foo\n\n- name: Wait until the string \"completed\" is in the file /tmp/foo before continuing\n  wait_for:\n    path: /tmp/foo\n    search_regex: completed\n\n- name: Wait until regex pattern matches in the file /tmp/foo and print the matched group\n  wait_for:\n    path: /tmp/foo\n    search_regex: completed (?P<task>\\w+)\n  register: waitfor\n- debug:\n    msg: Completed {{ waitfor['match_groupdict']['task'] }}\n\n- name: Wait until the lock file is removed\n  wait_for:\n    path: /var/lock/file.lock\n    state: absent\n\n- name: Wait until the process is finished and pid was destroyed\n  wait_for:\n    path: /proc/3466/status\n    state: absent\n\n- name: Output customized message when failed\n  wait_for:\n    path: /tmp/foo\n    state: present\n    msg: Timeout to find file /tmp/foo\n\n# Do not assume the inventory_hostname is resolvable and delay 10 seconds at start\n- name: Wait 300 seconds for port 22 to become open and contain \"OpenSSH\"\n  wait_for:\n    port: 22\n    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'\n    search_regex: OpenSSH\n    delay: 10\n  connection: local\n\n# Same as above but you normally have ansible_connection set in inventory, which overrides 'connection'\n- name: Wait 300 seconds for port 22 to become open and contain \"OpenSSH\"\n  wait_for:\n    port: 22\n    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'\n    search_regex: OpenSSH\n    delay: 10\n  vars:\n    ansible_connection: local\n",
        "metadata": null,
        "return": {
            "elapsed": {
                "description": "The number of seconds that elapsed while waiting",
                "returned": "always",
                "sample": 23,
                "type": "int"
            },
            "match_groupdict": {
                "description": "Dictionary containing all the named subgroups of the match, keyed by the subgroup name, as returned by U(https://docs.python.org/2/library/re.html#re.MatchObject.groupdict)",
                "returned": "always",
                "sample": {
                    "group": "match"
                },
                "type": "dict"
            },
            "match_groups": {
                "description": "Tuple containing all the subgroups of the match as returned by U(https://docs.python.org/2/library/re.html#re.MatchObject.groups)",
                "returned": "always",
                "sample": [
                    "match 1",
                    "match 2"
                ],
                "type": "list"
            }
        }
    }
}
