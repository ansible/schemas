{
    "ansible.netcommon.netconf_get": {
        "doc": {
            "author": [
                "Ganesh Nalawade (@ganeshrn)",
                "Sven Wisotzky (@wisotzky)"
            ],
            "collection": "ansible.netcommon",
            "description": [
                "NETCONF is a network management protocol developed and standardized by the IETF. It is documented in RFC 6241.",
                "This module allows the user to fetch configuration and state data from NETCONF enabled network devices."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/ansible/netcommon/plugins/modules/netconf_get.py",
            "has_action": false,
            "module": "netconf_get",
            "notes": [
                "This module requires the NETCONF system service be enabled on the remote device being managed.",
                "This module supports the use of connection=netconf",
                "This module is supported on C(ansible_network_os) network platforms. See the :ref:`Network Platform Options <platform_options>` for details."
            ],
            "options": {
                "display": {
                    "choices": [
                        "json",
                        "pretty",
                        "xml"
                    ],
                    "description": [
                        "Encoding scheme to use when serializing output from the device. The option I(json) will serialize the output as JSON data. If the option value is I(json) it requires jxmlease to be installed on control node. The option I(pretty) is similar to received XML response but is using human readable format (spaces, new lines). The option value I(xml) is similar to received XML response but removes all XML namespaces."
                    ]
                },
                "filter": {
                    "description": [
                        "This argument specifies the XML string which acts as a filter to restrict the portions of the data to be are retrieved from the remote device. If this option is not specified entire configuration or state data is returned in result depending on the value of C(source) option. The C(filter) value can be either XML string or XPath, if the filter is in XPath format the NETCONF server running on remote host should support xpath capability else it will result in an error."
                    ]
                },
                "lock": {
                    "choices": [
                        "never",
                        "always",
                        "if-supported"
                    ],
                    "default": "never",
                    "description": [
                        "Instructs the module to explicitly lock the datastore specified as C(source). If no I(source) is defined, the I(running) datastore will be locked. By setting the option value I(always) is will explicitly lock the datastore mentioned in C(source) option. By setting the option value I(never) it will not lock the C(source) datastore. The value I(if-supported) allows better interworking with NETCONF servers, which do not support the (un)lock operation for all supported datastores."
                    ]
                },
                "source": {
                    "choices": [
                        "running",
                        "candidate",
                        "startup"
                    ],
                    "description": [
                        "This argument specifies the datastore from which configuration data should be fetched. Valid values are I(running), I(candidate) and I(startup). If the C(source) value is not set both configuration and state information are returned in response from running datastore."
                    ]
                }
            },
            "requirements": [
                "ncclient (>=v0.5.2)",
                "jxmlease"
            ],
            "short_description": "Fetch configuration/state data from NETCONF enabled network devices."
        },
        "examples": "\n- name: Get running configuration and state data\n  netconf_get:\n\n- name: Get configuration and state data from startup datastore\n  netconf_get:\n    source: startup\n\n- name: Get system configuration data from running datastore state (junos)\n  netconf_get:\n    source: running\n    filter: <configuration><system></system></configuration>\n\n- name: Get configuration and state data in JSON format\n  netconf_get:\n    display: json\n\n- name: get schema list using subtree w/ namespaces\n  netconf_get:\n    display: json\n    filter: <netconf-state xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring\"><schemas><schema/></schemas></netconf-state>\n    lock: never\n\n- name: get schema list using xpath\n  netconf_get:\n    display: xml\n    filter: /netconf-state/schemas/schema\n\n- name: get interface configuration with filter (iosxr)\n  netconf_get:\n    display: pretty\n    filter: <interface-configurations xmlns=\"http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg\"></interface-configurations>\n    lock: if-supported\n\n- name: Get system configuration data from running datastore state (junos)\n  netconf_get:\n    source: running\n    filter: <configuration><system></system></configuration>\n    lock: if-supported\n\n- name: Get complete configuration data from running datastore (SROS)\n  netconf_get:\n    source: running\n    filter: <configure xmlns=\"urn:nokia.com:sros:ns:yang:sr:conf\"/>\n\n- name: Get complete state data (SROS)\n  netconf_get:\n    filter: <state xmlns=\"urn:nokia.com:sros:ns:yang:sr:state\"/>\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "network"
        },
        "return": {
            "output": {
                "contains": {
                    "formatted_output": [
                        "Contains formatted response received from remote host as per the value in display format."
                    ]
                },
                "description": "Based on the value of display option will return either the set of transformed XML to JSON format from the RPC response with type dict or pretty XML string response (human-readable) or response with namespace removed from XML string.",
                "returned": "when the display format is selected as JSON it is returned as dict type, if the display format is xml or pretty pretty it is returned as a string apart from low-level errors (such as action plugin).",
                "type": "complex"
            },
            "stdout": {
                "description": "The raw XML string containing configuration or state data received from the underlying ncclient library.",
                "returned": "always apart from low-level errors (such as action plugin)",
                "sample": "...",
                "type": "str"
            },
            "stdout_lines": {
                "description": "The value of stdout split into a list",
                "returned": "always apart from low-level errors (such as action plugin)",
                "sample": [
                    "...",
                    "..."
                ],
                "type": "list"
            }
        }
    }
}
