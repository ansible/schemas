{
    "cisco.aci.aci_rest": {
        "doc": {
            "author": [
                "Dag Wieers (@dagwieers)",
                "Cindy Zhao (@cizhao)"
            ],
            "collection": "cisco.aci",
            "description": [
                "Enables the management of the Cisco ACI fabric through direct access to the Cisco APIC REST API.",
                "Thanks to the idempotent nature of the APIC, this module is idempotent and reports changes."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/aci/plugins/modules/aci_rest.py",
            "has_action": false,
            "module": "aci_rest",
            "notes": [
                "Certain payloads are known not to be idempotent, so be careful when constructing payloads, e.g. using C(status=\"created\") will cause idempotency issues, use C(status=\"modified\") instead. More information in :ref:`the ACI documentation <aci_guide_known_issues>`.",
                "Certain payloads (and used paths) are known to report no changes happened when changes did happen. This is a known APIC problem and has been reported to the vendor. A workaround for this issue exists. More information in :ref:`the ACI documentation <aci_guide_known_issues>`.",
                "XML payloads require the C(lxml) and C(xmljson) python libraries. For JSON payloads nothing special is needed.",
                "If you do not have any attributes, it may be necessary to add the \"attributes\" key with an empty dictionnary \"{}\" for value as the APIC does expect the entry to precede any children."
            ],
            "options": {
                "annotation": {
                    "description": [
                        "User-defined string for annotating an object.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_ANNOTATION) will be used instead."
                    ],
                    "type": "str"
                },
                "certificate_name": {
                    "aliases": [
                        "cert_name"
                    ],
                    "description": [
                        "The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.",
                        "If a C(private_key) filename was provided, this defaults to the C(private_key) basename, without extension.",
                        "If PEM-formatted content was provided for C(private_key), this defaults to the C(username) value.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_CERTIFICATE_NAME) will be used instead."
                    ],
                    "type": "str"
                },
                "content": {
                    "description": [
                        "When used instead of C(src), sets the payload of the API request directly.",
                        "This may be convenient to template simple requests.",
                        "For anything complex use the C(template) lookup plugin (see examples) or the M(template) module with parameter C(src)."
                    ],
                    "type": "raw"
                },
                "host": {
                    "aliases": [
                        "hostname"
                    ],
                    "description": [
                        "IP Address or hostname of APIC resolvable by Ansible control host.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_HOST) will be used instead."
                    ],
                    "required": true,
                    "type": "str"
                },
                "method": {
                    "aliases": [
                        "action"
                    ],
                    "choices": [
                        "delete",
                        "get",
                        "post"
                    ],
                    "default": "get",
                    "description": [
                        "The HTTP method of the request.",
                        "Using C(delete) is typically used for deleting objects.",
                        "Using C(get) is typically used for querying objects.",
                        "Using C(post) is typically used for modifying objects."
                    ],
                    "type": "str"
                },
                "output_level": {
                    "choices": [
                        "debug",
                        "info",
                        "normal"
                    ],
                    "default": "normal",
                    "description": [
                        "Influence the output of this ACI module.",
                        "C(normal) means the standard output, incl. C(current) dict",
                        "C(info) adds informational output, incl. C(previous), C(proposed) and C(sent) dicts",
                        "C(debug) adds debugging output, incl. C(filter_string), C(method), C(response), C(status) and C(url) information",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OUTPUT_LEVEL) will be used instead."
                    ],
                    "type": "str"
                },
                "output_path": {
                    "description": [
                        "Path to a file that will be used to dump the ACI JSON configuration objects generated by the module.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OUTPUT_PATH) will be used instead."
                    ],
                    "type": "str"
                },
                "owner_key": {
                    "description": [
                        "User-defined string for the ownerKey attribute of an ACI object.",
                        "This attribute represents a key for enabling clients to own their data for entity correlation.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OWNER_KEY) will be used instead."
                    ],
                    "type": "str"
                },
                "owner_tag": {
                    "description": [
                        "User-defined string for the ownerTag attribute of an ACI object.",
                        "This attribute represents a tag for enabling clients to add their own data.",
                        "For example, to indicate who created this object.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OWNER_TAG) will be used instead."
                    ],
                    "type": "str"
                },
                "password": {
                    "description": [
                        "The password to use for authentication.",
                        "This option is mutual exclusive with C(private_key). If C(private_key) is provided too, it will be used instead.",
                        "If the value is not specified in the task, the value of environment variables C(ACI_PASSWORD) or C(ANSIBLE_NET_PASSWORD) will be used instead."
                    ],
                    "type": "str"
                },
                "path": {
                    "aliases": [
                        "uri"
                    ],
                    "description": [
                        "URI being used to execute API calls.",
                        "Must end in C(.xml) or C(.json)."
                    ],
                    "required": true,
                    "type": "str"
                },
                "port": {
                    "description": [
                        "Port number to be used for REST connection.",
                        "The default value depends on parameter C(use_ssl).",
                        "If the value is not specified in the task, the value of environment variable C(ACI_PORT) will be used instead."
                    ],
                    "type": "int"
                },
                "private_key": {
                    "aliases": [
                        "cert_key"
                    ],
                    "description": [
                        "Either a PEM-formatted private key file or the private key content used for signature-based authentication.",
                        "This value also influences the default C(certificate_name) that is used.",
                        "This option is mutual exclusive with C(password). If C(password) is provided too, it will be ignored.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_PRIVATE_KEY) will be used instead."
                    ],
                    "type": "str"
                },
                "src": {
                    "aliases": [
                        "config_file"
                    ],
                    "description": [
                        "Name of the absolute path of the filename that includes the body of the HTTP request being sent to the ACI fabric.",
                        "If you require a templated payload, use the C(content) parameter together with the C(template) lookup plugin, or use M(template)."
                    ],
                    "type": "path"
                },
                "timeout": {
                    "default": 30,
                    "description": [
                        "The socket level timeout in seconds.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_TIMEOUT) will be used instead."
                    ],
                    "type": "int"
                },
                "use_proxy": {
                    "default": true,
                    "description": [
                        "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_USE_PROXY) will be used instead."
                    ],
                    "type": "bool"
                },
                "use_ssl": {
                    "default": true,
                    "description": [
                        "If C(no), an HTTP connection will be used instead of the default HTTPS connection.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_USE_SSL) will be used instead."
                    ],
                    "type": "bool"
                },
                "username": {
                    "aliases": [
                        "user"
                    ],
                    "default": "admin",
                    "description": [
                        "The username to use for authentication.",
                        "If the value is not specified in the task, the value of environment variables C(ACI_USERNAME) or C(ANSIBLE_NET_USERNAME) will be used instead."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "If C(no), SSL certificates will not be validated.",
                        "This should only set to C(no) when used on personally controlled sites using self-signed certificates.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_VALIDATE_CERTS) will be used instead."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "lxml (when using XML payload)",
                "xmljson >= 0.1.8 (when using XML payload)",
                "python 2.7+ (when using xmljson)"
            ],
            "seealso": [
                {
                    "module": "cisco.aci.aci_tenant"
                },
                {
                    "description": "More information about the APIC REST API.",
                    "link": "http://www.cisco.com/c/en/us/td/docs/switches/datacenter/aci/apic/sw/2-x/rest_cfg/2_1_x/b_Cisco_APIC_REST_API_Configuration_Guide.html",
                    "name": "Cisco APIC REST API Configuration Guide"
                },
                {
                    "description": "Detailed information on how to manage your ACI infrastructure using Ansible.",
                    "ref": "aci_guide"
                },
                {
                    "description": "Detailed guide on how to write your own Cisco ACI modules to contribute.",
                    "ref": "aci_dev_guide"
                }
            ],
            "short_description": "Direct access to the Cisco APIC REST API"
        },
        "examples": "\n- name: Add a tenant using certificate authentication\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/admin.key\n    method: post\n    path: /api/mo/uni.xml\n    src: /home/cisco/ansible/aci/configs/aci_config.xml\n  delegate_to: localhost\n\n- name: Add a tenant from a templated payload file from templates/\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/admin.key\n    method: post\n    path: /api/mo/uni.xml\n    content: \"{{ lookup('template', 'aci/tenant.xml.j2') }}\"\n  delegate_to: localhost\n\n- name: Add a tenant using inline YAML\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/admin.key\n    validate_certs: no\n    path: /api/mo/uni.json\n    method: post\n    content:\n      fvTenant:\n        attributes:\n          name: Sales\n          descr: Sales department\n  delegate_to: localhost\n\n- name: Add a tenant using a JSON string\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/admin.key\n    validate_certs: no\n    path: /api/mo/uni.json\n    method: post\n    content:\n      {\n        \"fvTenant\": {\n          \"attributes\": {\n            \"name\": \"Sales\",\n            \"descr\": \"Sales department\"\n          }\n        }\n      }\n  delegate_to: localhost\n\n- name: Add a tenant using an XML string\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/{{ aci_username }}.key\n    validate_certs: no\n    path: /api/mo/uni.xml\n    method: post\n    content: '<fvTenant name=\"Sales\" descr=\"Sales departement\"/>'\n  delegate_to: localhost\n\n- name: Get tenants using password authentication\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    method: get\n    path: /api/node/class/fvTenant.json\n  delegate_to: localhost\n  register: query_result\n\n- name: Configure contracts\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/admin.key\n    method: post\n    path: /api/mo/uni.xml\n    src: /home/cisco/ansible/aci/configs/contract_config.xml\n  delegate_to: localhost\n\n- name: Register leaves and spines\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/admin.key\n    validate_certs: no\n    method: post\n    path: /api/mo/uni/controller/nodeidentpol.xml\n    content:\n      <fabricNodeIdentPol>\n        <fabricNodeIdentP name=\"{{ item.name }}\" nodeId=\"{{ item.nodeid }}\" status=\"{{ item.status }}\" serial=\"{{ item.serial }}\"/>\n      </fabricNodeIdentPol>\n  with_items:\n  - '{{ apic_leavesspines }}'\n  delegate_to: localhost\n\n- name: Wait for all controllers to become ready\n  cisco.aci.aci_rest:\n    host: apic\n    username: admin\n    private_key: pki/admin.key\n    validate_certs: no\n    path: /api/node/class/topSystem.json?query-target-filter=eq(topSystem.role,\"controller\")\n  register: apics\n  until: \"'totalCount' in apics and apics.totalCount|int >= groups['apic']|count\"\n  retries: 120\n  delay: 30\n  delegate_to: localhost\n  run_once: yes\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "certified"
        },
        "return": {
            "error_code": {
                "description": "The REST ACI return code, useful for troubleshooting on failure",
                "returned": "always",
                "sample": 122,
                "type": "int"
            },
            "error_text": {
                "description": "The REST ACI descriptive text, useful for troubleshooting on failure",
                "returned": "always",
                "sample": "unknown managed object class foo",
                "type": "str"
            },
            "imdata": {
                "description": "Converted output returned by the APIC REST (register this for post-processing)",
                "returned": "always",
                "sample": [
                    {
                        "error": {
                            "attributes": {
                                "code": "122",
                                "text": "unknown managed object class foo"
                            }
                        }
                    }
                ],
                "type": "str"
            },
            "payload": {
                "description": "The (templated) payload send to the APIC REST API (xml or json)",
                "returned": "always",
                "sample": "<foo bar=\"boo\"/>",
                "type": "str"
            },
            "raw": {
                "description": "The raw output returned by the APIC REST API (xml or json)",
                "returned": "parse error",
                "sample": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>",
                "type": "str"
            },
            "response": {
                "description": "HTTP response string",
                "returned": "always",
                "sample": "HTTP Error 400: Bad Request",
                "type": "str"
            },
            "status": {
                "description": "HTTP status code",
                "returned": "always",
                "sample": 400,
                "type": "int"
            },
            "totalCount": {
                "description": "Number of items in the imdata array",
                "returned": "always",
                "sample": "0",
                "type": "str"
            },
            "url": {
                "description": "URL used for APIC REST call",
                "returned": "success",
                "sample": "https://1.2.3.4/api/mo/uni/tn-[Dag].json?rsp-subtree=modified",
                "type": "str"
            }
        }
    }
}
