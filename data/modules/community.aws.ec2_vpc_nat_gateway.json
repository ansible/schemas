{
    "community.aws.ec2_vpc_nat_gateway": {
        "doc": {
            "author": [
                "Allen Sanabria (@linuxdynasty)",
                "Jon Hadfield (@jonhadfield)",
                "Karen Cheng (@Etherdaemon)",
                "Alina Buzachis (@alinabuzachis)"
            ],
            "collection": "community.aws",
            "description": [
                "Ensure the state of AWS VPC NAT Gateways based on their id, allocation and subnet ids."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ec2_vpc_nat_gateway.py",
            "has_action": false,
            "module": "ec2_vpc_nat_gateway",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "allocation_id": {
                    "description": [
                        "The id of the elastic IP allocation. If this is not passed and the eip_address is not passed. An EIP is generated for this NAT Gateway."
                    ],
                    "type": "str"
                },
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "client_token": {
                    "description": [
                        "Optional unique token to be used during create to ensure idempotency. When specifying this option, ensure you specify the eip_address parameter as well otherwise any subsequent runs will fail."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "eip_address": {
                    "description": [
                        "The elastic IP address of the EIP you want attached to this NAT Gateway. If this is not passed and the allocation_id is not passed, an EIP is generated for this NAT Gateway."
                    ],
                    "type": "str"
                },
                "if_exist_do_not_create": {
                    "default": false,
                    "description": [
                        "if a NAT Gateway exists already in the subnet_id, then do not create a new one."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "nat_gateway_id": {
                    "description": [
                        "The id AWS dynamically allocates to the NAT Gateway on creation. This is required when the absent option is present."
                    ],
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "purge_tags": {
                    "default": true,
                    "description": [
                        "Remove tags not listed in I(tags)."
                    ],
                    "type": "bool",
                    "version_added": "1.4.0",
                    "version_added_collection": "community.aws"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "release_eip": {
                    "default": false,
                    "description": [
                        "Deallocate the EIP from the VPC.",
                        "Option is only valid with the absent state.",
                        "You should use this with the wait option. Since you can not release an address while a delete operation is happening."
                    ],
                    "type": "bool"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Ensure NAT Gateway is present or absent."
                    ],
                    "type": "str"
                },
                "subnet_id": {
                    "description": [
                        "The id of the subnet to create the NAT Gateway in. This is required with the present option."
                    ],
                    "type": "str"
                },
                "tags": {
                    "aliases": [
                        "resource_tags"
                    ],
                    "description": [
                        "A dict of tags to apply to the NAT gateway.",
                        "To remove all tags set I(tags={}) and I(purge_tags=true)."
                    ],
                    "type": "dict",
                    "version_added": "1.4.0",
                    "version_added_collection": "community.aws"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": false,
                    "description": [
                        "Wait for operation to complete before returning."
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 320,
                    "description": [
                        "How many seconds to wait for an operation to complete before timing out."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "python >= 2.6"
            ],
            "short_description": "Manage AWS VPC NAT Gateways.",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n- name: Create new nat gateway with client token.\n  community.aws.ec2_vpc_nat_gateway:\n    state: present\n    subnet_id: subnet-12345678\n    eip_address: 52.1.1.1\n    region: ap-southeast-2\n    client_token: abcd-12345678\n  register: new_nat_gateway\n\n- name: Create new nat gateway using an allocation-id.\n  community.aws.ec2_vpc_nat_gateway:\n    state: present\n    subnet_id: subnet-12345678\n    allocation_id: eipalloc-12345678\n    region: ap-southeast-2\n  register: new_nat_gateway\n\n- name: Create new nat gateway, using an EIP address  and wait for available status.\n  community.aws.ec2_vpc_nat_gateway:\n    state: present\n    subnet_id: subnet-12345678\n    eip_address: 52.1.1.1\n    wait: true\n    region: ap-southeast-2\n  register: new_nat_gateway\n\n- name: Create new nat gateway and allocate new EIP.\n  community.aws.ec2_vpc_nat_gateway:\n    state: present\n    subnet_id: subnet-12345678\n    wait: true\n    region: ap-southeast-2\n  register: new_nat_gateway\n\n- name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.\n  community.aws.ec2_vpc_nat_gateway:\n    state: present\n    subnet_id: subnet-12345678\n    wait: true\n    region: ap-southeast-2\n    if_exist_do_not_create: true\n  register: new_nat_gateway\n\n- name: Delete nat gateway using discovered nat gateways from facts module.\n  community.aws.ec2_vpc_nat_gateway:\n    state: absent\n    region: ap-southeast-2\n    wait: true\n    nat_gateway_id: \"{{ item.NatGatewayId }}\"\n    release_eip: true\n  register: delete_nat_gateway_result\n  loop: \"{{ gateways_to_remove.result }}\"\n\n- name: Delete nat gateway and wait for deleted status.\n  community.aws.ec2_vpc_nat_gateway:\n    state: absent\n    nat_gateway_id: nat-12345678\n    wait: true\n    wait_timeout: 500\n    region: ap-southeast-2\n\n- name: Delete nat gateway and release EIP.\n  community.aws.ec2_vpc_nat_gateway:\n    state: absent\n    nat_gateway_id: nat-12345678\n    release_eip: true\n    wait: yes\n    wait_timeout: 300\n    region: ap-southeast-2\n\n- name: Create new nat gateway using allocation-id and tags.\n  community.aws.ec2_vpc_nat_gateway:\n    state: present\n    subnet_id: subnet-12345678\n    allocation_id: eipalloc-12345678\n    region: ap-southeast-2\n    tags:\n        Tag1: tag1\n        Tag2: tag2\n  register: new_nat_gateway\n\n- name: Update tags without purge\n  community.aws.ec2_vpc_nat_gateway:\n    subnet_id: subnet-12345678\n    allocation_id: eipalloc-12345678\n    region: ap-southeast-2\n    purge_tags: no\n    tags:\n        Tag3: tag3\n    wait: yes\n  register: update_tags_nat_gateway\n",
        "metadata": null,
        "return": {
            "create_time": {
                "description": "The ISO 8601 date time format in UTC.",
                "returned": "In all cases.",
                "sample": "2016-03-05T05:19:20.282000+00:00'",
                "type": "str"
            },
            "nat_gateway_addresses": {
                "description": "List of dictionaries containing the public_ip, network_interface_id, private_ip, and allocation_id.",
                "returned": "In all cases.",
                "sample": [
                    {
                        "allocation_id": "eipalloc-12345",
                        "network_interface_id": "eni-12345",
                        "private_ip": "10.0.0.100",
                        "public_ip": "52.52.52.52"
                    }
                ],
                "type": "str"
            },
            "nat_gateway_id": {
                "description": "id of the VPC NAT Gateway",
                "returned": "In all cases.",
                "sample": "nat-0d1e3a878585988f8",
                "type": "str"
            },
            "state": {
                "description": "The current state of the NAT Gateway.",
                "returned": "In all cases.",
                "sample": "available",
                "type": "str"
            },
            "subnet_id": {
                "description": "id of the Subnet",
                "returned": "In all cases.",
                "sample": "subnet-12345",
                "type": "str"
            },
            "tags": {
                "description": "The tags associated the VPC NAT Gateway.",
                "returned": "When tags are present.",
                "sample": {
                    "tags": {
                        "Ansible": "Test"
                    }
                },
                "type": "dict"
            },
            "vpc_id": {
                "description": "id of the VPC.",
                "returned": "In all cases.",
                "sample": "vpc-12345",
                "type": "str"
            }
        }
    }
}
