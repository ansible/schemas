{
    "ansible.windows.win_dsc": {
        "doc": {
            "author": [
                "Trond Hindenes (@trondhindenes)"
            ],
            "collection": "ansible.windows",
            "description": [
                "Configures a resource using PowerShell DSC.",
                "Requires PowerShell version 5.0 or newer.",
                "Most of the options for this module are dynamic and will vary depending on the DSC Resource specified in I(resource_name)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ansible/windows/plugins/modules/win_dsc.py",
            "has_action": false,
            "module": "win_dsc",
            "notes": [
                "By default there are a few builtin resources that come with PowerShell 5.0, see U(https://docs.microsoft.com/en-us/powershell/scripting/dsc/resources/resources) for more information on these resources.",
                "Custom DSC resources can be installed with M(community.windows.win_psmodule) using the I(name) option.",
                "The DSC engine run's each task as the SYSTEM account, any resources that need to be accessed with a different account need to have C(PsDscRunAsCredential) set.",
                "To see the valid options for a DSC resource, run the module with C(-vvv) to show the possible module invocation. Default values are not shown in this output but are applied within the DSC engine.",
                "The DSC engine requires the HTTP WSMan listener to be online and its port configured as the default listener for HTTP. This is set up by default but if a custom HTTP port is used or only a HTTPS listener is present then the module will fail. See the examples for a way to check this out in PowerShell."
            ],
            "options": {
                "free_form": {
                    "description": [
                        "The M(ansible.windows.win_dsc) module takes in multiple free form options based on the DSC resource being invoked by I(resource_name).",
                        "There is no option actually named C(free_form) so see the examples.",
                        "This module will try and convert the option to the correct type required by the DSC resource and throw a warning if it fails.",
                        "If the type of the DSC resource option is a C(CimInstance) or C(CimInstance[]), this means the value should be a dictionary or list of dictionaries based on the values required by that option.",
                        "If the type of the DSC resource option is a C(PSCredential) then there needs to be 2 options set in the Ansible task definition suffixed with C(_username) and C(_password).",
                        "If the type of the DSC resource option is an array, then a list should be provided but a comma separated string also work. Use a list where possible as no escaping is required and it works with more complex types list C(CimInstance[]).",
                        "If the type of the DSC resource option is a C(DateTime), you should use a string in the form of an ISO 8901 string to ensure the exact date is used."
                    ],
                    "required": true,
                    "type": "str"
                },
                "module_version": {
                    "default": "latest",
                    "description": [
                        "Can be used to configure the exact version of the DSC resource to be invoked.",
                        "Useful if the target node has multiple versions installed of the module containing the DSC resource.",
                        "If not specified, the module will follow standard PowerShell convention and use the highest version available."
                    ],
                    "type": "str"
                },
                "resource_name": {
                    "description": [
                        "The name of the DSC Resource to use.",
                        "Must be accessible to PowerShell using any of the default paths."
                    ],
                    "required": true,
                    "type": "str"
                }
            },
            "short_description": "Invokes a PowerShell DSC configuration"
        },
        "examples": "\n- name: Verify the WSMan HTTP listener is active and configured correctly\n  ansible.windows.win_shell: |\n    $port = (Get-Item -LiteralPath WSMan:\\localhost\\Client\\DefaultPorts\\HTTP).Value\n    $onlinePorts = @(Get-ChildItem -LiteralPath WSMan:\\localhost\\Listener |\n        Where-Object { 'Transport=HTTP' -in $_.Keys } |\n        Get-ChildItem |\n        Where-Object Name -eq Port |\n        Select-Object -ExpandProperty Value)\n\n    if ($port -notin $onlinePorts) {\n        \"The default client port $port is not set up as a WSMan HTTP listener, win_dsc will not work.\"\n    }\n\n- name: Extract zip file\n  ansible.windows.win_dsc:\n    resource_name: Archive\n    Ensure: Present\n    Path: C:\\Temp\\zipfile.zip\n    Destination: C:\\Temp\\Temp2\n\n- name: Install a Windows feature with the WindowsFeature resource\n  ansible.windows.win_dsc:\n    resource_name: WindowsFeature\n    Name: telnet-client\n\n- name: Edit HKCU reg key under specific user\n  ansible.windows.win_dsc:\n    resource_name: Registry\n    Ensure: Present\n    Key: HKEY_CURRENT_USER\\ExampleKey\n    ValueName: TestValue\n    ValueData: TestData\n    PsDscRunAsCredential_username: '{{ansible_user}}'\n    PsDscRunAsCredential_password: '{{ansible_password}}'\n  no_log: true\n\n- name: Create file with multiple attributes\n  ansible.windows.win_dsc:\n    resource_name: File\n    DestinationPath: C:\\ansible\\dsc\n    Attributes: # can also be a comma separated string, e.g. 'Hidden, System'\n    - Hidden\n    - System\n    Ensure: Present\n    Type: Directory\n\n- name: Call DSC resource with DateTime option\n  ansible.windows.win_dsc:\n    resource_name: DateTimeResource\n    DateTimeOption: '2019-02-22T13:57:31.2311892+00:00'\n\n# more complex example using custom DSC resource and dict values\n- name: Setup the xWebAdministration module\n  ansible.windows.win_psmodule:\n    name: xWebAdministration\n    state: present\n\n- name: Create IIS Website with Binding and Authentication options\n  ansible.windows.win_dsc:\n    resource_name: xWebsite\n    Ensure: Present\n    Name: DSC Website\n    State: Started\n    PhysicalPath: C:\\inetpub\\wwwroot\n    BindingInfo: # Example of a CimInstance[] DSC parameter (list of dicts)\n    - Protocol: https\n      Port: 1234\n      CertificateStoreName: MY\n      CertificateThumbprint: C676A89018C4D5902353545343634F35E6B3A659\n      HostName: DSCTest\n      IPAddress: '*'\n      SSLFlags: '1'\n    - Protocol: http\n      Port: 4321\n      IPAddress: '*'\n    AuthenticationInfo: # Example of a CimInstance DSC parameter (dict)\n      Anonymous: no\n      Basic: true\n      Digest: false\n      Windows: yes\n",
        "metadata": null,
        "return": {
            "module_version": {
                "description": "The version of the dsc resource/module used.",
                "returned": "always",
                "sample": "1.0.1",
                "type": "str"
            },
            "reboot_required": {
                "description": "Flag returned from the DSC engine indicating whether or not the machine requires a reboot for the invoked changes to take effect.",
                "returned": "always",
                "sample": true,
                "type": "bool"
            },
            "verbose_set": {
                "description": "The verbose output as a list from executing the DSC Set method.",
                "returned": "Ansible verbosity is -vvv or greater and a change occurred",
                "sample": [
                    "Perform operation 'Invoke CimMethod' with the following parameters, ",
                    "[SERVER]: LCM: [Start Set ] [[File]DirectResourceAccess]",
                    "Operation 'Invoke CimMethod' complete."
                ],
                "type": "list"
            },
            "verbose_test": {
                "description": "The verbose output as a list from executing the DSC test method.",
                "returned": "Ansible verbosity is -vvv or greater",
                "sample": [
                    "Perform operation 'Invoke CimMethod' with the following parameters, ",
                    "[SERVER]: LCM: [Start Test ] [[File]DirectResourceAccess]",
                    "Operation 'Invoke CimMethod' complete."
                ],
                "type": "list"
            }
        }
    }
}
