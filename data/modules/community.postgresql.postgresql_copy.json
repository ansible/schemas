{
    "community.postgresql.postgresql_copy": {
        "doc": {
            "author": [
                "Andrew Klychkov (@Andersson007)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Copy data between a file/program and a PostgreSQL table."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_copy.py",
            "has_action": false,
            "module": "postgresql_copy",
            "notes": [
                "Supports PostgreSQL version 9.4+.",
                "COPY command is only allowed to database superusers.",
                "If I(check_mode=yes), we just check the src/dst table availability and return the COPY query that actually has not been executed.",
                "If i(check_mode=yes) and the source has been passed as SQL, the module will execute it and rolled the transaction back but pay attention it can affect database performance (e.g., if SQL collects a lot of data).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "columns": {
                    "aliases": [
                        "column"
                    ],
                    "description": [
                        "List of column names for the src/dst table to COPY FROM/TO."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "copy_from": {
                    "aliases": [
                        "from"
                    ],
                    "description": [
                        "Copy data from a file to a table (appending the data to whatever is in the table already).",
                        "Mutually exclusive with I(copy_to) and I(src)."
                    ],
                    "type": "path"
                },
                "copy_to": {
                    "aliases": [
                        "to"
                    ],
                    "description": [
                        "Copy the contents of a table to a file.",
                        "Can also copy the results of a SELECT query.",
                        "Mutually exclusive with I(copy_from) and I(dst)."
                    ],
                    "type": "path"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of database to connect to."
                    ],
                    "type": "str"
                },
                "dst": {
                    "aliases": [
                        "destination"
                    ],
                    "description": [
                        "Copy data to I(dst=tablename) from I(copy_from=/path/to/data.file).",
                        "Used with I(copy_from) only."
                    ],
                    "type": "str"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "options": {
                    "description": [
                        "Options of COPY command.",
                        "See the full list of available options U(https://www.postgresql.org/docs/current/sql-copy.html)."
                    ],
                    "type": "dict"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "program": {
                    "default": false,
                    "description": [
                        "Mark I(src)/I(dst) as a program. Data will be copied to/from a program.",
                        "See block Examples and PROGRAM arg description U(https://www.postgresql.org/docs/current/sql-copy.html)."
                    ],
                    "type": "bool"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "src": {
                    "aliases": [
                        "source"
                    ],
                    "description": [
                        "Copy data from I(copy_from) to I(src=tablename).",
                        "Used with I(copy_to) only."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters are potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "description": "Complete reference of the COPY command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-copy.html",
                    "name": "COPY command reference"
                }
            ],
            "short_description": "Copy data between a file/program and a PostgreSQL table"
        },
        "examples": "\n- name: Copy text TAB-separated data from file /tmp/data.txt to acme table\n  community.postgresql.postgresql_copy:\n    copy_from: /tmp/data.txt\n    dst: acme\n\n- name: Copy CSV (comma-separated) data from file /tmp/data.csv to columns id, name of table acme\n  community.postgresql.postgresql_copy:\n    copy_from: /tmp/data.csv\n    dst: acme\n    columns: id,name\n    options:\n      format: csv\n\n- name: >\n    Copy text vertical-bar-separated data from file /tmp/data.txt to bar table.\n    The NULL values are specified as N\n  community.postgresql.postgresql_copy:\n    copy_from: /tmp/data.csv\n    dst: bar\n    options:\n      delimiter: '|'\n      null: 'N'\n\n- name: Copy data from acme table to file /tmp/data.txt in text format, TAB-separated\n  community.postgresql.postgresql_copy:\n    src: acme\n    copy_to: /tmp/data.txt\n\n- name: Copy data from SELECT query to/tmp/data.csv in CSV format\n  community.postgresql.postgresql_copy:\n    src: 'SELECT * FROM acme'\n    copy_to: /tmp/data.csv\n    options:\n      format: csv\n\n- name: Copy CSV data from my_table to gzip\n  community.postgresql.postgresql_copy:\n    src: my_table\n    copy_to: 'gzip > /tmp/data.csv.gz'\n    program: yes\n    options:\n      format: csv\n\n- name: >\n    Copy data from columns id, name of table bar to /tmp/data.txt.\n    Output format is text, vertical-bar-separated, NULL as N\n  community.postgresql.postgresql_copy:\n    src: bar\n    columns:\n    - id\n    - name\n    copy_to: /tmp/data.csv\n    options:\n      delimiter: '|'\n      null: 'N'\n",
        "metadata": null,
        "return": {
            "dst": {
                "description": "Data destination.",
                "returned": "always",
                "sample": "/tmp/data.csv",
                "type": "str"
            },
            "queries": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "COPY test_table FROM '/tmp/data_file.txt' (FORMAT csv, DELIMITER ',', NULL 'NULL')"
                ],
                "type": "str"
            },
            "src": {
                "description": "Data source.",
                "returned": "always",
                "sample": "mytable",
                "type": "str"
            }
        }
    }
}
