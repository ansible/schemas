{
    "openstack.cloud.os_coe_cluster_template": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Add or Remove COE cluster template from the OpenStack Container Infra service."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/coe_cluster_template.py",
            "has_action": false,
            "module": "coe_cluster_template",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "coe": {
                    "choices": [
                        "kubernetes",
                        "swarm",
                        "mesos"
                    ],
                    "description": [
                        "The Container Orchestration Engine for this clustertemplate"
                    ],
                    "required": true,
                    "type": "str"
                },
                "dns_nameserver": {
                    "default": "8.8.8.8",
                    "description": [
                        "The DNS nameserver address"
                    ],
                    "type": "str"
                },
                "docker_storage_driver": {
                    "choices": [
                        "devicemapper",
                        "overlay",
                        "overlay2"
                    ],
                    "description": [
                        "Docker storage driver"
                    ],
                    "type": "str"
                },
                "docker_volume_size": {
                    "description": [
                        "The size in GB of the docker volume"
                    ],
                    "type": "int"
                },
                "external_network_id": {
                    "description": [
                        "The external network to attach to the Cluster"
                    ],
                    "type": "str"
                },
                "fixed_network": {
                    "description": [
                        "The fixed network name to attach to the Cluster"
                    ],
                    "type": "str"
                },
                "fixed_subnet": {
                    "description": [
                        "The fixed subnet name to attach to the Cluster"
                    ],
                    "type": "str"
                },
                "flavor_id": {
                    "description": [
                        "The flavor of the minion node for this ClusterTemplate"
                    ],
                    "type": "str"
                },
                "floating_ip_enabled": {
                    "default": true,
                    "description": [
                        "Indicates whether created clusters should have a floating ip or not"
                    ],
                    "type": "bool"
                },
                "http_proxy": {
                    "description": [
                        "Address of a proxy that will receive all HTTP requests and relay them The format is a URL including a port number"
                    ],
                    "type": "str"
                },
                "https_proxy": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them. The format is a URL including a port number"
                    ],
                    "type": "str"
                },
                "image_id": {
                    "description": [
                        "Image id the cluster will be based on"
                    ],
                    "required": true,
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "keypair_id": {
                    "description": [
                        "Name or ID of the keypair to use."
                    ],
                    "type": "str"
                },
                "labels": {
                    "description": [
                        "One or more key/value pairs"
                    ],
                    "type": "raw"
                },
                "master_flavor_id": {
                    "description": [
                        "The flavor of the master node for this ClusterTemplate"
                    ],
                    "type": "str"
                },
                "master_lb_enabled": {
                    "default": "no",
                    "description": [
                        "Indicates whether created clusters should have a load balancer for master nodes or not"
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "Name that has to be given to the cluster template"
                    ],
                    "required": true,
                    "type": "str"
                },
                "network_driver": {
                    "choices": [
                        "flannel",
                        "calico",
                        "docker"
                    ],
                    "description": [
                        "The name of the driver used for instantiating container networks"
                    ],
                    "type": "str"
                },
                "no_proxy": {
                    "description": [
                        "A comma separated list of IPs for which proxies should not be used in the cluster"
                    ],
                    "type": "str"
                },
                "public": {
                    "default": "no",
                    "description": [
                        "Indicates whether the ClusterTemplate is public or not"
                    ],
                    "type": "bool"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "registry_enabled": {
                    "default": "no",
                    "description": [
                        "Indicates whether the docker registry is enabled"
                    ],
                    "type": "bool"
                },
                "server_type": {
                    "choices": [
                        "vm",
                        "bm"
                    ],
                    "default": "vm",
                    "description": [
                        "Server type for this ClusterTemplate"
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Indicate desired state of the resource."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "How long should ansible wait for the requested resource."
                    ],
                    "type": "int"
                },
                "tls_disabled": {
                    "default": "no",
                    "description": [
                        "Indicates whether the TLS should be disabled"
                    ],
                    "type": "bool"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "volume_driver": {
                    "choices": [
                        "cinder",
                        "rexray"
                    ],
                    "description": [
                        "The name of the driver used for instantiating container volumes"
                    ],
                    "type": "str"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Add/Remove COE cluster template from OpenStack Cloud"
        },
        "examples": "\n# Create a new Kubernetes cluster template\n- openstack.cloud.coe_cluster_template:\n    name: k8s\n    coe: kubernetes\n    keypair_id: mykey\n    image_id: 2a8c9888-9054-4b06-a1ca-2bb61f9adb72\n    public: no\n",
        "metadata": null,
        "return": {
            "cluster_template": {
                "contains": {
                    "coe": {
                        "description": "The Container Orchestration Engine for this clustertemplate",
                        "sample": "kubernetes",
                        "type": "str"
                    },
                    "dns_nameserver": {
                        "description": "The DNS nameserver address",
                        "sample": "8.8.8.8",
                        "type": "str"
                    },
                    "docker_storage_driver": {
                        "description": "Docker storage driver",
                        "sample": "devicemapper",
                        "type": "str"
                    },
                    "docker_volume_size": {
                        "description": "The size in GB of the docker volume",
                        "sample": 5,
                        "type": "int"
                    },
                    "external_network_id": {
                        "description": "The external network to attach to the Cluster",
                        "sample": "public",
                        "type": "str"
                    },
                    "fixed_network": {
                        "description": "The fixed network name to attach to the Cluster",
                        "sample": "07767ec6-85f5-44cb-bd63-242a8e7f0d9d",
                        "type": "str"
                    },
                    "fixed_subnet": {
                        "description": [
                            "The fixed subnet name to attach to the Cluster"
                        ],
                        "sample": "05567ec6-85f5-44cb-bd63-242a8e7f0d9d",
                        "type": "str"
                    },
                    "flavor_id": {
                        "description": [
                            "The flavor of the minion node for this ClusterTemplate"
                        ],
                        "sample": "c1.c1r1",
                        "type": "str"
                    },
                    "floating_ip_enabled": {
                        "description": [
                            "Indicates whether created clusters should have a floating ip or not"
                        ],
                        "sample": true,
                        "type": "bool"
                    },
                    "http_proxy": {
                        "description": [
                            "Address of a proxy that will receive all HTTP requests and relay them The format is a URL including a port number"
                        ],
                        "sample": "http://10.0.0.11:9090",
                        "type": "str"
                    },
                    "https_proxy": {
                        "description": [
                            "Address of a proxy that will receive all HTTPS requests and relay them. The format is a URL including a port number"
                        ],
                        "sample": "https://10.0.0.10:8443",
                        "type": "str"
                    },
                    "image_id": {
                        "description": [
                            "Image id the cluster will be based on"
                        ],
                        "sample": "05567ec6-85f5-44cb-bd63-242a8e7f0e9d",
                        "type": "str"
                    },
                    "keypair_id": {
                        "description": [
                            "Name or ID of the keypair to use."
                        ],
                        "sample": "mykey",
                        "type": "str"
                    },
                    "labels": {
                        "description": "One or more key/value pairs",
                        "sample": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "type": "dict"
                    },
                    "master_flavor_id": {
                        "description": [
                            "The flavor of the master node for this ClusterTemplate"
                        ],
                        "sample": "c1.c1r1",
                        "type": "str"
                    },
                    "master_lb_enabled": {
                        "description": [
                            "Indicates whether created clusters should have a load balancer for master nodes or not"
                        ],
                        "sample": true,
                        "type": "bool"
                    },
                    "name": {
                        "description": [
                            "Name that has to be given to the cluster template"
                        ],
                        "sample": "k8scluster",
                        "type": "str"
                    },
                    "network_driver": {
                        "description": [
                            "The name of the driver used for instantiating container networks"
                        ],
                        "sample": "calico",
                        "type": "str"
                    },
                    "no_proxy": {
                        "description": [
                            "A comma separated list of IPs for which proxies should not be used in the cluster"
                        ],
                        "sample": "10.0.0.4,10.0.0.5",
                        "type": "str"
                    },
                    "public": {
                        "description": [
                            "Indicates whether the ClusterTemplate is public or not"
                        ],
                        "sample": false,
                        "type": "bool"
                    },
                    "registry_enabled": {
                        "description": [
                            "Indicates whether the docker registry is enabled"
                        ],
                        "sample": false,
                        "type": "bool"
                    },
                    "server_type": {
                        "description": [
                            "Server type for this ClusterTemplate"
                        ],
                        "sample": "vm",
                        "type": "str"
                    },
                    "tls_disabled": {
                        "description": [
                            "Indicates whether the TLS should be disabled"
                        ],
                        "sample": false,
                        "type": "bool"
                    },
                    "volume_driver": {
                        "description": [
                            "The name of the driver used for instantiating container volumes"
                        ],
                        "sample": "cinder",
                        "type": "str"
                    }
                },
                "description": "Dictionary describing the template.",
                "returned": "On success when I(state) is 'present'",
                "type": "complex"
            },
            "id": {
                "description": "The cluster UUID.",
                "returned": "On success when I(state) is 'present'",
                "sample": "39007a7e-ee4f-4d13-8283-b4da2e037c69",
                "type": "str"
            }
        }
    }
}
