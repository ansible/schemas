{
    "community.general.one_template": {
        "doc": {
            "author": [
                "Georg Gadinger (@nilsding)"
            ],
            "collection": "community.general",
            "description": [
                "Manages OpenNebula templates."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/one_template.py",
            "has_action": false,
            "module": "one_template",
            "notes": [
                "Supports C(check_mode).  Note that check mode always returns C(changed=true) for existing templates, even if the template would not actually change."
            ],
            "options": {
                "api_password": {
                    "aliases": [
                        "api_token"
                    ],
                    "description": [
                        "The password or token for XMLRPC authentication.",
                        "If not specified then the value of the ONE_PASSWORD environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "api_url": {
                    "aliases": [
                        "api_endpoint"
                    ],
                    "description": [
                        "The ENDPOINT URL of the XMLRPC server.",
                        "If not specified then the value of the ONE_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "api_username": {
                    "description": [
                        "The name of the user for XMLRPC authentication.",
                        "If not specified then the value of the ONE_USERNAME environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "id": {
                    "description": [
                        "A I(id) of the template you would like to manage.  If not set then a",
                        "new template will be created with the given I(name)."
                    ],
                    "type": "int"
                },
                "name": {
                    "description": [
                        "A I(name) of the template you would like to manage.  If a template with",
                        "the given name does not exist it will be created, otherwise it will be",
                        "managed by this module."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "C(present) - state that is used to manage the template.",
                        "C(absent) - delete the template."
                    ],
                    "type": "str"
                },
                "template": {
                    "description": [
                        "A string containing the template contents."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Whether to validate the SSL certificates or not.",
                        "This parameter is ignored if PYTHONHTTPSVERIFY environment variable is used."
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 300,
                    "description": [
                        "Time to wait for the desired state to be reached before timeout, in seconds."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "pyone"
            ],
            "short_description": "Manages OpenNebula templates",
            "version_added": "2.4.0",
            "version_added_collection": "community.general"
        },
        "examples": "\n- name: Fetch the TEMPLATE by id\n  community.general.one_template:\n    id: 6459\n  register: result\n\n- name: Print the TEMPLATE properties\n  ansible.builtin.debug:\n    var: result\n\n- name: Fetch the TEMPLATE by name\n  community.general.one_template:\n    name: tf-prd-users-workerredis-p6379a\n  register: result\n\n- name: Create a new or update an existing TEMPLATE\n  community.general.one_template:\n    name: generic-opensuse\n    template: |\n      CONTEXT = [\n        HOSTNAME = \"generic-opensuse\"\n      ]\n      CPU = \"1\"\n      CUSTOM_ATTRIBUTE = \"\"\n      DISK = [\n        CACHE = \"writeback\",\n        DEV_PREFIX = \"sd\",\n        DISCARD = \"unmap\",\n        IMAGE = \"opensuse-leap-15.2\",\n        IMAGE_UNAME = \"oneadmin\",\n        IO = \"threads\",\n        SIZE = \"\" ]\n      MEMORY = \"2048\"\n      NIC = [\n        MODEL = \"virtio\",\n        NETWORK = \"testnet\",\n        NETWORK_UNAME = \"oneadmin\" ]\n      OS = [\n        ARCH = \"x86_64\",\n        BOOT = \"disk0\" ]\n      SCHED_REQUIREMENTS = \"CLUSTER_ID=\\\"100\\\"\"\n      VCPU = \"2\"\n\n- name: Delete the TEMPLATE by id\n  community.general.one_template:\n    id: 6459\n    state: absent\n",
        "metadata": null,
        "return": {
            "group_id": {
                "description": "template's group id",
                "returned": "when I(state=present)",
                "sample": 1,
                "type": "int"
            },
            "group_name": {
                "description": "template's group name",
                "returned": "when I(state=present)",
                "sample": "one-users",
                "type": "str"
            },
            "id": {
                "description": "template id",
                "returned": "when I(state=present)",
                "sample": 153,
                "type": "int"
            },
            "name": {
                "description": "template name",
                "returned": "when I(state=present)",
                "sample": "app1",
                "type": "str"
            },
            "owner_id": {
                "description": "template's owner id",
                "returned": "when I(state=present)",
                "sample": 143,
                "type": "int"
            },
            "owner_name": {
                "description": "template's owner name",
                "returned": "when I(state=present)",
                "sample": "ansible-test",
                "type": "str"
            },
            "template": {
                "description": "the parsed template",
                "returned": "when I(state=present)",
                "type": "dict"
            }
        }
    }
}
