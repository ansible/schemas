{
    "community.general.rax_clb_ssl": {
        "doc": {
            "author": "Ash Wilson (@smashwilson)",
            "collection": "community.general",
            "description": [
                "Set up, reconfigure, or remove SSL termination for an existing load balancer."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/rax_clb_ssl.py",
            "has_action": false,
            "module": "rax_clb_ssl",
            "notes": [
                "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).",
                "C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)",
                "C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file",
                "C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
                "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).",
                "C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)",
                "C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file",
                "C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)"
            ],
            "options": {
                "api_key": {
                    "aliases": [
                        "password"
                    ],
                    "description": [
                        "Rackspace API key, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "auth_endpoint": {
                    "description": [
                        "The URI of the authentication service.",
                        "If not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)"
                    ],
                    "type": "str"
                },
                "certificate": {
                    "description": [
                        "The public SSL certificates as a string in PEM format."
                    ],
                    "type": "str"
                },
                "credentials": {
                    "aliases": [
                        "creds_file"
                    ],
                    "description": [
                        "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided."
                    ],
                    "type": "path"
                },
                "enabled": {
                    "default": true,
                    "description": [
                        "If set to \"false\", temporarily disable SSL termination without discarding",
                        "existing credentials."
                    ],
                    "type": "bool"
                },
                "env": {
                    "description": [
                        "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration)."
                    ],
                    "type": "str"
                },
                "https_redirect": {
                    "description": [
                        "If \"true\", the load balancer will redirect HTTP traffic to HTTPS.",
                        "Requires \"secure_traffic_only\" to be true. Incurs an implicit wait if SSL",
                        "termination is also applied or removed."
                    ],
                    "type": "bool"
                },
                "identity_type": {
                    "default": "rackspace",
                    "description": [
                        "Authentication mechanism to use, such as rackspace or keystone."
                    ],
                    "type": "str"
                },
                "intermediate_certificate": {
                    "description": [
                        "One or more intermediate certificate authorities as a string in PEM",
                        "format, concatenated into a single string."
                    ],
                    "type": "str"
                },
                "loadbalancer": {
                    "description": [
                        "Name or ID of the load balancer on which to manage SSL termination."
                    ],
                    "required": true,
                    "type": "str"
                },
                "private_key": {
                    "description": [
                        "The private SSL key as a string in PEM format."
                    ],
                    "type": "str"
                },
                "region": {
                    "description": [
                        "Region to create an instance in."
                    ],
                    "type": "str"
                },
                "secure_port": {
                    "default": 443,
                    "description": [
                        "The port to listen for secure traffic."
                    ],
                    "type": "int"
                },
                "secure_traffic_only": {
                    "default": false,
                    "description": [
                        "If \"true\", the load balancer will *only* accept secure traffic."
                    ],
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "If set to \"present\", SSL termination will be added to this load balancer.",
                        "If \"absent\", SSL termination will be removed instead."
                    ],
                    "type": "str"
                },
                "tenant_id": {
                    "description": [
                        "The tenant ID used for authentication."
                    ],
                    "type": "str"
                },
                "tenant_name": {
                    "description": [
                        "The tenant name used for authentication."
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Rackspace username, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "description": [
                        "Whether or not to require SSL validation of API endpoints."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": false,
                    "description": [
                        "Wait for the balancer to be in state \"running\" before turning."
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 300,
                    "description": [
                        "How long before \"wait\" gives up, in seconds."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "pyrax",
                "python >= 2.6"
            ],
            "short_description": "Manage SSL termination for a Rackspace Cloud Load Balancer."
        },
        "examples": "\n- name: Enable SSL termination on a load balancer\n  community.general.rax_clb_ssl:\n    loadbalancer: the_loadbalancer\n    state: present\n    private_key: \"{{ lookup('file', 'credentials/server.key' ) }}\"\n    certificate: \"{{ lookup('file', 'credentials/server.crt' ) }}\"\n    intermediate_certificate: \"{{ lookup('file', 'credentials/trust-chain.crt') }}\"\n    secure_traffic_only: true\n    wait: true\n\n- name: Disable SSL termination\n  community.general.rax_clb_ssl:\n    loadbalancer: \"{{ registered_lb.balancer.id }}\"\n    state: absent\n    wait: true\n",
        "metadata": null,
        "return": null
    }
}
