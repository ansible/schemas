{
    "community.postgresql.postgresql_user_obj_stat_info": {
        "doc": {
            "author": [
                "Andrew Klychkov (@Andersson007)",
                "Thomas O'Donnell (@andytom)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Gathers statistics about PostgreSQL user objects."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_user_obj_stat_info.py",
            "has_action": false,
            "module": "postgresql_user_obj_stat_info",
            "notes": [
                "C(size) and C(total_size) returned values are presented in bytes.",
                "For tracking function statistics the PostgreSQL C(track_functions) parameter must be enabled. See U(https://www.postgresql.org/docs/current/runtime-config-statistics.html) for more information.",
                "Supports C(check_mode).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of database to connect."
                    ],
                    "type": "str"
                },
                "filter": {
                    "description": [
                        "Limit the collected information by comma separated string or YAML list.",
                        "Allowable values are C(functions), C(indexes), C(tables).",
                        "By default, collects all subsets.",
                        "Unsupported values are ignored."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "schema": {
                    "description": [
                        "Restrict the output by certain schema."
                    ],
                    "type": "str"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check the value of I(session_role) is potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections via I(session_role) are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "module": "community.postgresql.postgresql_info"
                },
                {
                    "module": "community.postgresql.postgresql_ping"
                },
                {
                    "description": "Complete reference of the PostgreSQL statistics collector documentation.",
                    "link": "https://www.postgresql.org/docs/current/monitoring-stats.html",
                    "name": "PostgreSQL statistics collector reference"
                }
            ],
            "short_description": "Gather statistics about PostgreSQL user objects",
            "version_added": "0.2.0",
            "version_added_collection": "community.postgresql"
        },
        "examples": "\n- name: Collect information about all supported user objects of the acme database\n  community.postgresql.postgresql_user_obj_stat_info:\n    db: acme\n\n- name: Collect information about all supported user objects in the custom schema of the acme database\n  community.postgresql.postgresql_user_obj_stat_info:\n    db: acme\n    schema: custom\n\n- name: Collect information about user tables and indexes in the acme database\n  community.postgresql.postgresql_user_obj_stat_info:\n    db: acme\n    filter: tables, indexes\n",
        "metadata": null,
        "return": {
            "functions": {
                "description": "User function statistics.",
                "returned": "always",
                "sample": {
                    "public": {
                        "inc": {
                            "calls": 1,
                            "funcid": 26722,
                            "self_time": 0.23,
                            "total_time": 0.23
                        }
                    }
                },
                "type": "dict"
            },
            "indexes": {
                "description": "User index statistics.",
                "returned": "always",
                "sample": {
                    "public": {
                        "test_id_idx": {
                            "...": null,
                            "idx_scan": 0,
                            "idx_tup_fetch": 0,
                            "idx_tup_read": 0,
                            "relname": "test",
                            "size": 8192
                        }
                    }
                },
                "type": "dict"
            },
            "tables": {
                "description": "User table statistics.",
                "returned": "always",
                "sample": {
                    "public": {
                        "test": {
                            "...": null,
                            "analyze_count": 3,
                            "n_dead_tup": 0,
                            "n_live_tup": 0,
                            "seq_scan": 2,
                            "size": 0,
                            "total_size": 8192
                        }
                    }
                },
                "type": "dict"
            }
        }
    }
}
