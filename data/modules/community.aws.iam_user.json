{
    "community.aws.iam_user": {
        "doc": {
            "author": "Josh Souza (@joshsouza)",
            "collection": "community.aws",
            "description": [
                "Manage AWS IAM users."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/iam_user.py",
            "has_action": false,
            "module": "iam_user",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "managed_policies": {
                    "aliases": [
                        "managed_policy"
                    ],
                    "description": [
                        "A list of managed policy ARNs or friendly names to attach to the user.",
                        "To embed an inline policy, use M(community.aws.iam_policy)."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "name": {
                    "description": [
                        "The name of the user to create."
                    ],
                    "required": true,
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "purge_policies": {
                    "aliases": [
                        "purge_policy",
                        "purge_managed_policies"
                    ],
                    "default": false,
                    "description": [
                        "When I(purge_policies=true) any managed policies not listed in I(managed_policies) will be detatched."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": [
                        "Create or remove the IAM user."
                    ],
                    "required": true,
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "python >= 2.6"
            ],
            "short_description": "Manage AWS IAM users",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n# Note: This module does not allow management of groups that users belong to.\n#       Groups should manage their membership directly using `iam_group`,\n#       as users belong to them.\n\n- name: Create a user\n  community.aws.iam_user:\n    name: testuser1\n    state: present\n\n- name: Create a user and attach a managed policy using its ARN\n  community.aws.iam_user:\n    name: testuser1\n    managed_policies:\n      - arn:aws:iam::aws:policy/AmazonSNSFullAccess\n    state: present\n\n- name: Remove all managed policies from an existing user with an empty list\n  community.aws.iam_user:\n    name: testuser1\n    state: present\n    purge_policies: true\n\n- name: Delete the user\n  community.aws.iam_user:\n    name: testuser1\n    state: absent\n\n",
        "metadata": null,
        "return": {
            "user": {
                "contains": {
                    "arn": {
                        "description": "the Amazon Resource Name (ARN) specifying the user",
                        "sample": "arn:aws:iam::1234567890:user/testuser1",
                        "type": "str"
                    },
                    "create_date": {
                        "description": "the date and time, in ISO 8601 date-time format, when the user was created",
                        "sample": "2017-02-08T04:36:28+00:00",
                        "type": "str"
                    },
                    "path": {
                        "description": "the path to the user",
                        "sample": "/",
                        "type": "str"
                    },
                    "user_id": {
                        "description": "the stable and unique string identifying the user",
                        "sample": "AGPAIDBWE12NSFINE55TM",
                        "type": "str"
                    },
                    "user_name": {
                        "description": "the friendly name that identifies the user",
                        "sample": "testuser1",
                        "type": "str"
                    }
                },
                "description": "dictionary containing all the user information",
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
