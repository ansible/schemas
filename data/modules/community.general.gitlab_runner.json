{
    "community.general.gitlab_runner": {
        "doc": {
            "author": [
                "Samy Coenen (@SamyCoenen)",
                "Guillaume Martinez (@Lunik)"
            ],
            "collection": "community.general",
            "description": [
                "Register, update and delete runners with the GitLab API.",
                "All operations are performed using the GitLab API v4.",
                "For details, consult the full API documentation at U(https://docs.gitlab.com/ee/api/runners.html).",
                "A valid private API token is required for all operations. You can create as many tokens as you like using the GitLab web interface at U(https://$GITLAB_URL/profile/personal_access_tokens).",
                "A valid registration token is required for registering a new runner. To create shared runners, you need to ask your administrator to give you this token. It can be found at U(https://$GITLAB_URL/admin/runners/)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/gitlab_runner.py",
            "has_action": false,
            "module": "gitlab_runner",
            "notes": [
                "To create a new runner at least the C(api_token), C(description) and C(api_url) options are required.",
                "Runners need to have unique descriptions."
            ],
            "options": {
                "access_level": {
                    "choices": [
                        "ref_protected",
                        "not_protected"
                    ],
                    "default": "ref_protected",
                    "description": [
                        "Determines if a runner can pick up jobs from protected branches."
                    ],
                    "required": false,
                    "type": "str"
                },
                "active": {
                    "default": true,
                    "description": [
                        "Define if the runners is immediately active after creation."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "api_password": {
                    "description": [
                        "The password to use for authentication against the API"
                    ],
                    "type": "str"
                },
                "api_token": {
                    "description": [
                        "Your private token to interact with the GitLab API."
                    ],
                    "type": "str"
                },
                "api_url": {
                    "description": [
                        "The resolvable endpoint for the API"
                    ],
                    "type": "str"
                },
                "api_username": {
                    "description": [
                        "The username to use for authentication against the API"
                    ],
                    "type": "str"
                },
                "description": {
                    "aliases": [
                        "name"
                    ],
                    "description": [
                        "The unique name of the runner."
                    ],
                    "required": true,
                    "type": "str"
                },
                "locked": {
                    "default": false,
                    "description": [
                        "Determines if the runner is locked or not."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "maximum_timeout": {
                    "default": 3600,
                    "description": [
                        "The maximum timeout that a runner has to pick up a specific job."
                    ],
                    "required": false,
                    "type": "int"
                },
                "owned": {
                    "default": false,
                    "description": [
                        "Searches only runners available to the user when searching for existing, when false admin token required."
                    ],
                    "type": "bool",
                    "version_added": "2.0.0",
                    "version_added_collection": "community.general"
                },
                "registration_token": {
                    "description": [
                        "The registration token is used to register new runners.",
                        "Required if I(state) is C(present)."
                    ],
                    "type": "str"
                },
                "run_untagged": {
                    "default": true,
                    "description": [
                        "Run untagged jobs or not."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Make sure that the runner with the same name exists with the same configuration or delete the runner with the same name."
                    ],
                    "required": false,
                    "type": "str"
                },
                "tag_list": {
                    "default": [],
                    "description": "The tags that apply to the runner.",
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Whether or not to validate SSL certs when supplying a https endpoint."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.7",
                "python-gitlab >= 1.5.0"
            ],
            "short_description": "Create, modify and delete GitLab Runners."
        },
        "examples": "\n- name: \"Register runner\"\n  community.general.gitlab_runner:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    registration_token: 4gfdsg345\n    description: Docker Machine t1\n    state: present\n    active: True\n    tag_list: ['docker']\n    run_untagged: False\n    locked: False\n\n- name: \"Delete runner\"\n  community.general.gitlab_runner:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    description: Docker Machine t1\n    state: absent\n\n- name: Delete an owned runner as a non-admin\n  community.general.gitlab_runner:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    description: Docker Machine t1\n    owned: yes\n    state: absent\n",
        "metadata": null,
        "return": {
            "error": {
                "description": "the error message returned by the GitLab API",
                "returned": "failed",
                "sample": "400: path is already in use",
                "type": "str"
            },
            "msg": {
                "description": "Success or failure message",
                "returned": "always",
                "sample": "Success",
                "type": "str"
            },
            "result": {
                "description": "json parsed response from the server",
                "returned": "always",
                "type": "dict"
            },
            "runner": {
                "description": "API object",
                "returned": "always",
                "type": "dict"
            }
        }
    }
}
