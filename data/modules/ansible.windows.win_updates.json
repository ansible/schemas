{
    "ansible.windows.win_updates": {
        "doc": {
            "author": [
                "Matt Davis (@nitzmahone)"
            ],
            "collection": "ansible.windows",
            "description": [
                "Searches, downloads, and installs Windows updates synchronously by automating the Windows Update client."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ansible/windows/plugins/modules/win_updates.py",
            "has_action": true,
            "module": "win_updates",
            "notes": [
                "M(ansible.windows.win_updates) must be run by a user with membership in the local Administrators group.",
                "M(ansible.windows.win_updates) will use the default update service configured for the machine (Windows Update, Microsoft Update, WSUS, etc).",
                "M(ansible.windows.win_updates) will I(become) SYSTEM using I(runas) unless C(use_scheduled_task) is C(yes)",
                "By default M(ansible.windows.win_updates) does not manage reboots, but will signal when a reboot is required with the I(reboot_required) return value. I(reboot) can be used to reboot the host if required in the one task.",
                "M(ansible.windows.win_updates) can take a significant amount of time to complete (hours, in some cases). Performance depends on many factors, including OS version, number of updates, system load, and update server load.",
                "Beware that just after M(ansible.windows.win_updates) reboots the system, the Windows system may not have settled yet and some base services could be in limbo. This can result in unexpected behavior. Check the examples for ways to mitigate this.",
                "More information about PowerShell and how it handles RegEx strings can be found at U(https://technet.microsoft.com/en-us/library/2007.11.powershell.aspx).",
                "The current module doesn't support Systems Center Configuration Manager (SCCM). See L(https://github.com/ansible-collections/ansible.windows/issues/194)"
            ],
            "options": {
                "blacklist": {
                    "description": [
                        "A list of update titles or KB numbers that can be used to specify which updates are to be excluded from installation.",
                        "If an available update does match one of the entries, then it is skipped and not installed.",
                        "Each entry can either be the KB article or Update title as a regex according to the PowerShell regex rules."
                    ],
                    "type": "list"
                },
                "category_names": {
                    "default": [
                        "CriticalUpdates",
                        "SecurityUpdates",
                        "UpdateRollups"
                    ],
                    "description": [
                        "A scalar or list of categories to install updates from. To get the list of categories, run the module with C(state=searched). The category must be the full category string, but is case insensitive.",
                        "Some possible categories are Application, Connectors, Critical Updates, Definition Updates, Developer Kits, Feature Packs, Guidance, Security Updates, Service Packs, Tools, Update Rollups, Updates, and Upgrades."
                    ],
                    "type": "list"
                },
                "log_path": {
                    "description": [
                        "If set, C(win_updates) will append update progress to the specified file. The directory must already exist."
                    ],
                    "type": "path"
                },
                "reboot": {
                    "default": false,
                    "description": [
                        "Ansible will automatically reboot the remote host if it is required and continue to install updates after the reboot.",
                        "This can be used instead of using a M(ansible.windows.win_reboot) task after this one and ensures all updates for that category is installed in one go.",
                        "Async does not work when C(reboot=yes)."
                    ],
                    "type": "bool"
                },
                "reboot_timeout": {
                    "default": 1200,
                    "description": [
                        "The time in seconds to wait until the host is back online from a reboot.",
                        "This is only used if C(reboot=yes) and a reboot is required."
                    ]
                },
                "server_selection": {
                    "choices": [
                        "default",
                        "managed_server",
                        "windows_update"
                    ],
                    "default": "default",
                    "description": [
                        "Defines the Windows Update source catalog.",
                        "C(default) Use the default search source. For many systems default is set to the Microsoft Windows Update catalog. Systems participating in Windows Server Update Services (WSUS) or similar corporate update server environments may default to those managed update sources instead of the Windows Update catalog.",
                        "C(managed_server) Use a managed server catalog. For environments utilizing Windows Server Update Services (WSUS) or similar corporate update servers, this option selects the defined corporate update source.",
                        "C(windows_update) Use the Microsoft Windows Update catalog."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "installed",
                        "searched",
                        "downloaded"
                    ],
                    "default": "installed",
                    "description": [
                        "Controls whether found updates are downloaded or installed or listed",
                        "This module also supports Ansible check mode, which has the same effect as setting state=searched"
                    ],
                    "type": "str"
                },
                "use_scheduled_task": {
                    "default": false,
                    "description": [
                        "Will not auto elevate the remote process with I(become) and use a scheduled task instead.",
                        "Set this to C(yes) when using this module with async on Server 2008, 2008 R2, or Windows 7, or on Server 2008 that is not authenticated with basic or credssp.",
                        "Can also be set to C(yes) on newer hosts where become does not work due to further privilege restrictions from the OS defaults."
                    ],
                    "type": "bool"
                },
                "whitelist": {
                    "description": [
                        "A list of update titles or KB numbers that can be used to specify which updates are to be searched or installed.",
                        "If an available update does not match one of the entries, then it is skipped and not installed.",
                        "Each entry can either be the KB article or Update title as a regex according to the PowerShell regex rules.",
                        "The whitelist is only validated on updates that were found based on I(category_names). It will not force the module to install an update if it was not in the category specified."
                    ],
                    "type": "list"
                }
            },
            "seealso": [
                {
                    "module": "chocolatey.chocolatey.win_chocolatey"
                },
                {
                    "module": "ansible.windows.win_feature"
                },
                {
                    "module": "community.windows.win_hotfix"
                },
                {
                    "module": "ansible.windows.win_package"
                }
            ],
            "short_description": "Download and install Windows updates"
        },
        "examples": "\n- name: Install all security, critical, and rollup updates without a scheduled task\n  ansible.windows.win_updates:\n    category_names:\n      - SecurityUpdates\n      - CriticalUpdates\n      - UpdateRollups\n\n- name: Install only security updates as a scheduled task for Server 2008\n  ansible.windows.win_updates:\n    category_names: SecurityUpdates\n    use_scheduled_task: yes\n\n- name: Search-only, return list of found updates (if any), log to C:\\ansible_wu.txt\n  ansible.windows.win_updates:\n    category_names: SecurityUpdates\n    state: searched\n    log_path: C:\\ansible_wu.txt\n\n- name: Install all security updates with automatic reboots\n  ansible.windows.win_updates:\n    category_names:\n    - SecurityUpdates\n    reboot: yes\n\n- name: Install only particular updates based on the KB numbers\n  ansible.windows.win_updates:\n    category_name:\n    - SecurityUpdates\n    whitelist:\n    - KB4056892\n    - KB4073117\n\n- name: Exclude updates based on the update title\n  ansible.windows.win_updates:\n    category_name:\n    - SecurityUpdates\n    - CriticalUpdates\n    blacklist:\n    - Windows Malicious Software Removal Tool for Windows\n    - \\d{4}-\\d{2} Cumulative Update for Windows Server 2016\n\n# One way to ensure the system is reliable just after a reboot, is to set WinRM to a delayed startup\n- name: Ensure WinRM starts when the system has settled and is ready to work reliably\n  ansible.windows.win_service:\n    name: WinRM\n    start_mode: delayed\n\n# Optionally, you can increase the reboot_timeout to survive long updates during reboot\n- name: Ensure we wait long enough for the updates to be applied during reboot\n  ansible.windows.win_updates:\n    reboot: yes\n    reboot_timeout: 3600\n\n# Search and download Windows updates\n- name: Search and download Windows updates without installing them\n  ansible.windows.win_updates:\n    state: downloaded\n",
        "metadata": null,
        "return": {
            "failed_update_count": {
                "description": "The number of updates that failed to install.",
                "returned": "always",
                "sample": 0,
                "type": "int"
            },
            "filtered_updates": {
                "contains": {
                    "filtered_reason": {
                        "description": "The reason why this update was filtered.",
                        "returned": "always",
                        "sample": "skip_hidden",
                        "type": "str"
                    }
                },
                "description": "List of updates that were found but were filtered based on I(blacklist), I(whitelist) or I(category_names). The return value is in the same form as I(updates), along with I(filtered_reason).",
                "returned": "success",
                "sample": "see the updates return value",
                "type": "complex"
            },
            "found_update_count": {
                "description": "The number of updates found needing to be applied.",
                "returned": "success",
                "sample": 3,
                "type": "int"
            },
            "installed_update_count": {
                "description": "The number of updates successfully installed or downloaded.",
                "returned": "success",
                "sample": 2,
                "type": "int"
            },
            "reboot_required": {
                "description": "True when the target server requires a reboot to complete updates (no further updates can be installed until after a reboot).",
                "returned": "success",
                "sample": true,
                "type": "bool"
            },
            "updates": {
                "contains": {
                    "categories": {
                        "description": "A list of category strings for this update.",
                        "elements": "str",
                        "returned": "always",
                        "sample": [
                            "Critical Updates",
                            "Windows Server 2012 R2"
                        ],
                        "type": "list"
                    },
                    "failure_hresult_code": {
                        "description": "The HRESULT code from a failed update.",
                        "returned": "on install failure",
                        "sample": 2147942402,
                        "type": "bool"
                    },
                    "id": {
                        "description": "Internal Windows Update GUID.",
                        "returned": "always",
                        "sample": "fb95c1c8-de23-4089-ae29-fd3351d55421",
                        "type": "str"
                    },
                    "installed": {
                        "description": "Was the update successfully installed.",
                        "returned": "always",
                        "sample": true,
                        "type": "bool"
                    },
                    "kb": {
                        "description": "A list of KB article IDs that apply to the update.",
                        "elements": "str",
                        "returned": "always",
                        "sample": [
                            "3004365"
                        ],
                        "type": "list"
                    },
                    "title": {
                        "description": "Display name.",
                        "returned": "always",
                        "sample": "Security Update for Windows Server 2012 R2 (KB3004365)",
                        "type": "str"
                    }
                },
                "description": "List of updates that were found/installed.",
                "returned": "success",
                "sample": null,
                "type": "complex"
            }
        }
    }
}
