{
    "cisco.aci.aci_static_binding_to_epg": {
        "doc": {
            "author": [
                "Bruno Calogero (@brunocalogero)"
            ],
            "collection": "cisco.aci",
            "description": [
                "Bind static paths to EPGs on Cisco ACI fabrics."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/aci/plugins/modules/aci_static_binding_to_epg.py",
            "has_action": false,
            "module": "aci_static_binding_to_epg",
            "notes": [
                "The C(tenant), C(ap), C(epg) used must exist before using this module in your playbook. The M(cisco.aci.aci_tenant), M(cisco.aci.aci_ap), M(cisco.aci.aci_epg) modules can be used for this."
            ],
            "options": {
                "annotation": {
                    "description": [
                        "User-defined string for annotating an object.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_ANNOTATION) will be used instead."
                    ],
                    "type": "str"
                },
                "ap": {
                    "aliases": [
                        "app_profile",
                        "app_profile_name"
                    ],
                    "description": [
                        "Name of an existing application network profile, that will contain the EPGs."
                    ],
                    "type": "str"
                },
                "certificate_name": {
                    "aliases": [
                        "cert_name"
                    ],
                    "description": [
                        "The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.",
                        "If a C(private_key) filename was provided, this defaults to the C(private_key) basename, without extension.",
                        "If PEM-formatted content was provided for C(private_key), this defaults to the C(username) value.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_CERTIFICATE_NAME) will be used instead."
                    ],
                    "type": "str"
                },
                "deploy_immediacy": {
                    "choices": [
                        "immediate",
                        "lazy"
                    ],
                    "description": [
                        "The Deployment Immediacy of Static EPG on PC, VPC or Interface.",
                        "The APIC defaults to C(lazy) when unset during creation."
                    ],
                    "type": "str"
                },
                "description": {
                    "aliases": [
                        "descr"
                    ],
                    "description": [
                        "Description for the static path to EPG binding."
                    ],
                    "type": "str"
                },
                "encap_id": {
                    "aliases": [
                        "vlan",
                        "vlan_id"
                    ],
                    "description": [
                        "The encapsulation ID associating the C(epg) with the interface path.",
                        "This acts as the secondary C(encap_id) when using micro-segmentation.",
                        "Accepted values are any valid encap ID for specified encap, currently ranges between C(1) and C(4096)."
                    ],
                    "type": "int"
                },
                "epg": {
                    "aliases": [
                        "epg_name"
                    ],
                    "description": [
                        "The name of the end point group."
                    ],
                    "type": "str"
                },
                "extpaths": {
                    "description": [
                        "The C(extpaths) integer value part of the tDn.",
                        "C(extpaths) is only used if C(interface_type) is C(fex).",
                        "Usually something like C(1011)."
                    ],
                    "type": "int"
                },
                "host": {
                    "aliases": [
                        "hostname"
                    ],
                    "description": [
                        "IP Address or hostname of APIC resolvable by Ansible control host.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_HOST) will be used instead."
                    ],
                    "required": true,
                    "type": "str"
                },
                "interface": {
                    "description": [
                        "The C(interface) string value part of the tDn.",
                        "Usually a policy group like C(test-IntPolGrp) or an interface of the following format C(1/7) depending on C(interface_type)."
                    ],
                    "type": "str"
                },
                "interface_mode": {
                    "aliases": [
                        "interface_mode_name",
                        "mode"
                    ],
                    "choices": [
                        "802.1p",
                        "access",
                        "native",
                        "regular",
                        "tagged",
                        "trunk",
                        "untagged"
                    ],
                    "description": [
                        "Determines how layer 2 tags will be read from and added to frames.",
                        "Values C(802.1p) and C(native) are identical.",
                        "Values C(access) and C(untagged) are identical.",
                        "Values C(regular), C(tagged) and C(trunk) are identical.",
                        "The APIC defaults to C(trunk) when unset during creation."
                    ],
                    "type": "str"
                },
                "interface_type": {
                    "choices": [
                        "fex",
                        "port_channel",
                        "switch_port",
                        "vpc"
                    ],
                    "default": "switch_port",
                    "description": [
                        "The type of interface for the static EPG deployment."
                    ],
                    "type": "str"
                },
                "leafs": {
                    "aliases": [
                        "leaves",
                        "nodes",
                        "paths",
                        "switches"
                    ],
                    "description": [
                        "The switch ID(s) that the C(interface) belongs to.",
                        "When C(interface_type) is C(switch_port), C(port_channel), or C(fex), then C(leafs) is a string of the leaf ID.",
                        "When C(interface_type) is C(vpc), then C(leafs) is a list with both leaf IDs.",
                        "The C(leafs) value is usually something like '101' or '101-102' depending on C(connection_type)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "output_level": {
                    "choices": [
                        "debug",
                        "info",
                        "normal"
                    ],
                    "default": "normal",
                    "description": [
                        "Influence the output of this ACI module.",
                        "C(normal) means the standard output, incl. C(current) dict",
                        "C(info) adds informational output, incl. C(previous), C(proposed) and C(sent) dicts",
                        "C(debug) adds debugging output, incl. C(filter_string), C(method), C(response), C(status) and C(url) information",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OUTPUT_LEVEL) will be used instead."
                    ],
                    "type": "str"
                },
                "output_path": {
                    "description": [
                        "Path to a file that will be used to dump the ACI JSON configuration objects generated by the module.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OUTPUT_PATH) will be used instead."
                    ],
                    "type": "str"
                },
                "owner_key": {
                    "description": [
                        "User-defined string for the ownerKey attribute of an ACI object.",
                        "This attribute represents a key for enabling clients to own their data for entity correlation.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OWNER_KEY) will be used instead."
                    ],
                    "type": "str"
                },
                "owner_tag": {
                    "description": [
                        "User-defined string for the ownerTag attribute of an ACI object.",
                        "This attribute represents a tag for enabling clients to add their own data.",
                        "For example, to indicate who created this object.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OWNER_TAG) will be used instead."
                    ],
                    "type": "str"
                },
                "password": {
                    "description": [
                        "The password to use for authentication.",
                        "This option is mutual exclusive with C(private_key). If C(private_key) is provided too, it will be used instead.",
                        "If the value is not specified in the task, the value of environment variables C(ACI_PASSWORD) or C(ANSIBLE_NET_PASSWORD) will be used instead."
                    ],
                    "type": "str"
                },
                "pod_id": {
                    "aliases": [
                        "pod",
                        "pod_number"
                    ],
                    "description": [
                        "The pod number part of the tDn.",
                        "C(pod_id) is usually an integer below C(10)."
                    ],
                    "type": "int"
                },
                "port": {
                    "description": [
                        "Port number to be used for REST connection.",
                        "The default value depends on parameter C(use_ssl).",
                        "If the value is not specified in the task, the value of environment variable C(ACI_PORT) will be used instead."
                    ],
                    "type": "int"
                },
                "primary_encap_id": {
                    "aliases": [
                        "primary_vlan",
                        "primary_vlan_id"
                    ],
                    "description": [
                        "Determines the primary encapsulation ID associating the C(epg) with the interface path when using micro-segmentation.",
                        "Accepted values are any valid encap ID for specified encap, currently ranges between C(1) and C(4096)."
                    ],
                    "type": "int"
                },
                "private_key": {
                    "aliases": [
                        "cert_key"
                    ],
                    "description": [
                        "Either a PEM-formatted private key file or the private key content used for signature-based authentication.",
                        "This value also influences the default C(certificate_name) that is used.",
                        "This option is mutual exclusive with C(password). If C(password) is provided too, it will be ignored.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_PRIVATE_KEY) will be used instead."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present",
                        "query"
                    ],
                    "default": "present",
                    "description": [
                        "Use C(present) or C(absent) for adding or removing.",
                        "Use C(query) for listing an object or multiple objects."
                    ],
                    "type": "str"
                },
                "tenant": {
                    "aliases": [
                        "tenant_name"
                    ],
                    "description": [
                        "Name of an existing tenant."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 30,
                    "description": [
                        "The socket level timeout in seconds.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_TIMEOUT) will be used instead."
                    ],
                    "type": "int"
                },
                "use_proxy": {
                    "default": true,
                    "description": [
                        "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_USE_PROXY) will be used instead."
                    ],
                    "type": "bool"
                },
                "use_ssl": {
                    "default": true,
                    "description": [
                        "If C(no), an HTTP connection will be used instead of the default HTTPS connection.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_USE_SSL) will be used instead."
                    ],
                    "type": "bool"
                },
                "username": {
                    "aliases": [
                        "user"
                    ],
                    "default": "admin",
                    "description": [
                        "The username to use for authentication.",
                        "If the value is not specified in the task, the value of environment variables C(ACI_USERNAME) or C(ANSIBLE_NET_USERNAME) will be used instead."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "If C(no), SSL certificates will not be validated.",
                        "This should only set to C(no) when used on personally controlled sites using self-signed certificates.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_VALIDATE_CERTS) will be used instead."
                    ],
                    "type": "bool"
                }
            },
            "seealso": [
                {
                    "module": "cisco.aci.aci_tenant"
                },
                {
                    "module": "cisco.aci.aci_ap"
                },
                {
                    "module": "cisco.aci.aci_epg"
                },
                {
                    "description": "More information about the internal APIC class B(fv:RsPathAtt).",
                    "link": "https://developer.cisco.com/docs/apic-mim-ref/",
                    "name": "APIC Management Information Model reference"
                },
                {
                    "description": "Detailed information on how to manage your ACI infrastructure using Ansible.",
                    "ref": "aci_guide"
                },
                {
                    "description": "Detailed guide on how to write your own Cisco ACI modules to contribute.",
                    "ref": "aci_dev_guide"
                }
            ],
            "short_description": "Bind static paths to EPGs (fv:RsPathAtt)"
        },
        "examples": "\n- name: Deploy Static Path binding for given EPG\n  cisco.aci.aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    encap_id: 222\n    deploy_immediacy: lazy\n    interface_mode: untagged\n    interface_type: switch_port\n    pod_id: 1\n    leafs: 101\n    interface: '1/7'\n    state: present\n  delegate_to: localhost\n\n- name: Remove Static Path binding for given EPG\n  cisco.aci.aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    interface_type: switch_port\n    pod: 1\n    leafs: 101\n    interface: '1/7'\n    state: absent\n  delegate_to: localhost\n\n- name: Get specific Static Path binding for given EPG\n  cisco.aci.aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    interface_type: switch_port\n    pod: 1\n    leafs: 101\n    interface: '1/7'\n    state: query\n  delegate_to: localhost\n  register: query_result\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "certified"
        },
        "return": {
            "current": {
                "description": "The existing configuration from the APIC after the module has finished",
                "returned": "success",
                "sample": [
                    {
                        "fvTenant": {
                            "attributes": {
                                "descr": "Production environment",
                                "dn": "uni/tn-production",
                                "name": "production",
                                "nameAlias": "",
                                "ownerKey": "",
                                "ownerTag": ""
                            }
                        }
                    }
                ],
                "type": "list"
            },
            "error": {
                "description": "The error information as returned from the APIC",
                "returned": "failure",
                "sample": {
                    "code": "122",
                    "text": "unknown managed object class foo"
                },
                "type": "dict"
            },
            "filter_string": {
                "description": "The filter string used for the request",
                "returned": "failure or debug",
                "sample": "?rsp-prop-include=config-only",
                "type": "str"
            },
            "method": {
                "description": "The HTTP method used for the request to the APIC",
                "returned": "failure or debug",
                "sample": "POST",
                "type": "str"
            },
            "previous": {
                "description": "The original configuration from the APIC before the module has started",
                "returned": "info",
                "sample": [
                    {
                        "fvTenant": {
                            "attributes": {
                                "descr": "Production",
                                "dn": "uni/tn-production",
                                "name": "production",
                                "nameAlias": "",
                                "ownerKey": "",
                                "ownerTag": ""
                            }
                        }
                    }
                ],
                "type": "list"
            },
            "proposed": {
                "description": "The assembled configuration from the user-provided parameters",
                "returned": "info",
                "sample": {
                    "fvTenant": {
                        "attributes": {
                            "descr": "Production environment",
                            "name": "production"
                        }
                    }
                },
                "type": "dict"
            },
            "raw": {
                "description": "The raw output returned by the APIC REST API (xml or json)",
                "returned": "parse error",
                "sample": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>",
                "type": "str"
            },
            "response": {
                "description": "The HTTP response from the APIC",
                "returned": "failure or debug",
                "sample": "OK (30 bytes)",
                "type": "str"
            },
            "sent": {
                "description": "The actual/minimal configuration pushed to the APIC",
                "returned": "info",
                "sample": {
                    "fvTenant": {
                        "attributes": {
                            "descr": "Production environment"
                        }
                    }
                },
                "type": "list"
            },
            "status": {
                "description": "The HTTP status from the APIC",
                "returned": "failure or debug",
                "sample": 200,
                "type": "int"
            },
            "url": {
                "description": "The HTTP url used for the request to the APIC",
                "returned": "failure or debug",
                "sample": "https://10.11.12.13/api/mo/uni/tn-production.json",
                "type": "str"
            }
        }
    }
}
