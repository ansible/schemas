{
    "community.vmware.vmware_guest_serial_port": {
        "doc": {
            "author": [
                "Anusha Hegde (@anusha94)"
            ],
            "collection": "community.vmware",
            "description": [
                "This module can be used to manage serial ports on an existing VM"
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/community/vmware/plugins/modules/vmware_guest_serial_port.py",
            "has_action": false,
            "module": "vmware_guest_serial_port",
            "options": {
                "backings": {
                    "description": [
                        "A list of backings for serial ports.",
                        "C(backing_type) (str): is required to add or reconfigure or remove an existing serial port.",
                        "Valid attributes are:",
                        " - C(backing_type) (str): Backing type is required for the serial ports to be added or reconfigured or removed.",
                        " - C(state) (str): is required to identify whether we are adding, modifying or removing the serial port. - choices: - C(present): modify an existing serial port. C(backing_type) is required to determine the port. The first matching C(backing_type) and either of C(service_uri) or C(pipe_name) or C(device_name) or C(file_path) will be modified. If there is only one device with a backing type, the secondary details are not needed. We will match the last such device with the given backing type. - C(absent): remove an existing serial port. C(backing_type) is required to determine the port. The first matching C(backing_type) and either of C(service_uri) or C(pipe_name) or C(device_name) or C(file_path) will be removed. If there is only one device with a backing type, the secondary details are not needed. We will match the last such device with the given backing type.",
                        " - C(yield_on_poll) (bool): Enables CPU yield behavior. Default value is true.",
                        " - C(direction) (str): Required when I(backing_type=network). The direction of the connection. - choices: - client - server",
                        " - C(service_uri) (str): Required when I(backing_type=network). Identifies the local host or a system on the network, depending on the value of I(direction). If you use the virtual machine as a server, the URI identifies the host on which the virtual machine runs. In this case, the host name part of the URI should be empty, or it should specify the address of the local host. If you use the virtual machine as a client, the URI identifies the remote system on the network.",
                        " - C(endpoint) (str): Required when I(backing_type=pipe). When you use serial port pipe backing to connect a virtual machine to another process, you must define the endpoints.",
                        " - C(no_rx_loss) (bool): Required when I(backing_type=pipe). Enables optimized data transfer over the pipe. - choices: - client - server",
                        " - C(pipe_name) (str): Required when I(backing_type=pipe).",
                        " - C(device_name) (str): Required when I(backing_type=device).",
                        " - C(file_path) (str): Required when I(backing_type=file). File path for the host file used in this backing. Fully qualified path is required, like <datastore_name>/<file_name>"
                    ],
                    "type": "list"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "moid": {
                    "description": [
                        "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.",
                        "This is required if C(name) or C(uuid) is not supplied."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name of the virtual machine.",
                        "This is a required parameter, if parameter C(uuid) or C(moid) is not supplied."
                    ],
                    "type": "str"
                },
                "password": {
                    "aliases": [
                        "pass",
                        "pwd"
                    ],
                    "description": [
                        "The password of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "port": {
                    "default": 443,
                    "description": [
                        "The port number of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "int"
                },
                "proxy_host": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them.",
                        "The format is a hostname or a IP.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
                        "This feature depends on a version of pyvmomi greater than v6.7.1.2018.12"
                    ],
                    "required": false,
                    "type": "str"
                },
                "proxy_port": {
                    "description": [
                        "Port of the HTTP proxy that will receive all HTTPS requests and relay them.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead."
                    ],
                    "required": false,
                    "type": "int"
                },
                "use_instance_uuid": {
                    "default": false,
                    "description": [
                        "Whether to use the VMware instance UUID rather than the BIOS UUID."
                    ],
                    "type": "bool"
                },
                "username": {
                    "aliases": [
                        "admin",
                        "user"
                    ],
                    "description": [
                        "The username of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "uuid": {
                    "description": [
                        "UUID of the instance to manage the serial ports, this is VMware's unique identifier.",
                        "This is a required parameter, if parameter C(name) or C(moid) is not supplied."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
                        "Environment variable support added in Ansible 2.6.",
                        "If set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine."
                    ],
                    "type": "bool"
                }
            },
            "short_description": "Manage serial ports on an existing VM"
        },
        "examples": "\n# Create serial ports\n- name: Create multiple serial ports with Backing type - network, pipe, device and file\n  community.vmware.vmware_guest_serial_port:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: no\n    name: \"test_vm1\"\n    backings:\n    - type: 'network'\n      direction: 'client'\n      service_uri: 'tcp://6000'\n      yield_on_poll: True\n    - type: 'pipe'\n      pipe_name: 'serial_pipe'\n      endpoint: 'client'\n    - type: 'device'\n      device_name: '/dev/char/serial/uart0'\n    - type: 'file'\n      file_path: '[datastore1]/file1'\n      yield_on_poll:  True\n    register: create_multiple_ports\n\n# Modify existing serial port\n- name: Modify Network backing type\n  community.vmware.vmware_guest_serial_port:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: '{{ name }}'\n    backings:\n    - type: 'network'\n      state: 'present'\n      direction: 'server'\n      service_uri: 'tcp://6000'\n  delegate_to: localhost\n\n# Remove serial port\n- name: Remove pipe backing type\n  community.vmware.vmware_guest_serial_port:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    name: '{{ name }}'\n    backings:\n    - type: 'pipe'\n      state: 'absent'\n  delegate_to: localhost\n\n",
        "metadata": null,
        "return": {
            "serial_port_data": {
                "description": "metadata about the virtual machine's serial ports after managing them",
                "returned": "always",
                "sample": [
                    {
                        "backing_type": "network",
                        "direction": "client",
                        "service_uri": "tcp://6000"
                    },
                    {
                        "backing_type": "pipe",
                        "direction": "server",
                        "pipe_name": "serial pipe"
                    }
                ],
                "type": "dict"
            }
        }
    }
}
