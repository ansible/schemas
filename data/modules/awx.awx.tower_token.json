{
    "awx.awx.tower_token": {
        "doc": {
            "author": "John Westcott IV (@john-westcott-iv)",
            "collection": "awx.awx",
            "description": [
                "Create or destroy Ansible Tower tokens. See U(https://www.ansible.com/tower) for an overview.",
                "In addition, the module sets an Ansible fact which can be passed into other tower_* modules as the parameter tower_oauthtoken. See examples for usage.",
                "Because of the sensitive nature of tokens, the created token value is only available once through the Ansible fact. (See RETURN for details)",
                "Due to the nature of tokens in Tower this module is not idempotent. A second will with the same parameters will create a new token.",
                "If you are creating a temporary token for use with modules you should delete the token when you are done with it. See the example for how to do it."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/awx/awx/plugins/modules/tower_token.py",
            "has_action": false,
            "module": "tower_token",
            "notes": [
                "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your Tower host information.",
                "I(config_file) should contain Tower configuration in the following format host=hostname username=username password=password"
            ],
            "options": {
                "application": {
                    "description": [
                        "The application tied to this token."
                    ],
                    "required": false,
                    "type": "str"
                },
                "description": {
                    "default": "",
                    "description": [
                        "Optional description of this access token."
                    ],
                    "required": false,
                    "type": "str"
                },
                "existing_token": {
                    "description": "The data structure produced from tower_token in create mode to be used with state absent.",
                    "type": "dict"
                },
                "existing_token_id": {
                    "description": "A token ID (number) which can be used to delete an arbitrary token with state absent.",
                    "type": "str"
                },
                "scope": {
                    "choices": [
                        "read",
                        "write"
                    ],
                    "default": "write",
                    "description": [
                        "Allowed scopes, further restricts user's permissions. Must be a simple space-separated string with allowed scopes ['read', 'write']."
                    ],
                    "required": false,
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Desired state of the resource."
                    ],
                    "type": "str"
                },
                "tower_config_file": {
                    "description": [
                        "Path to the Tower or AWX config file.",
                        "If provided, the other locations for config files will not be considered."
                    ],
                    "type": "path"
                },
                "tower_host": {
                    "description": [
                        "URL to your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_HOST) and then config files",
                        "If value not specified by any means, the value of C(127.0.0.1) will be used"
                    ],
                    "type": "str"
                },
                "tower_oauthtoken": {
                    "description": [
                        "The Tower OAuth token to use.",
                        "This value can be in one of two formats.",
                        "A string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)",
                        "A dictionary structure as returned by the tower_token module.",
                        "If value not set, will try environment variable C(TOWER_OAUTH_TOKEN) and then config files"
                    ],
                    "type": "raw",
                    "version_added": "3.7",
                    "version_added_collection": "awx.awx"
                },
                "tower_password": {
                    "description": [
                        "Password for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_PASSWORD) and then config files"
                    ],
                    "type": "str"
                },
                "tower_username": {
                    "description": [
                        "Username for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_USERNAME) and then config files"
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "tower_verify_ssl"
                    ],
                    "description": [
                        "Whether to allow insecure connections to Tower or AWX.",
                        "If C(no), SSL certificates will not be validated.",
                        "This should only be used on personally controlled sites using self-signed certificates.",
                        "If value not set, will try environment variable C(TOWER_VERIFY_SSL) and then config files"
                    ],
                    "type": "bool"
                }
            },
            "short_description": "create, update, or destroy Ansible Tower tokens.",
            "version_added": "2.3",
            "version_added_collection": "awx.awx"
        },
        "examples": "\n- block:\n    - name: Create a new token using an existing token\n      tower_token:\n        description: '{{ token_description }}'\n        scope: \"write\"\n        state: present\n        tower_oauthtoken: \"{{ my_existing_token }}\"\n\n    - name: Delete this token\n      tower_token:\n        existing_token: \"{{ tower_token }}\"\n        state: absent\n\n    - name: Create a new token using username/password\n      tower_token:\n        description: '{{ token_description }}'\n        scope: \"write\"\n        state: present\n        tower_username: \"{{ my_username }}\"\n        tower_password: \"{{ my_password }}\"\n\n    - name: Use our new token to make another call\n      tower_job_list:\n        tower_oauthtoken: \"{{ tower_token }}\"\n\n  always:\n    - name: Delete our Token with the token we created\n      tower_token:\n        existing_token: \"{{ tower_token }}\"\n        state: absent\n      when: tower_token is defined\n\n- name: Delete a token by its id\n  tower_token:\n    existing_token_id: 4\n    state: absent\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": {
            "tower_token": {
                "contains": {
                    "id": {
                        "description": "The numeric ID of the token created",
                        "type": "str"
                    },
                    "token": {
                        "description": "The token that was generated. This token can never be accessed again, make sure this value is noted before it is lost.",
                        "type": "str"
                    }
                },
                "description": "An Ansible Fact variable representing a Tower token object which can be used for auth in subsequent modules. See examples for usage.",
                "returned": "on successful create",
                "type": "dict"
            }
        }
    }
}
