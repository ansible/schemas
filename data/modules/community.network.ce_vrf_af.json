{
    "community.network.ce_vrf_af": {
        "doc": {
            "author": "Yang yang (@QijunPan)",
            "collection": "community.network",
            "description": [
                "Manages VPN instance address family of HUAWEI CloudEngine switches."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/network/plugins/modules/ce_vrf_af.py",
            "has_action": false,
            "module": "ce_vrf_af",
            "notes": [
                "If I(state=absent), the vrf will be removed, regardless of the non-required parameters.",
                "This module requires the netconf system service be enabled on the remote device being managed.",
                "Recommended connection is C(netconf).",
                "This module also works with C(local) connections for legacy playbooks."
            ],
            "options": {
                "evpn": {
                    "default": "no",
                    "description": [
                        "Is extend vpn or normal vpn."
                    ],
                    "type": "bool"
                },
                "route_distinguisher": {
                    "description": [
                        "VPN instance route distinguisher,the RD used to distinguish same route prefix from different vpn. The RD must be setted before setting vpn_target_value."
                    ]
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Manage the state of the af."
                    ]
                },
                "vpn_target_state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": [
                        "Manage the state of the vpn target."
                    ]
                },
                "vpn_target_type": {
                    "choices": [
                        "export_extcommunity",
                        "import_extcommunity"
                    ],
                    "description": [
                        "VPN instance vpn target type."
                    ]
                },
                "vpn_target_value": {
                    "description": [
                        "VPN instance target value. Such as X.X.X.X:number<0-65535> or number<0-65535>:number<0-4294967295> or number<0-65535>.number<0-65535>:number<0-65535> or number<65536-4294967295>:number<0-65535> but not support 0:0 and 0.0:0."
                    ]
                },
                "vrf": {
                    "description": [
                        "VPN instance."
                    ],
                    "required": true
                },
                "vrf_aftype": {
                    "choices": [
                        "v4",
                        "v6"
                    ],
                    "default": "v4",
                    "description": [
                        "VPN instance address family."
                    ]
                }
            },
            "short_description": "Manages VPN instance address family on HUAWEI CloudEngine switches."
        },
        "examples": "\n- name: Vrf af module test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: Config vpna, set address family is ipv4\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Config vpna, delete address family is ipv4\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      state: absent\n      provider: \"{{ cli }}\"\n  - name: Config vpna, set address family is ipv4,rd=1:1,set vpn_target_type=export_extcommunity,vpn_target_value=2:2\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      route_distinguisher: 1:1\n      vpn_target_type: export_extcommunity\n      vpn_target_value: 2:2\n      vpn_target_state: present\n      state: present\n      provider: \"{{ cli }}\"\n  - name: Config vpna, set address family is ipv4,rd=1:1,delete vpn_target_type=export_extcommunity,vpn_target_value=2:2\n    community.network.ce_vrf_af:\n      vrf: vpna\n      vrf_aftype: v4\n      route_distinguisher: 1:1\n      vpn_target_type: export_extcommunity\n      vpn_target_value: 2:2\n      vpn_target_state: absent\n      state: present\n      provider: \"{{ cli }}\"\n",
        "metadata": null,
        "return": {
            "changed": {
                "description": "check to see if a change was made on the device",
                "returned": "always",
                "sample": true,
                "type": "bool"
            },
            "end_state": {
                "description": "k/v pairs of switchport after module execution",
                "returned": "always",
                "sample": {
                    "route_distinguisher": [
                        "1:1",
                        "2:2"
                    ],
                    "vpn_target_type": [
                        "import_extcommunity",
                        "3:3"
                    ],
                    "vpn_target_value": [],
                    "vrf": "vpna",
                    "vrf_aftype": [
                        "ipv4uni",
                        "ipv6uni"
                    ]
                },
                "type": "dict"
            },
            "existing": {
                "description": "k/v pairs of existing switchport",
                "returned": "always",
                "sample": {
                    "route_distinguisher": [
                        "1:1",
                        "2:2"
                    ],
                    "vpn_target_type": [],
                    "vpn_target_value": [],
                    "vrf": "vpna",
                    "vrf_aftype": [
                        "ipv4uni",
                        "ipv6uni"
                    ]
                },
                "type": "dict"
            },
            "proposed": {
                "description": "k/v pairs of parameters passed into module",
                "returned": "always",
                "sample": {
                    "evpn": "none",
                    "state": "present",
                    "vpn_targe_state": "absent",
                    "vpn_target_type": "none",
                    "vpn_target_value": "none",
                    "vrf": "vpna",
                    "vrf_aftype": "v4"
                },
                "type": "dict"
            },
            "updates": {
                "description": "command list sent to the device",
                "returned": "always",
                "sample": [
                    "ip vpn-instance vpna",
                    "vpn-target 3:3 import_extcommunity"
                ],
                "type": "list"
            }
        }
    }
}
