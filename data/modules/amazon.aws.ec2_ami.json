{
    "amazon.aws.ec2_ami": {
        "doc": {
            "author": [
                "Evan Duffield (@scicoin-project) <eduffield@iacquire.com>",
                "Constantin Bugneac (@Constantin07) <constantin.bugneac@endava.com>",
                "Ross Williams (@gunzy83) <gunzy83au@gmail.com>",
                "Willem van Ketwich (@wilvk) <willvk@gmail.com>"
            ],
            "collection": "amazon.aws",
            "description": [
                "Registers or deregisters ec2 images."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/amazon/aws/plugins/modules/ec2_ami.py",
            "has_action": false,
            "module": "ec2_ami",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "architecture": {
                    "default": "x86_64",
                    "description": [
                        "The target architecture of the image to register"
                    ],
                    "type": "str"
                },
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "billing_products": {
                    "description": [
                        "A list of valid billing codes. To be used with valid accounts by aws marketplace vendors."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "delete_snapshot": {
                    "default": false,
                    "description": [
                        "Delete snapshots when deregistering the AMI."
                    ],
                    "type": "bool"
                },
                "description": {
                    "description": [
                        "Human-readable string describing the contents and purpose of the AMI."
                    ],
                    "type": "str"
                },
                "device_mapping": {
                    "description": [
                        "List of device hashes/dictionaries with custom configurations (same block-device-mapping parameters)."
                    ],
                    "elements": "dict",
                    "suboptions": {
                        "delete_on_termination": {
                            "description": "Whether the device should be automatically deleted when the Instance is terminated.",
                            "type": "bool"
                        },
                        "device_name": {
                            "description": "The device name. For example C(/dev/sda).",
                            "type": "str"
                        },
                        "encrypted": {
                            "description": "Whether the volume should be encrypted.",
                            "type": "bool"
                        },
                        "iops": {
                            "description": "When using an C(io1) I(volume_type) this sets the number of IOPS provisioned for the volume",
                            "type": "int"
                        },
                        "no_device": {
                            "description": "Suppresses the specified device included in the block device mapping of the AMI.",
                            "type": "bool"
                        },
                        "snapshot_id": {
                            "description": "The ID of the Snapshot.",
                            "type": "str"
                        },
                        "volume_size": {
                            "aliases": [
                                "size"
                            ],
                            "description": "The size of the volume (in GiB)",
                            "type": "int"
                        },
                        "volume_type": {
                            "description": "The volume type.  Defaults to C(gp2) when not set.",
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "enhanced_networking": {
                    "description": [
                        "A boolean representing whether enhanced networking with ENA is enabled or not."
                    ],
                    "type": "bool"
                },
                "image_id": {
                    "description": [
                        "Image ID to be deregistered."
                    ],
                    "type": "str"
                },
                "image_location": {
                    "description": [
                        "The s3 location of an image to use for the AMI."
                    ],
                    "type": "str"
                },
                "instance_id": {
                    "description": [
                        "Instance ID to create the AMI from."
                    ],
                    "type": "str"
                },
                "kernel_id": {
                    "description": [
                        "The target kernel id of the image to register."
                    ],
                    "type": "str"
                },
                "launch_permissions": {
                    "description": [
                        "Users and groups that should be able to launch the AMI. Expects dictionary with a key of user_ids and/or group_names. user_ids should be a list of account ids. group_name should be a list of groups, \"all\" is the only acceptable value currently.",
                        "You must pass all desired launch permissions if you wish to modify existing launch permissions (passing just groups will remove all users)"
                    ],
                    "type": "dict"
                },
                "name": {
                    "description": [
                        "The name of the new AMI."
                    ],
                    "type": "str"
                },
                "no_reboot": {
                    "default": false,
                    "description": [
                        "Flag indicating that the bundling process should not attempt to shutdown the instance before bundling. If this flag is True, the responsibility of maintaining file system integrity is left to the owner of the instance."
                    ],
                    "type": "bool"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "purge_tags": {
                    "default": false,
                    "description": "Whether to remove existing tags that aren't passed in the C(tags) parameter",
                    "type": "bool"
                },
                "ramdisk_id": {
                    "description": [
                        "The ID of the RAM disk."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "root_device_name": {
                    "description": [
                        "The root device name of the image to register."
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "sriov_net_support": {
                    "description": [
                        "Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Register or deregister an AMI."
                    ],
                    "type": "str"
                },
                "tags": {
                    "description": [
                        "A dictionary of tags to add to the new image; '{\"key\":\"value\"}' and '{\"key\":\"value\",\"key\":\"value\"}'"
                    ],
                    "type": "dict"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "virtualization_type": {
                    "default": "hvm",
                    "description": [
                        "The virtualization type of the image to register."
                    ],
                    "type": "str"
                },
                "wait": {
                    "default": false,
                    "description": [
                        "Wait for the AMI to be in state 'available' before returning."
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 900,
                    "description": [
                        "How long before wait gives up, in seconds."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "python >= 2.6",
                "boto"
            ],
            "short_description": "Create or destroy an image (AMI) in ec2"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Basic AMI Creation\n- ec2_ami:\n    instance_id: i-xxxxxx\n    wait: yes\n    name: newtest\n    tags:\n      Name: newtest\n      Service: TestService\n\n# Basic AMI Creation, without waiting\n- ec2_ami:\n    instance_id: i-xxxxxx\n    wait: no\n    name: newtest\n\n# AMI Registration from EBS Snapshot\n- ec2_ami:\n    name: newtest\n    state: present\n    architecture: x86_64\n    virtualization_type: hvm\n    root_device_name: /dev/xvda\n    device_mapping:\n      - device_name: /dev/xvda\n        volume_size: 8\n        snapshot_id: snap-xxxxxxxx\n        delete_on_termination: true\n        volume_type: gp2\n\n# AMI Creation, with a custom root-device size and another EBS attached\n- ec2_ami:\n    instance_id: i-xxxxxx\n    name: newtest\n    device_mapping:\n        - device_name: /dev/sda1\n          size: XXX\n          delete_on_termination: true\n          volume_type: gp2\n        - device_name: /dev/sdb\n          size: YYY\n          delete_on_termination: false\n          volume_type: gp2\n\n# AMI Creation, excluding a volume attached at /dev/sdb\n- ec2_ami:\n    instance_id: i-xxxxxx\n    name: newtest\n    device_mapping:\n        - device_name: /dev/sda1\n          size: XXX\n          delete_on_termination: true\n          volume_type: gp2\n        - device_name: /dev/sdb\n          no_device: yes\n\n# Deregister/Delete AMI (keep associated snapshots)\n- ec2_ami:\n    image_id: \"{{ instance.image_id }}\"\n    delete_snapshot: False\n    state: absent\n\n# Deregister AMI (delete associated snapshots too)\n- ec2_ami:\n    image_id: \"{{ instance.image_id }}\"\n    delete_snapshot: True\n    state: absent\n\n# Update AMI Launch Permissions, making it public\n- ec2_ami:\n    image_id: \"{{ instance.image_id }}\"\n    state: present\n    launch_permissions:\n      group_names: ['all']\n\n# Allow AMI to be launched by another account\n- ec2_ami:\n    image_id: \"{{ instance.image_id }}\"\n    state: present\n    launch_permissions:\n      user_ids: ['123456789012']\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "stableinterface"
            ],
            "supported_by": "community"
        },
        "return": {
            "architecture": {
                "description": "Architecture of image.",
                "returned": "when AMI is created or already exists",
                "sample": "x86_64",
                "type": "str"
            },
            "block_device_mapping": {
                "description": "Block device mapping associated with image.",
                "returned": "when AMI is created or already exists",
                "sample": {
                    "/dev/sda1": {
                        "delete_on_termination": true,
                        "encrypted": false,
                        "size": 10,
                        "snapshot_id": "snap-1a03b80e7",
                        "volume_type": "standard"
                    }
                },
                "type": "dict"
            },
            "creationDate": {
                "description": "Creation date of image.",
                "returned": "when AMI is created or already exists",
                "sample": "2015-10-15T22:43:44.000Z",
                "type": "str"
            },
            "description": {
                "description": "Description of image.",
                "returned": "when AMI is created or already exists",
                "sample": "nat-server",
                "type": "str"
            },
            "hypervisor": {
                "description": "Type of hypervisor.",
                "returned": "when AMI is created or already exists",
                "sample": "xen",
                "type": "str"
            },
            "image_id": {
                "description": "ID of the image.",
                "returned": "when AMI is created or already exists",
                "sample": "ami-1234abcd",
                "type": "str"
            },
            "is_public": {
                "description": "Whether image is public.",
                "returned": "when AMI is created or already exists",
                "sample": false,
                "type": "bool"
            },
            "launch_permission": {
                "description": "Permissions allowing other accounts to access the AMI.",
                "returned": "when AMI is created or already exists",
                "sample": [
                    {
                        "group": "all"
                    }
                ],
                "type": "list"
            },
            "location": {
                "description": "Location of image.",
                "returned": "when AMI is created or already exists",
                "sample": "315210894379/nat-server",
                "type": "str"
            },
            "name": {
                "description": "AMI name of image.",
                "returned": "when AMI is created or already exists",
                "sample": "nat-server",
                "type": "str"
            },
            "ownerId": {
                "description": "Owner of image.",
                "returned": "when AMI is created or already exists",
                "sample": "435210894375",
                "type": "str"
            },
            "platform": {
                "description": "Platform of image.",
                "returned": "when AMI is created or already exists",
                "sample": null,
                "type": "str"
            },
            "root_device_name": {
                "description": "Root device name of image.",
                "returned": "when AMI is created or already exists",
                "sample": "/dev/sda1",
                "type": "str"
            },
            "root_device_type": {
                "description": "Root device type of image.",
                "returned": "when AMI is created or already exists",
                "sample": "ebs",
                "type": "str"
            },
            "snapshots_deleted": {
                "description": "A list of snapshot ids deleted after deregistering image.",
                "returned": "after AMI is deregistered, if I(delete_snapshot=true)",
                "sample": [
                    "snap-fbcccb8f",
                    "snap-cfe7cdb4"
                ],
                "type": "list"
            },
            "state": {
                "description": "State of image.",
                "returned": "when AMI is created or already exists",
                "sample": "available",
                "type": "str"
            },
            "tags": {
                "description": "A dictionary of tags assigned to image.",
                "returned": "when AMI is created or already exists",
                "sample": {
                    "Env": "devel",
                    "Name": "nat-server"
                },
                "type": "dict"
            },
            "virtualization_type": {
                "description": "Image virtualization type.",
                "returned": "when AMI is created or already exists",
                "sample": "hvm",
                "type": "str"
            }
        }
    }
}
