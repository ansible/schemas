{
    "community.general.supervisorctl": {
        "doc": {
            "author": [
                "Matt Wright (@mattupstate)",
                "Aaron Wang (@inetfuture) <inetfuture@gmail.com>"
            ],
            "collection": "community.general",
            "description": [
                "Manage the state of a program or group of programs running via supervisord"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/supervisorctl.py",
            "has_action": false,
            "module": "supervisorctl",
            "notes": [
                "When C(state) = I(present), the module will call C(supervisorctl reread) then C(supervisorctl add) if the program/group does not exist.",
                "When C(state) = I(restarted), the module will call C(supervisorctl update) then call C(supervisorctl restart).",
                "When C(state) = I(absent), the module will call C(supervisorctl reread) then C(supervisorctl remove) to remove the target program/group."
            ],
            "options": {
                "config": {
                    "description": [
                        "The supervisor configuration file path"
                    ],
                    "type": "path"
                },
                "name": {
                    "description": [
                        "The name of the supervisord program or group to manage.",
                        "The name will be taken as group name when it ends with a colon I(:)",
                        "Group support is only available in Ansible version 1.6 or later."
                    ],
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "description": [
                        "password to use for authentication"
                    ],
                    "type": "str"
                },
                "server_url": {
                    "description": [
                        "URL on which supervisord server is listening"
                    ],
                    "type": "str"
                },
                "signal": {
                    "description": [
                        "The signal to send to the program/group, when combined with the 'signalled' state. Required when l(state=signalled)."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "started",
                        "stopped",
                        "restarted",
                        "absent",
                        "signalled"
                    ],
                    "description": [
                        "The desired state of program/group."
                    ],
                    "required": true,
                    "type": "str"
                },
                "supervisorctl_path": {
                    "description": [
                        "path to supervisorctl executable"
                    ],
                    "type": "path"
                },
                "username": {
                    "description": [
                        "username to use for authentication"
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "supervisorctl"
            ],
            "short_description": "Manage the state of a program or group of programs running via supervisord"
        },
        "examples": "\n- name: Manage the state of program to be in started state\n  community.general.supervisorctl:\n    name: my_app\n    state: started\n\n- name: Manage the state of program group to be in started state\n  community.general.supervisorctl:\n    name: 'my_apps:'\n    state: started\n\n- name: Restart my_app, reading supervisorctl configuration from a specified file\n  community.general.supervisorctl:\n    name: my_app\n    state: restarted\n    config: /var/opt/my_project/supervisord.conf\n\n- name: Restart my_app, connecting to supervisord with credentials and server URL\n  community.general.supervisorctl:\n    name: my_app\n    state: restarted\n    username: test\n    password: testpass\n    server_url: http://localhost:9001\n\n- name: Send a signal to my_app via supervisorctl\n  community.general.supervisorctl:\n    name: my_app\n    state: signalled\n    signal: USR1\n",
        "metadata": null,
        "return": null
    }
}
