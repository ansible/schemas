{
    "community.general.one_service": {
        "doc": {
            "author": [
                "Milan Ilic (@ilicmilan)"
            ],
            "collection": "community.general",
            "description": [
                "Manage OpenNebula services"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/one_service.py",
            "has_action": false,
            "module": "one_service",
            "options": {
                "api_password": {
                    "description": [
                        "Password of the user to login into OpenNebula OneFlow API server. If not set then the value of the C(ONEFLOW_PASSWORD) environment variable is used."
                    ],
                    "type": "str"
                },
                "api_url": {
                    "description": [
                        "URL of the OpenNebula OneFlow API server.",
                        "It is recommended to use HTTPS so that the username/password are not transferred over the network unencrypted.",
                        "If not set then the value of the ONEFLOW_URL environment variable is used."
                    ],
                    "type": "str"
                },
                "api_username": {
                    "description": [
                        "Name of the user to login into the OpenNebula OneFlow API server. If not set then the value of the C(ONEFLOW_USERNAME) environment variable is used."
                    ],
                    "type": "str"
                },
                "cardinality": {
                    "description": [
                        "Number of VMs for the specified role"
                    ],
                    "type": "int"
                },
                "custom_attrs": {
                    "default": {},
                    "description": [
                        "Dictionary of key/value custom attributes which will be used when instantiating a new service."
                    ],
                    "type": "dict"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Force the new cardinality even if it is outside the limits"
                    ],
                    "type": "bool"
                },
                "group_id": {
                    "description": [
                        "ID of the group which will be set as the group of the service"
                    ],
                    "type": "int"
                },
                "mode": {
                    "description": [
                        "Set permission mode of a service instance in octet format, e.g. C(600) to give owner C(use) and C(manage) and nothing to group and others."
                    ],
                    "type": "str"
                },
                "owner_id": {
                    "description": [
                        "ID of the user which will be set as the owner of the service"
                    ],
                    "type": "int"
                },
                "role": {
                    "description": [
                        "Name of the role whose cardinality should be changed"
                    ],
                    "type": "str"
                },
                "service_id": {
                    "description": [
                        "ID of a service instance that you would like to manage"
                    ],
                    "type": "int"
                },
                "service_name": {
                    "description": [
                        "Name of a service instance that you would like to manage"
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "C(present) - instantiate a service from a template specified with C(template_id)/C(template_name).",
                        "C(absent) - terminate an instance of a service specified with C(service_id)/C(service_name)."
                    ],
                    "type": "str"
                },
                "template_id": {
                    "description": [
                        "ID of a service template to use to create a new instance of a service"
                    ],
                    "type": "int"
                },
                "template_name": {
                    "description": [
                        "Name of service template to use to create a new instance of a service"
                    ],
                    "type": "str"
                },
                "unique": {
                    "default": false,
                    "description": [
                        "Setting C(unique=yes) will make sure that there is only one service instance running with a name set with C(service_name) when",
                        "instantiating a service from a template specified with C(template_id)/C(template_name). Check examples below."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": false,
                    "description": [
                        "Wait for the instance to reach RUNNING state after DEPLOYING or COOLDOWN state after SCALING"
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 300,
                    "description": [
                        "How long before wait gives up, in seconds"
                    ],
                    "type": "int"
                }
            },
            "short_description": "Deploy and manage OpenNebula services"
        },
        "examples": "\n- name: Instantiate a new service\n  community.general.one_service:\n    template_id: 90\n  register: result\n\n- name: Print service properties\n  ansible.builtin.debug:\n    msg: result\n\n- name: Instantiate a new service with specified service_name, service group and mode\n  community.general.one_service:\n    template_name: 'app1_template'\n    service_name: 'app1'\n    group_id: 1\n    mode: '660'\n\n- name: Instantiate a new service with template_id and pass custom_attrs dict\n  community.general.one_service:\n    template_id: 90\n    custom_attrs:\n      public_network_id: 21\n      private_network_id: 26\n\n- name: Instantiate a new service 'foo' if the service doesn't already exist, otherwise do nothing\n  community.general.one_service:\n    template_id: 53\n    service_name: 'foo'\n    unique: yes\n\n- name: Delete a service by ID\n  community.general.one_service:\n    service_id: 153\n    state: absent\n\n- name: Get service info\n  community.general.one_service:\n    service_id: 153\n  register: service_info\n\n- name: Change service owner, group and mode\n  community.general.one_service:\n    service_name: 'app2'\n    owner_id: 34\n    group_id: 113\n    mode: '600'\n\n- name: Instantiate service and wait for it to become RUNNING\n  community.general.one_service:\n    template_id: 43\n    service_name: 'foo1'\n\n- name: Wait service to become RUNNING\n  community.general.one_service:\n    service_id: 112\n    wait: yes\n\n- name: Change role cardinality\n  community.general.one_service:\n    service_id: 153\n    role: bar\n    cardinality: 5\n\n- name: Change role cardinality and wait for it to be applied\n  community.general.one_service:\n    service_id: 112\n    role: foo\n    cardinality: 7\n    wait: yes\n",
        "metadata": null,
        "return": {
            "group_id": {
                "description": "service's group id",
                "returned": "success",
                "sample": 1,
                "type": "int"
            },
            "group_name": {
                "description": "service's group name",
                "returned": "success",
                "sample": "one-users",
                "type": "str"
            },
            "mode": {
                "description": "service's mode",
                "returned": "success",
                "sample": 660,
                "type": "int"
            },
            "owner_id": {
                "description": "service's owner id",
                "returned": "success",
                "sample": 143,
                "type": "int"
            },
            "owner_name": {
                "description": "service's owner name",
                "returned": "success",
                "sample": "ansible-test",
                "type": "str"
            },
            "roles": {
                "description": "list of dictionaries of roles, each role is described by name, cardinality, state and nodes ids",
                "returned": "success",
                "sample": "[{\"cardinality\": 1,\"name\": \"foo\",\"state\": \"RUNNING\",\"ids\": [ 123, 456 ]}, {\"cardinality\": 2,\"name\": \"bar\",\"state\": \"RUNNING\", \"ids\": [ 452, 567, 746 ]}]",
                "type": "list"
            },
            "service_id": {
                "description": "service id",
                "returned": "success",
                "sample": 153,
                "type": "int"
            },
            "service_name": {
                "description": "service name",
                "returned": "success",
                "sample": "app1",
                "type": "str"
            },
            "state": {
                "description": "state of service instance",
                "returned": "success",
                "sample": "RUNNING",
                "type": "str"
            }
        }
    }
}
