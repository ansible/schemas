{
    "ngine_io.cloudstack.cs_portforward": {
        "doc": {
            "author": "Ren\u00e9 Moser (@resmo)",
            "collection": "ngine_io.cloudstack",
            "description": [
                "Create, update and remove port forwarding rules."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ngine_io/cloudstack/plugins/modules/cs_portforward.py",
            "has_action": false,
            "module": "cs_portforward",
            "notes": [
                "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).",
                "This module supports check mode."
            ],
            "options": {
                "account": {
                    "description": [
                        "Account the I(vm) is related to."
                    ],
                    "type": "str"
                },
                "api_http_method": {
                    "choices": [
                        "get",
                        "post"
                    ],
                    "default": "get",
                    "description": [
                        "HTTP method used to query the API endpoint.",
                        "If not given, the C(CLOUDSTACK_METHOD) env variable is considered."
                    ],
                    "type": "str"
                },
                "api_key": {
                    "description": [
                        "API key of the CloudStack API.",
                        "If not given, the C(CLOUDSTACK_KEY) env variable is considered."
                    ],
                    "required": true,
                    "type": "str"
                },
                "api_secret": {
                    "description": [
                        "Secret key of the CloudStack API.",
                        "If not set, the C(CLOUDSTACK_SECRET) env variable is considered."
                    ],
                    "required": true,
                    "type": "str"
                },
                "api_timeout": {
                    "default": 10,
                    "description": [
                        "HTTP timeout in seconds.",
                        "If not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered."
                    ],
                    "type": "int"
                },
                "api_url": {
                    "description": [
                        "URL of the CloudStack API e.g. https://cloud.example.com/client/api.",
                        "If not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered."
                    ],
                    "required": true,
                    "type": "str"
                },
                "api_verify_ssl_cert": {
                    "description": [
                        "Verify CA authority cert file.",
                        "If not given, the C(CLOUDSTACK_VERIFY) env variable is considered."
                    ],
                    "type": "str"
                },
                "domain": {
                    "description": [
                        "Domain the I(vm) is related to."
                    ],
                    "type": "str"
                },
                "ip_address": {
                    "description": [
                        "Public IP address the rule is assigned to."
                    ],
                    "required": true,
                    "type": "str"
                },
                "network": {
                    "description": [
                        "Name of the network. Required when forwarding ports in a VPC."
                    ],
                    "type": "str"
                },
                "open_firewall": {
                    "default": false,
                    "description": [
                        "Whether the firewall rule for public port should be created, while creating the new rule.",
                        "Not supported when forwarding ports in a VPC.",
                        "Use M(cs_firewall) for managing firewall rules."
                    ],
                    "type": "bool"
                },
                "poll_async": {
                    "default": true,
                    "description": [
                        "Poll async jobs until job has finished."
                    ],
                    "type": "bool"
                },
                "private_end_port": {
                    "description": [
                        "End private port for this rule.",
                        "If not specified equal I(private_port)."
                    ],
                    "type": "int"
                },
                "private_port": {
                    "description": [
                        "Start private port for this rule."
                    ],
                    "required": true,
                    "type": "int"
                },
                "project": {
                    "description": [
                        "Name of the project the I(vm) is located in."
                    ],
                    "type": "str"
                },
                "protocol": {
                    "choices": [
                        "tcp",
                        "udp"
                    ],
                    "default": "tcp",
                    "description": [
                        "Protocol of the port forwarding rule."
                    ],
                    "type": "str"
                },
                "public_end_port": {
                    "description": [
                        "End public port for this rule.",
                        "If not specified equal I(public_port)."
                    ],
                    "type": "int"
                },
                "public_port": {
                    "description": [
                        "Start public port for this rule."
                    ],
                    "required": true,
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "State of the port forwarding rule."
                    ],
                    "type": "str"
                },
                "tags": {
                    "aliases": [
                        "tag"
                    ],
                    "description": [
                        "List of tags. Tags are a list of dictionaries having keys I(key) and I(value).",
                        "To delete all tags, set a empty list e.g. I(tags: [])."
                    ],
                    "elements": "dict",
                    "type": "list"
                },
                "vm": {
                    "description": [
                        "Name of virtual machine which we make the port forwarding rule for.",
                        "Required if I(state=present)."
                    ],
                    "type": "str"
                },
                "vm_guest_ip": {
                    "description": [
                        "VM guest NIC secondary IP address for the port forwarding rule."
                    ],
                    "type": "str"
                },
                "vpc": {
                    "description": [
                        "Name of the VPC."
                    ],
                    "type": "str"
                },
                "zone": {
                    "description": [
                        "Name of the zone in which the virtual machine is in."
                    ],
                    "required": true,
                    "type": "str"
                }
            },
            "requirements": [
                "python >= 2.6",
                "cs >= 0.9.0"
            ],
            "short_description": "Manages port forwarding rules on Apache CloudStack based clouds.",
            "version_added": "0.1.0",
            "version_added_collection": "ngine_io.cloudstack"
        },
        "examples": "\n- name: 1.2.3.4:80 -> web01:8080\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: 1.2.3.4\n    zone: zone01\n    vm: web01\n    public_port: 80\n    private_port: 8080\n\n- name: forward SSH and open firewall\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: '{{ public_ip }}'\n    zone: zone01\n    vm: '{{ inventory_hostname }}'\n    public_port: '{{ ansible_ssh_port }}'\n    private_port: 22\n    open_firewall: true\n\n- name: forward DNS traffic, but do not open firewall\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: 1.2.3.4\n    zone: zone01\n    vm: '{{ inventory_hostname }}'\n    public_port: 53\n    private_port: 53\n    protocol: udp\n\n- name: remove ssh port forwarding\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: 1.2.3.4\n    zone: zone01\n    public_port: 22\n    private_port: 22\n    state: absent\n\n- name: forward SSH in backend tier of VPC\n  ngine_io.cloudstack.cs_portforward:\n    ip_address: '{{ public_ip }}'\n    zone: zone01\n    vm: '{{ inventory_hostname }}'\n    public_port: '{{ ansible_ssh_port }}'\n    private_port: 22\n    vpc: myVPC\n    network: backend\n",
        "metadata": null,
        "return": {
            "id": {
                "description": "UUID of the public IP address.",
                "returned": "success",
                "sample": "a6f7a5fc-43f8-11e5-a151-feff819cdc9f",
                "type": "str"
            },
            "ip_address": {
                "description": "Public IP address.",
                "returned": "success",
                "sample": "1.2.3.4",
                "type": "str"
            },
            "network": {
                "description": "Name of the network.",
                "returned": "success",
                "sample": "dmz",
                "type": "str"
            },
            "private_end_port": {
                "description": "End port on the virtual machine's IP address.",
                "returned": "success",
                "sample": 80,
                "type": "int"
            },
            "private_port": {
                "description": "Start port on the virtual machine's IP address.",
                "returned": "success",
                "sample": 80,
                "type": "int"
            },
            "protocol": {
                "description": "Protocol.",
                "returned": "success",
                "sample": "tcp",
                "type": "str"
            },
            "public_end_port": {
                "description": "End port on the public IP address.",
                "returned": "success",
                "sample": 80,
                "type": "int"
            },
            "public_port": {
                "description": "Start port on the public IP address.",
                "returned": "success",
                "sample": 80,
                "type": "int"
            },
            "tags": {
                "description": "Tags related to the port forwarding.",
                "returned": "success",
                "sample": [],
                "type": "list"
            },
            "vm_display_name": {
                "description": "Display name of the virtual machine.",
                "returned": "success",
                "sample": "web-01",
                "type": "str"
            },
            "vm_guest_ip": {
                "description": "IP of the virtual machine.",
                "returned": "success",
                "sample": "10.101.65.152",
                "type": "str"
            },
            "vm_name": {
                "description": "Name of the virtual machine.",
                "returned": "success",
                "sample": "web-01",
                "type": "str"
            },
            "vpc": {
                "description": "Name of the VPC.",
                "returned": "success",
                "sample": "my_vpc",
                "type": "str"
            }
        }
    }
}
