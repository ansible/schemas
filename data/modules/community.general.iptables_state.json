{
    "community.general.iptables_state": {
        "doc": {
            "author": "quidame (@quidame)",
            "collection": "community.general",
            "description": [
                "C(iptables) is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel.",
                "This module handles the saving and/or loading of rules. This is the same as the behaviour of the C(iptables-save) and C(iptables-restore) (or C(ip6tables-save) and C(ip6tables-restore) for IPv6) commands which this module uses internally.",
                "Modifying the state of the firewall remotely may lead to loose access to the host in case of mistake in new ruleset. This module embeds a rollback feature to avoid this, by telling the host to restore previous rules if a cookie is still there after a given delay, and all this time telling the controller to try to remove this cookie on the host through a new connection."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/iptables_state.py",
            "has_action": true,
            "module": "iptables_state",
            "notes": [
                "The rollback feature is not a module option and depends on task's attributes. To enable it, the module must be played asynchronously, i.e. by setting task attributes I(poll) to C(0), and I(async) to a value less or equal to C(ANSIBLE_TIMEOUT). If I(async) is greater, the rollback will still happen if it shall happen, but you will experience a connection timeout instead of more relevant info returned by the module after its failure.",
                "This module supports I(check_mode)."
            ],
            "options": {
                "counters": {
                    "default": false,
                    "description": [
                        "Save or restore the values of all packet and byte counters.",
                        "When C(true), the module is not idempotent."
                    ],
                    "type": "bool"
                },
                "ip_version": {
                    "choices": [
                        "ipv4",
                        "ipv6"
                    ],
                    "default": "ipv4",
                    "description": [
                        "Which version of the IP protocol this module should apply to."
                    ],
                    "type": "str"
                },
                "modprobe": {
                    "description": [
                        "Specify the path to the C(modprobe) program internally used by iptables related commands to load kernel modules.",
                        "By default, C(/proc/sys/kernel/modprobe) is inspected to determine the executable's path."
                    ],
                    "type": "path"
                },
                "noflush": {
                    "default": false,
                    "description": [
                        "For I(state=restored), ignored otherwise.",
                        "If C(false), restoring iptables rules from a file flushes (deletes) all previous contents of the respective table(s). If C(true), the previous rules are left untouched (but policies are updated anyway, for all built-in chains)."
                    ],
                    "type": "bool"
                },
                "path": {
                    "description": [
                        "The file the iptables state should be saved to.",
                        "The file the iptables state should be restored from."
                    ],
                    "required": true,
                    "type": "path"
                },
                "state": {
                    "choices": [
                        "saved",
                        "restored"
                    ],
                    "description": [
                        "Whether the firewall state should be saved (into a file) or restored (from a file)."
                    ],
                    "required": true,
                    "type": "str"
                },
                "table": {
                    "choices": [
                        "filter",
                        "nat",
                        "mangle",
                        "raw",
                        "security"
                    ],
                    "description": [
                        "When I(state=restored), restore only the named table even if the input file contains other tables. Fail if the named table is not declared in the file.",
                        "When I(state=saved), restrict output to the specified table. If not specified, output includes all active tables."
                    ],
                    "type": "str"
                },
                "wait": {
                    "description": [
                        "Wait N seconds for the xtables lock to prevent instant failure in case multiple instances of the program are running concurrently."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "iptables",
                "ip6tables"
            ],
            "short_description": "Save iptables state into a file or restore it from a file",
            "version_added": "1.1.0",
            "version_added_collection": "community.general"
        },
        "examples": "\n# This will apply to all loaded/active IPv4 tables.\n- name: Save current state of the firewall in system file\n  community.general.iptables_state:\n    state: saved\n    path: /etc/sysconfig/iptables\n\n# This will apply only to IPv6 filter table.\n- name: save current state of the firewall in system file\n  community.general.iptables_state:\n    ip_version: ipv6\n    table: filter\n    state: saved\n    path: /etc/iptables/rules.v6\n\n# This will load a state from a file, with a rollback in case of access loss\n- name: restore firewall state from a file\n  community.general.iptables_state:\n    state: restored\n    path: /run/iptables.apply\n  async: \"{{ ansible_timeout }}\"\n  poll: 0\n\n# This will load new rules by appending them to the current ones\n- name: restore firewall state from a file\n  community.general.iptables_state:\n    state: restored\n    path: /run/iptables.apply\n    noflush: true\n  async: \"{{ ansible_timeout }}\"\n  poll: 0\n\n# This will only retrieve information\n- name: get current state of the firewall\n  community.general.iptables_state:\n    state: saved\n    path: /tmp/iptables\n  check_mode: yes\n  changed_when: false\n  register: iptables_state\n\n- name: show current state of the firewall\n  ansible.builtin.debug:\n    var: iptables_state.initial_state\n",
        "metadata": null,
        "return": {
            "applied": {
                "description": "Whether or not the wanted state has been successfully restored.",
                "returned": "always",
                "sample": true,
                "type": "bool"
            },
            "initial_state": {
                "description": "The current state of the firewall when module starts.",
                "elements": "str",
                "returned": "always",
                "sample": [
                    "# Generated by xtables-save v1.8.2",
                    "*filter",
                    ":INPUT ACCEPT [0:0]",
                    ":FORWARD ACCEPT [0:0]",
                    ":OUTPUT ACCEPT [0:0]",
                    "COMMIT",
                    "# Completed"
                ],
                "type": "list"
            },
            "restored": {
                "description": "The state the module restored, whenever it is finally applied or not.",
                "elements": "str",
                "returned": "always",
                "sample": [
                    "# Generated by xtables-save v1.8.2",
                    "*filter",
                    ":INPUT DROP [0:0]",
                    ":FORWARD DROP [0:0]",
                    ":OUTPUT ACCEPT [0:0]",
                    "-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT",
                    "-A INPUT -m conntrack --ctstate INVALID -j DROP",
                    "-A INPUT -i lo -j ACCEPT",
                    "-A INPUT -p icmp -j ACCEPT",
                    "-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT",
                    "COMMIT",
                    "# Completed"
                ],
                "type": "list"
            },
            "saved": {
                "description": "The iptables state the module saved.",
                "elements": "str",
                "returned": "always",
                "sample": [
                    "# Generated by xtables-save v1.8.2",
                    "*filter",
                    ":INPUT ACCEPT [0:0]",
                    ":FORWARD DROP [0:0]",
                    ":OUTPUT ACCEPT [0:0]",
                    "COMMIT",
                    "# Completed"
                ],
                "type": "list"
            },
            "tables": {
                "contains": {
                    "table": {
                        "description": "Policies and rules for all chains of the named table.",
                        "elements": "str",
                        "type": "list"
                    }
                },
                "description": "The iptables we have interest for when module starts.",
                "returned": "always",
                "sample": "{\n  \"filter\": [\n    \":INPUT ACCEPT\",\n    \":FORWARD ACCEPT\",\n    \":OUTPUT ACCEPT\",\n    \"-A INPUT -i lo -j ACCEPT\",\n    \"-A INPUT -p icmp -j ACCEPT\",\n    \"-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT\",\n    \"-A INPUT -j REJECT --reject-with icmp-host-prohibited\"\n  ],\n  \"nat\": [\n    \":PREROUTING ACCEPT\",\n    \":INPUT ACCEPT\",\n    \":OUTPUT ACCEPT\",\n    \":POSTROUTING ACCEPT\"\n  ]\n}",
                "type": "dict"
            }
        }
    }
}
