{
    "ovirt.ovirt.ovirt_snapshot": {
        "doc": {
            "author": [
                "Ondra Machacek (@machacekondra)",
                "Martin Necas (@mnecas)"
            ],
            "collection": "ovirt.ovirt",
            "description": [
                "Module to manage Virtual Machine Snapshots in oVirt/RHV"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ovirt/ovirt/plugins/modules/ovirt_snapshot.py",
            "has_action": false,
            "module": "ovirt_snapshot",
            "notes": [
                "Note that without a guest agent the data on the created snapshot may be inconsistent.",
                "Deleting a snapshot does not remove any information from the virtual machine - it simply removes a return-point. However, restoring a virtual machine from a snapshot deletes any content that was written to the virtual machine after the time the snapshot was taken.",
                "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: I(pip: name=ovirt-engine-sdk-python version=4.4.0)"
            ],
            "options": {
                "auth": {
                    "description": [
                        "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:"
                    ],
                    "required": true,
                    "suboptions": {
                        "ca_file": {
                            "description": [
                                "A PEM file containing the trusted CA certificates.",
                                "The certificate presented by the server will be verified using these CA certificates.",
                                "If C(ca_file) parameter is not set, system wide CA certificate store is used.",
                                "Default value is set by C(OVIRT_CAFILE) environment variable."
                            ],
                            "type": "str"
                        },
                        "compress": {
                            "default": true,
                            "description": "Flag indicating if compression is used for connection.",
                            "type": "bool"
                        },
                        "headers": {
                            "description": [
                                "Dictionary of HTTP headers to be added to each API call."
                            ],
                            "type": "dict"
                        },
                        "hostname": {
                            "description": [
                                "A string containing the hostname of the server, usually something like `I(server.example.com)`.",
                                "Default value is set by C(OVIRT_HOSTNAME) environment variable.",
                                "Either C(url) or C(hostname) is required."
                            ],
                            "type": "str"
                        },
                        "insecure": {
                            "description": [
                                "A boolean flag that indicates if the server TLS certificate and host name should be checked."
                            ],
                            "type": "bool"
                        },
                        "kerberos": {
                            "description": [
                                "A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication."
                            ],
                            "type": "bool"
                        },
                        "password": {
                            "description": [
                                "The password of the user.",
                                "Default value is set by C(OVIRT_PASSWORD) environment variable."
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "timeout": {
                            "description": "Number of seconds to wait for response.",
                            "type": "int"
                        },
                        "token": {
                            "description": [
                                "Token to be used instead of login with username/password.",
                                "Default value is set by C(OVIRT_TOKEN) environment variable."
                            ],
                            "type": "str"
                        },
                        "url": {
                            "description": [
                                "A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`.",
                                "Default value is set by C(OVIRT_URL) environment variable.",
                                "Either C(url) or C(hostname) is required."
                            ],
                            "type": "str"
                        },
                        "username": {
                            "description": [
                                "The name of the user, something like I(admin@internal).",
                                "Default value is set by C(OVIRT_USERNAME) environment variable."
                            ],
                            "required": true,
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "description": {
                    "description": [
                        "Description of the snapshot."
                    ],
                    "type": "str"
                },
                "disk_id": {
                    "description": [
                        "Disk id which you want to upload or download",
                        "To get disk, you need to define disk_id or disk_name"
                    ],
                    "type": "str"
                },
                "disk_name": {
                    "description": [
                        "Disk name which you want to upload or download"
                    ],
                    "type": "str"
                },
                "disks": {
                    "description": [
                        "List of disks which should be created with snapshot."
                    ],
                    "elements": "dict",
                    "suboptions": {
                        "id": {
                            "description": [
                                "Id of the disk which should will be created."
                            ],
                            "type": "str"
                        },
                        "name": {
                            "description": [
                                "Name of the disk which should will be created."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "download_image_path": {
                    "description": [
                        "Path on a file system where snapshot should be downloaded.",
                        "Note that you must have an valid oVirt/RHV engine CA in your system trust store or you must provide it in C(ca_file) parameter.",
                        "Note that the snapshot is not downloaded when the file already exists, but you can forcibly download the snapshot when using C(force) I (true)."
                    ],
                    "type": "str"
                },
                "fetch_nested": {
                    "description": [
                        "If I(True) the module will fetch additional data from the API.",
                        "It will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes)."
                    ],
                    "type": "bool"
                },
                "keep_days_old": {
                    "description": [
                        "Number of days after which should snapshot be deleted.",
                        "It will check all snapshots of virtual machine and delete them, if they are older."
                    ],
                    "type": "int"
                },
                "nested_attributes": {
                    "description": [
                        "Specifies list of the attributes which should be fetched from the API.",
                        "This parameter apply only when C(fetch_nested) is I(true)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "poll_interval": {
                    "default": 3,
                    "description": [
                        "Number of the seconds the module waits until another poll request on entity status is sent."
                    ],
                    "type": "int"
                },
                "snapshot_id": {
                    "description": [
                        "ID of the snapshot to manage."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "restore",
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Should the Virtual Machine snapshot be restore/present/absent."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "The amount of time in seconds the module should wait for the instance to get into desired state."
                    ],
                    "type": "int"
                },
                "upload_image_path": {
                    "description": [
                        "Path to disk image, which should be uploaded."
                    ],
                    "type": "str"
                },
                "use_memory": {
                    "aliases": [
                        "restore_memory",
                        "save_memory"
                    ],
                    "description": [
                        "If I(true) and C(state) is I(present) save memory of the Virtual Machine if it's running.",
                        "If I(true) and C(state) is I(restore) restore memory of the Virtual Machine.",
                        "Note that Virtual Machine will be paused while saving the memory."
                    ],
                    "type": "bool"
                },
                "vm_name": {
                    "description": [
                        "Name of the Virtual Machine to manage."
                    ],
                    "required": true,
                    "type": "str"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "C(yes) if the module should wait for the entity to get into desired state."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.7",
                "ovirt-engine-sdk-python >= 4.4.0"
            ],
            "short_description": "Module to manage Virtual Machine Snapshots in oVirt/RHV",
            "version_added": "1.0.0",
            "version_added_collection": "ovirt.ovirt"
        },
        "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create snapshot:\n- ovirt.ovirt.ovirt_snapshot:\n    vm_name: rhel7\n    description: MySnapshot\n  register: snapshot\n\n# Create snapshot and save memory:\n- ovirt.ovirt.ovirt_snapshot:\n    vm_name: rhel7\n    description: SnapWithMem\n    use_memory: true\n  register: snapshot\n\n# Restore snapshot:\n- ovirt.ovirt.ovirt_snapshot:\n    state: restore\n    vm_name: rhel7\n    snapshot_id: \"{{ snapshot.id }}\"\n\n# Remove snapshot:\n- ovirt.ovirt.ovirt_snapshot:\n    state: absent\n    vm_name: rhel7\n    snapshot_id: \"{{ snapshot.id }}\"\n\n# Upload local image to disk and attach it to vm:\n# Since Ansible 2.8\n- ovirt.ovirt.ovirt_snapshot:\n    name: mydisk\n    vm_name: myvm\n    upload_image_path: /path/to/mydisk.qcow2\n\n# Download snapshot to local file system:\n# Since Ansible 2.8\n- ovirt.ovirt.ovirt_snapshot:\n    snapshot_id: 7de90f31-222c-436c-a1ca-7e655bd5b60c\n    disk_name: DiskName\n    vm_name: myvm\n    download_image_path: /home/user/mysnaphost.qcow2\n\n# Delete all snapshots older than 2 days\n- ovirt.ovirt.ovirt_snapshot:\n    vm_name: test\n    keep_days_old: 2\n\n- name: Select which disks should be add to snapshot\n  ovirt.ovirt.ovirt_snapshot:\n    vm_name: test\n    disks:\n      - id: 7de90f31-222c-436c-a1ca-7e655bd5b60c\n      - name: my_disk_name\n",
        "metadata": null,
        "return": {
            "id": {
                "description": "ID of the snapshot which is managed",
                "returned": "On success if snapshot is found.",
                "sample": "7de90f31-222c-436c-a1ca-7e655bd5b60c",
                "type": "str"
            },
            "snapshot": {
                "description": "Dictionary of all the snapshot attributes. Snapshot attributes can be found on your oVirt/RHV instance at following url: http://ovirt.github.io/ovirt-engine-api-model/master/#types/snapshot.",
                "returned": "On success if snapshot is found.",
                "type": "dict"
            },
            "snapshots": {
                "description": "List of deleted snapshots when keep_days_old is defined and snapshot is older than the input days",
                "returned": "On success returns deleted snapshots",
                "type": "list"
            }
        }
    }
}
