{
    "community.crypto.openssl_dhparam": {
        "doc": {
            "author": [
                "Thom Wiggers (@thomwiggers)"
            ],
            "collection": "community.crypto",
            "description": [
                "This module allows one to (re)generate OpenSSL DH-params.",
                "This module uses file common arguments to specify generated file permissions.",
                "Please note that the module regenerates existing DH params if they do not match the module's options. If you are concerned that this could overwrite your existing DH params, consider using the I(backup) option.",
                "The module can use the cryptography Python library, or the C(openssl) executable. By default, it tries to detect which one is available. This can be overridden with the I(select_crypto_backend) option."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/crypto/plugins/modules/openssl_dhparam.py",
            "has_action": false,
            "module": "openssl_dhparam",
            "notes": [
                "Supports C(check_mode)."
            ],
            "options": {
                "attributes": {
                    "aliases": [
                        "attr"
                    ],
                    "description": [
                        "The attributes the resulting file or directory should have.",
                        "To get supported flags look at the man page for I(chattr) on the target system.",
                        "This string should contain the attributes in the same order as the one displayed by I(lsattr).",
                        "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."
                    ],
                    "type": "str",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "backup": {
                    "default": false,
                    "description": [
                        "Create a backup file including a timestamp so you can get the original DH params back if you overwrote them with new ones by accident."
                    ],
                    "type": "bool"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Should the parameters be regenerated even it it already exists."
                    ],
                    "type": "bool"
                },
                "group": {
                    "description": [
                        "Name of the group that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "mode": {
                    "description": [
                        "The permissions the resulting file or directory should have.",
                        "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.",
                        "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.",
                        "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
                    ],
                    "type": "raw"
                },
                "owner": {
                    "description": [
                        "Name of the user that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "path": {
                    "description": [
                        "Name of the file in which the generated parameters will be saved."
                    ],
                    "required": true,
                    "type": "path"
                },
                "return_content": {
                    "default": false,
                    "description": [
                        "If set to C(yes), will return the (current or generated) DH params' content as I(dhparams)."
                    ],
                    "type": "bool",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "select_crypto_backend": {
                    "choices": [
                        "auto",
                        "cryptography",
                        "openssl"
                    ],
                    "default": "auto",
                    "description": [
                        "Determines which crypto backend to use.",
                        "The default choice is C(auto), which tries to use C(cryptography) if available, and falls back to C(openssl).",
                        "If set to C(openssl), will try to use the OpenSSL C(openssl) executable.",
                        "If set to C(cryptography), will try to use the L(cryptography,https://cryptography.io/) library."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "selevel": {
                    "description": [
                        "The level part of the SELinux file context.",
                        "This is the MLS/MCS attribute, sometimes known as the C(range).",
                        "When set to C(_default), it will use the C(level) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "serole": {
                    "description": [
                        "The role part of the SELinux file context.",
                        "When set to C(_default), it will use the C(role) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "setype": {
                    "description": [
                        "The type part of the SELinux file context.",
                        "When set to C(_default), it will use the C(type) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "seuser": {
                    "description": [
                        "The user part of the SELinux file context.",
                        "By default it uses the C(system) policy, where applicable.",
                        "When set to C(_default), it will use the C(user) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "size": {
                    "default": 4096,
                    "description": [
                        "Size (in bits) of the generated DH-params."
                    ],
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Whether the parameters should exist or not, taking action if the state is different from what is stated."
                    ],
                    "type": "str"
                },
                "unsafe_writes": {
                    "default": false,
                    "description": [
                        "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.",
                        "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.",
                        "This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).",
                        "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."
                    ],
                    "type": "bool",
                    "version_added": "2.2",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "requirements": [
                "Either cryptography >= 2.0",
                "Or OpenSSL binary C(openssl)"
            ],
            "seealso": [
                {
                    "module": "community.crypto.x509_certificate"
                },
                {
                    "module": "community.crypto.openssl_csr"
                },
                {
                    "module": "community.crypto.openssl_pkcs12"
                },
                {
                    "module": "community.crypto.openssl_privatekey"
                },
                {
                    "module": "community.crypto.openssl_publickey"
                }
            ],
            "short_description": "Generate OpenSSL Diffie-Hellman Parameters"
        },
        "examples": "\n- name: Generate Diffie-Hellman parameters with the default size (4096 bits)\n  community.crypto.openssl_dhparam:\n    path: /etc/ssl/dhparams.pem\n\n- name: Generate DH Parameters with a different size (2048 bits)\n  community.crypto.openssl_dhparam:\n    path: /etc/ssl/dhparams.pem\n    size: 2048\n\n- name: Force regenerate an DH parameters if they already exist\n  community.crypto.openssl_dhparam:\n    path: /etc/ssl/dhparams.pem\n    force: yes\n",
        "metadata": null,
        "return": {
            "backup_file": {
                "description": "Name of backup file created.",
                "returned": "changed and if I(backup) is C(yes)",
                "sample": "/path/to/dhparams.pem.2019-03-09@11:22~",
                "type": "str"
            },
            "dhparams": {
                "description": "The (current or generated) DH params' content.",
                "returned": "if I(state) is C(present) and I(return_content) is C(yes)",
                "type": "str",
                "version_added": "1.0.0",
                "version_added_collection": "community.crypto"
            },
            "filename": {
                "description": "Path to the generated Diffie-Hellman parameters.",
                "returned": "changed or success",
                "sample": "/etc/ssl/dhparams.pem",
                "type": "str"
            },
            "size": {
                "description": "Size (in bits) of the Diffie-Hellman parameters.",
                "returned": "changed or success",
                "sample": 4096,
                "type": "int"
            }
        }
    }
}
