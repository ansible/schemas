{
    "openstack.cloud.os_image_info": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Retrieve information about a image image from OpenStack.",
                "This module was called C(openstack.cloud.image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.image_info) module no longer returns C(ansible_facts)!"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/image_info.py",
            "has_action": false,
            "module": "image_info",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "image": {
                    "description": [
                        "Name or ID of the image"
                    ],
                    "required": false,
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "properties": {
                    "description": [
                        "Dict of properties of the images used for query"
                    ],
                    "required": false,
                    "type": "dict"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "How long should ansible wait for the requested resource."
                    ],
                    "type": "int"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Retrieve information about an image within OpenStack."
        },
        "examples": "\n- name: Gather information about a previously created image named image1\n  openstack.cloud.image_info:\n    auth:\n      auth_url: https://identity.example.com\n      username: user\n      password: password\n      project_name: someproject\n    image: image1\n  register: result\n\n- name: Show openstack information\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n\n# Show all available Openstack images\n- name: Retrieve all available Openstack images\n  openstack.cloud.image_info:\n  register: result\n\n- name: Show images\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n\n# Show images matching requested properties\n- name: Retrieve images having properties with desired values\n  openstack.cloud.image_facts:\n    properties:\n      some_property: some_value\n      OtherProp: OtherVal\n\n- name: Show images\n  debug:\n    msg: \"{{ result.openstack_image }}\"\n",
        "metadata": null,
        "return": {
            "openstack_image": {
                "contains": {
                    "checksum": {
                        "description": "Checksum for the image.",
                        "returned": "success",
                        "type": "str"
                    },
                    "container_format": {
                        "description": "Container format of the image.",
                        "returned": "success",
                        "type": "str"
                    },
                    "created_at": {
                        "description": "Image created at timestamp.",
                        "returned": "success",
                        "type": "str"
                    },
                    "deleted": {
                        "description": "Image deleted flag.",
                        "returned": "success",
                        "type": "bool"
                    },
                    "deleted_at": {
                        "description": "Image deleted at timestamp.",
                        "returned": "success",
                        "type": "str"
                    },
                    "disk_format": {
                        "description": "Disk format of the image.",
                        "returned": "success",
                        "type": "str"
                    },
                    "id": {
                        "description": "Unique UUID.",
                        "returned": "success",
                        "type": "str"
                    },
                    "is_public": {
                        "description": "Is public flag of the image.",
                        "returned": "success",
                        "type": "bool"
                    },
                    "min_disk": {
                        "description": "Min amount of disk space required for this image.",
                        "returned": "success",
                        "type": "int"
                    },
                    "min_ram": {
                        "description": "Min amount of RAM required for this image.",
                        "returned": "success",
                        "type": "int"
                    },
                    "name": {
                        "description": "Name given to the image.",
                        "returned": "success",
                        "type": "str"
                    },
                    "owner": {
                        "description": "Owner for the image.",
                        "returned": "success",
                        "type": "str"
                    },
                    "properties": {
                        "description": "Additional properties associated with the image.",
                        "returned": "success",
                        "type": "dict"
                    },
                    "protected": {
                        "description": "Image protected flag.",
                        "returned": "success",
                        "type": "bool"
                    },
                    "size": {
                        "description": "Size of the image.",
                        "returned": "success",
                        "type": "int"
                    },
                    "status": {
                        "description": "Image status.",
                        "returned": "success",
                        "type": "str"
                    },
                    "updated_at": {
                        "description": "Image updated at timestamp.",
                        "returned": "success",
                        "type": "str"
                    }
                },
                "description": "has all the openstack information about the image",
                "returned": "always, but can be null",
                "type": "complex"
            }
        }
    }
}
