{
    "community.general.one_vm": {
        "doc": {
            "author": [
                "Milan Ilic (@ilicmilan)",
                "Jan Meerkamp (@meerkampdvv)"
            ],
            "collection": "community.general",
            "description": [
                "Manages OpenNebula instances"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/one_vm.py",
            "has_action": false,
            "module": "one_vm",
            "options": {
                "api_password": {
                    "description": [
                        "Password of the user to login into OpenNebula RPC server. If not set",
                        "then the value of the C(ONE_PASSWORD) environment variable is used.",
                        "if both I(api_username) or I(api_password) are not set, then it will try",
                        "authenticate with ONE auth file. Default path is \"~/.one/one_auth\".",
                        "Set environment variable C(ONE_AUTH) to override this path."
                    ],
                    "type": "str"
                },
                "api_url": {
                    "description": [
                        "URL of the OpenNebula RPC server.",
                        "It is recommended to use HTTPS so that the username/password are not",
                        "transferred over the network unencrypted.",
                        "If not set then the value of the C(ONE_URL) environment variable is used."
                    ],
                    "type": "str"
                },
                "api_username": {
                    "description": [
                        "Name of the user to login into the OpenNebula RPC server. If not set",
                        "then the value of the C(ONE_USERNAME) environment variable is used."
                    ],
                    "type": "str"
                },
                "attributes": {
                    "default": {},
                    "description": [
                        "A dictionary of key/value attributes to add to new instances, or for",
                        "setting C(state) of instances with these attributes.",
                        "Keys are case insensitive and OpenNebula automatically converts them to upper case.",
                        "Be aware C(NAME) is a special attribute which sets the name of the VM when it's deployed.",
                        "C(#) character(s) can be appended to the C(NAME) and the module will automatically add",
                        "indexes to the names of VMs.",
                        "For example':' C(NAME':' foo-###) would create VMs with names C(foo-000), C(foo-001),...",
                        "When used with C(count_attributes) and C(exact_count) the module will",
                        "match the base name without the index part."
                    ],
                    "type": "dict"
                },
                "count": {
                    "default": 1,
                    "description": [
                        "Number of instances to launch"
                    ],
                    "type": "int"
                },
                "count_attributes": {
                    "description": [
                        "A dictionary of key/value attributes that can only be used with",
                        "C(exact_count) to determine how many nodes based on a specific",
                        "attributes criteria should be deployed. This can be expressed in",
                        "multiple ways and is shown in the EXAMPLES section."
                    ],
                    "type": "dict"
                },
                "count_labels": {
                    "description": [
                        "A list of labels that can only be used with C(exact_count) to determine",
                        "how many nodes based on a specific labels criteria should be deployed.",
                        "This can be expressed in multiple ways and is shown in the EXAMPLES",
                        "section."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "cpu": {
                    "description": [
                        "Percentage of CPU divided by 100 required for the new instance. Half a",
                        "processor is written 0.5."
                    ],
                    "type": "float"
                },
                "datastore_id": {
                    "description": [
                        "Name of Datastore to use to create a new instace"
                    ],
                    "type": "int",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.general"
                },
                "datastore_name": {
                    "description": [
                        "Name of Datastore to use to create a new instace"
                    ],
                    "type": "str",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.general"
                },
                "disk_saveas": {
                    "description": [
                        "Creates an image from a VM disk.",
                        "It is a dictionary where you have to specify C(name) of the new image.",
                        "Optionally you can specify C(disk_id) of the disk you want to save. By default C(disk_id) is 0.",
                        "I(NOTE)':' This operation will only be performed on the first VM (if more than one VM ID is passed)",
                        "and the VM has to be in the C(poweredoff) state.",
                        "Also this operation will fail if an image with specified C(name) already exists."
                    ],
                    "type": "dict"
                },
                "disk_size": {
                    "description": [
                        "The size of the disk created for new instances (in MB, GB, TB,...).",
                        "NOTE':' If The Template hats Multiple Disks the Order of the Sizes is",
                        "matched against the order specified in C(template_id)/C(template_name)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "exact_count": {
                    "description": [
                        "Indicates how many instances that match C(count_attributes) and",
                        "C(count_labels) parameters should be deployed. Instances are either",
                        "created or terminated based on this value.",
                        "NOTE':' Instances with the least IDs will be terminated first."
                    ],
                    "type": "int"
                },
                "group_id": {
                    "description": [
                        "ID of the group which will be set as the group of the instance"
                    ],
                    "type": "int"
                },
                "hard": {
                    "default": false,
                    "description": [
                        "Reboot, power-off or terminate instances C(hard)"
                    ],
                    "type": "bool"
                },
                "instance_ids": {
                    "aliases": [
                        "ids"
                    ],
                    "description": [
                        "A list of instance ids used for states':' C(absent), C(running), C(rebooted), C(poweredoff)"
                    ],
                    "elements": "int",
                    "type": "list"
                },
                "labels": {
                    "default": [],
                    "description": [
                        "A list of labels to associate with new instances, or for setting",
                        "C(state) of instances with these labels."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "memory": {
                    "description": [
                        "The size of the memory for new instances (in MB, GB, ...)"
                    ],
                    "type": "str"
                },
                "mode": {
                    "description": [
                        "Set permission mode of the instance in octet format, e.g. C(600) to give owner C(use) and C(manage) and nothing to group and others."
                    ],
                    "type": "str"
                },
                "networks": {
                    "default": [],
                    "description": [
                        "A list of dictionaries with network parameters. See examples for more details."
                    ],
                    "elements": "dict",
                    "type": "list"
                },
                "owner_id": {
                    "description": [
                        "ID of the user which will be set as the owner of the instance"
                    ],
                    "type": "int"
                },
                "persistent": {
                    "default": false,
                    "description": [
                        "Create a private persistent copy of the template plus any image defined in DISK, and instantiate that copy."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.general"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent",
                        "running",
                        "rebooted",
                        "poweredoff"
                    ],
                    "default": "present",
                    "description": [
                        "C(present) - create instances from a template specified with C(template_id)/C(template_name).",
                        "C(running) - run instances",
                        "C(poweredoff) - power-off instances",
                        "C(rebooted) - reboot instances",
                        "C(absent) - terminate instances"
                    ],
                    "type": "str"
                },
                "template_id": {
                    "description": [
                        "ID of a VM template to use to create a new instance"
                    ],
                    "type": "int"
                },
                "template_name": {
                    "description": [
                        "Name of VM template to use to create a new instace"
                    ],
                    "type": "str"
                },
                "vcpu": {
                    "description": [
                        "Number of CPUs (cores) new VM will have."
                    ],
                    "type": "int"
                },
                "vm_start_on_hold": {
                    "default": false,
                    "description": [
                        "Set to true to put vm on hold while creating"
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Wait for the instance to reach its desired state before returning. Keep",
                        "in mind if you are waiting for instance to be in running state it",
                        "doesn't mean that you will be able to SSH on that machine only that",
                        "boot process have started on that instance, see 'wait_for' example for",
                        "details."
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 300,
                    "description": [
                        "How long before wait gives up, in seconds"
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "pyone"
            ],
            "short_description": "Creates or terminates OpenNebula instances"
        },
        "examples": "\n- name: Create a new instance\n  community.general.one_vm:\n    template_id: 90\n  register: result\n\n- name: Print VM properties\n  ansible.builtin.debug:\n    msg: result\n\n- name: Deploy a new VM on hold\n  community.general.one_vm:\n    template_name: 'app1_template'\n    vm_start_on_hold: 'True'\n\n- name: Deploy a new VM and set its name to 'foo'\n  community.general.one_vm:\n    template_name: 'app1_template'\n    attributes:\n      name: foo\n\n- name: Deploy a new VM and set its group_id and mode\n  community.general.one_vm:\n    template_id: 90\n    group_id: 16\n    mode: 660\n\n- name: Deploy a new VM  as persistent\n  community.general.one_vm:\n    template_id: 90\n    persistent: yes\n\n- name: Change VM's permissions to 640\n  community.general.one_vm:\n    instance_ids: 5\n    mode: 640\n\n- name: Deploy 2 new instances and set memory, vcpu, disk_size and 3 networks\n  community.general.one_vm:\n    template_id: 15\n    disk_size: 35.2 GB\n    memory: 4 GB\n    vcpu: 4\n    count: 2\n    networks:\n      - NETWORK_ID: 27\n      - NETWORK: \"default-network\"\n        NETWORK_UNAME: \"app-user\"\n        SECURITY_GROUPS: \"120,124\"\n      - NETWORK_ID: 27\n        SECURITY_GROUPS: \"10\"\n\n- name: Deploy a new instance which uses a Template with two Disks\n  community.general.one_vm:\n    template_id: 42\n    disk_size:\n      - 35.2 GB\n      - 50 GB\n    memory: 4 GB\n    vcpu: 4\n    count: 1\n    networks:\n      - NETWORK_ID: 27\n\n- name: \"Deploy an new instance with attribute 'bar: bar1' and set its name to 'foo'\"\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: foo\n      bar: bar1\n\n- name: \"Enforce that 2 instances with attributes 'foo1: app1' and 'foo2: app2' are deployed\"\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      foo1: app1\n      foo2: app2\n    exact_count: 2\n    count_attributes:\n      foo1: app1\n      foo2: app2\n\n- name: Enforce that 4 instances with an attribute 'bar' are deployed\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: app\n      bar: bar2\n    exact_count: 4\n    count_attributes:\n      bar:\n\n# Deploy 2 new instances with attribute 'foo: bar' and labels 'app1' and 'app2' and names in format 'fooapp-##'\n# Names will be: fooapp-00 and fooapp-01\n- name: Deploy 2 new instances\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: fooapp-##\n      foo: bar\n    labels:\n      - app1\n      - app2\n    count: 2\n\n# Deploy 2 new instances with attribute 'app: app1' and names in format 'fooapp-###'\n# Names will be: fooapp-002 and fooapp-003\n- name: Deploy 2 new instances\n  community.general.one_vm:\n    template_id: 53\n    attributes:\n      name: fooapp-###\n      app: app1\n    count: 2\n\n# Reboot all instances with name in format 'fooapp-#'\n# Instances 'fooapp-00', 'fooapp-01', 'fooapp-002' and 'fooapp-003' will be rebooted\n- name: Reboot all instances with names in a certain format\n  community.general.one_vm:\n    attributes:\n      name: fooapp-#\n    state: rebooted\n\n# Enforce that only 1 instance with name in format 'fooapp-#' is deployed\n# The task will delete oldest instances, so only the 'fooapp-003' will remain\n- name: Enforce that only 1 instance with name in a certain format is deployed\n  community.general.one_vm:\n    template_id: 53\n    exact_count: 1\n    count_attributes:\n      name: fooapp-#\n\n- name: Deploy an new instance with a network\n  community.general.one_vm:\n    template_id: 53\n    networks:\n      - NETWORK_ID: 27\n  register: vm\n\n- name: Wait for SSH to come up\n  ansible.builtin.wait_for_connection:\n  delegate_to: '{{ vm.instances[0].networks[0].ip }}'\n\n- name: Terminate VMs by ids\n  community.general.one_vm:\n    instance_ids:\n      - 153\n      - 160\n    state: absent\n\n- name: Reboot all VMs that have labels 'foo' and 'app1'\n  community.general.one_vm:\n    labels:\n      - foo\n      - app1\n    state: rebooted\n\n- name: \"Fetch all VMs that have name 'foo' and attribute 'app: bar'\"\n  community.general.one_vm:\n    attributes:\n      name: foo\n      app: bar\n  register: results\n\n- name: Deploy 2 new instances with labels 'foo1' and 'foo2'\n  community.general.one_vm:\n    template_name: app_template\n    labels:\n      - foo1\n      - foo2\n    count: 2\n\n- name: Enforce that only 1 instance with label 'foo1' will be running\n  community.general.one_vm:\n    template_name: app_template\n    labels:\n      - foo1\n    exact_count: 1\n    count_labels:\n      - foo1\n\n- name: Terminate all instances that have attribute foo\n  community.general.one_vm:\n    template_id: 53\n    exact_count: 0\n    count_attributes:\n      foo:\n\n- name: \"Power-off the VM and save VM's disk with id=0 to the image with name 'foo-image'\"\n  community.general.one_vm:\n    instance_ids: 351\n    state: poweredoff\n    disk_saveas:\n      name: foo-image\n\n- name: \"Save VM's disk with id=1 to the image with name 'bar-image'\"\n  community.general.one_vm:\n    instance_ids: 351\n    disk_saveas:\n      name: bar-image\n      disk_id: 1\n",
        "metadata": null,
        "return": {
            "instances": {
                "contains": {
                    "attributes": {
                        "description": "A dictionary of key/values attributes that are associated with the instance",
                        "sample": {
                            "HYPERVISOR": "kvm",
                            "LOGO": "images/logos/centos.png",
                            "TE_GALAXY": "bar",
                            "USER_INPUTS": null
                        },
                        "type": "dict"
                    },
                    "cpu": {
                        "description": "Percentage of CPU divided by 100",
                        "sample": 0.2,
                        "type": "float"
                    },
                    "disk_size": {
                        "description": "The size of the disk in MB",
                        "sample": "20480 MB",
                        "type": "str"
                    },
                    "group_id": {
                        "description": "vm's group id",
                        "sample": 1,
                        "type": "int"
                    },
                    "group_name": {
                        "description": "vm's group name",
                        "sample": "one-users",
                        "type": "str"
                    },
                    "labels": {
                        "description": "A list of string labels that are associated with the instance",
                        "sample": [
                            "foo",
                            "spec-label"
                        ],
                        "type": "list"
                    },
                    "lcm_state": {
                        "description": "lcm state of an instance that is only relevant when the state is ACTIVE",
                        "sample": "RUNNING",
                        "type": "str"
                    },
                    "memory": {
                        "description": "The size of the memory in MB",
                        "sample": "4096 MB",
                        "type": "str"
                    },
                    "mode": {
                        "description": "vm's mode",
                        "returned": "success",
                        "sample": 660,
                        "type": "str"
                    },
                    "networks": {
                        "description": "a list of dictionaries with info about IP, NAME, MAC, SECURITY_GROUPS for each NIC",
                        "sample": [
                            {
                                "ip": "10.120.5.33",
                                "mac": "02:00:0a:78:05:21",
                                "name": "default-test-private",
                                "security_groups": "0,10"
                            },
                            {
                                "ip": "10.120.5.34",
                                "mac": "02:00:0a:78:05:22",
                                "name": "default-test-private",
                                "security_groups": "0"
                            }
                        ],
                        "type": "list"
                    },
                    "owner_id": {
                        "description": "vm's owner id",
                        "sample": 143,
                        "type": "int"
                    },
                    "owner_name": {
                        "description": "vm's owner name",
                        "sample": "app-user",
                        "type": "str"
                    },
                    "state": {
                        "description": "state of an instance",
                        "sample": "ACTIVE",
                        "type": "str"
                    },
                    "template_id": {
                        "description": "vm's template id",
                        "sample": 153,
                        "type": "int"
                    },
                    "uptime_h": {
                        "description": "Uptime of the instance in hours",
                        "sample": 35,
                        "type": "int"
                    },
                    "vcpu": {
                        "description": "Number of CPUs (cores)",
                        "sample": 2,
                        "type": "int"
                    },
                    "vm_id": {
                        "description": "vm id",
                        "sample": 153,
                        "type": "int"
                    },
                    "vm_name": {
                        "description": "vm name",
                        "sample": "foo",
                        "type": "str"
                    }
                },
                "description": "a list of instances info whose state is changed or which are fetched with C(instance_ids) option.",
                "returned": "success",
                "type": "complex"
            },
            "instances_ids": {
                "description": "a list of instances ids whose state is changed or which are fetched with C(instance_ids) option.",
                "returned": "success",
                "sample": [
                    1234,
                    1235
                ],
                "type": "list"
            },
            "tagged_instances": {
                "contains": {
                    "attributes": {
                        "description": "A dictionary of key/values attributes that are associated with the instance",
                        "sample": {
                            "HYPERVISOR": "kvm",
                            "LOGO": "images/logos/centos.png",
                            "TE_GALAXY": "bar",
                            "USER_INPUTS": null
                        },
                        "type": "dict"
                    },
                    "cpu": {
                        "description": "Percentage of CPU divided by 100",
                        "sample": 0.2,
                        "type": "float"
                    },
                    "disk_size": {
                        "description": "The size of the disk in MB",
                        "sample": [
                            "20480 MB",
                            "10240 MB"
                        ],
                        "type": "list"
                    },
                    "group_id": {
                        "description": "vm's group id",
                        "sample": 1,
                        "type": "int"
                    },
                    "group_name": {
                        "description": "vm's group name",
                        "sample": "one-users",
                        "type": "str"
                    },
                    "labels": {
                        "description": "A list of string labels that are associated with the instance",
                        "sample": [
                            "foo",
                            "spec-label"
                        ],
                        "type": "list"
                    },
                    "lcm_state": {
                        "description": "lcm state of an instance that is only relevant when the state is ACTIVE",
                        "sample": "RUNNING",
                        "type": "str"
                    },
                    "memory": {
                        "description": "The size of the memory in MB",
                        "sample": "4096 MB",
                        "type": "str"
                    },
                    "mode": {
                        "description": "vm's mode",
                        "returned": "success",
                        "sample": 660,
                        "type": "str"
                    },
                    "networks": {
                        "description": "a list of dictionaries with info about IP, NAME, MAC, SECURITY_GROUPS for each NIC",
                        "sample": [
                            {
                                "ip": "10.120.5.33",
                                "mac": "02:00:0a:78:05:21",
                                "name": "default-test-private",
                                "security_groups": "0,10"
                            },
                            {
                                "ip": "10.120.5.34",
                                "mac": "02:00:0a:78:05:22",
                                "name": "default-test-private",
                                "security_groups": "0"
                            }
                        ],
                        "type": "list"
                    },
                    "owner_id": {
                        "description": "vm's user id",
                        "sample": 143,
                        "type": "int"
                    },
                    "owner_name": {
                        "description": "vm's user name",
                        "sample": "app-user",
                        "type": "str"
                    },
                    "state": {
                        "description": "state of an instance",
                        "sample": "ACTIVE",
                        "type": "str"
                    },
                    "template_id": {
                        "description": "vm's template id",
                        "sample": 153,
                        "type": "int"
                    },
                    "uptime_h": {
                        "description": "Uptime of the instance in hours",
                        "sample": 35,
                        "type": "int"
                    },
                    "vcpu": {
                        "description": "Number of CPUs (cores)",
                        "sample": 2,
                        "type": "int"
                    },
                    "vm_id": {
                        "description": "vm id",
                        "sample": 153,
                        "type": "int"
                    },
                    "vm_name": {
                        "description": "vm name",
                        "sample": "foo",
                        "type": "str"
                    }
                },
                "description": [
                    "A list of instances info based on a specific attributes and/or",
                    "labels that are specified with C(count_attributes) and C(count_labels)",
                    "options."
                ],
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
