{
    "fortinet.fortimanager.fmgr_fact": {
        "doc": {
            "author": [
                "Link Zheng (@chillancezen)",
                "Jie Xue (@JieX19)",
                "Frank Shen (@fshen01)",
                "Hongbin Lu (@fgtdev-hblu)"
            ],
            "collection": "fortinet.fortimanager",
            "description": [
                "This module is able to configure a FortiManager device.",
                "Examples include all parameters and values which need to be adjusted to data sources before usage."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/fortinet/fortimanager/plugins/modules/fmgr_fact.py",
            "has_action": false,
            "module": "fmgr_fact",
            "notes": [
                "Running in workspace locking mode is supported in this FortiManager module, the top level parameters workspace_locking_adom and workspace_locking_timeout help do the work.",
                "Normally, running one module can fail when a non-zero rc is returned. you can also override the conditions to fail or succeed with parameters rc_failed and rc_succeeded"
            ],
            "options": {
                "bypass_validation": {
                    "default": false,
                    "description": "only set to True when module schema diffs with FortiManager API structure, module continues to execute without validating parameters",
                    "required": false,
                    "type": "bool"
                },
                "facts": {
                    "description": "the top level parameters set",
                    "required": false,
                    "type": "dict"
                },
                "rc_failed": {
                    "description": "the rc codes list with which the conditions to fail will be overriden",
                    "required": false,
                    "type": "list"
                },
                "rc_succeeded": {
                    "description": "the rc codes list with which the conditions to succeed will be overriden",
                    "required": false,
                    "type": "list"
                },
                "workspace_locking_adom": {
                    "description": "the adom to lock for FortiManager running in workspace mode, the value can be global and others including root",
                    "required": false,
                    "type": "str"
                },
                "workspace_locking_timeout": {
                    "default": 300,
                    "description": "the maximum time in seconds to wait for other user to release the workspace lock",
                    "required": false,
                    "type": "int"
                }
            },
            "short_description": "Gather fortimanager facts.",
            "version_added": "2.10",
            "version_added_collection": "fortinet.fortimanager"
        },
        "examples": "\n- name: gathering fortimanager facts\n  hosts: fortimanager01\n  gather_facts: no\n  connection: httpapi\n  collections:\n    - fortinet.fortimanager\n  vars:\n    ansible_httpapi_use_ssl: True\n    ansible_httpapi_validate_certs: False\n    ansible_httpapi_port: 443\n  tasks:\n   - name: retrieve all the scripts\n     fmgr_fact:\n       facts:\n           selector: 'dvmdb_script'\n           params:\n               adom: 'root'\n               script: ''\n\n   - name: retrive all the interfaces\n     fmgr_fact:\n       facts:\n           selector: 'system_interface'\n           params:\n               interface: ''\n   - name: retrieve the interface port1\n     fmgr_fact:\n       facts:\n           selector: 'system_interface'\n           params:\n               interface: 'port1'\n   - name: fetch urlfilter with name urlfilter4\n     fmgr_fact:\n       facts:\n         selector: 'webfilter_urlfilter'\n         params:\n           adom: 'root'\n           urlfilter: ''\n         filter:\n           -\n             - 'name'\n             - '=='\n             - 'urlfilter4'\n         fields:\n           - 'id'\n           - 'name'\n           - 'comment'\n         sortings:\n           - 'id': 1\n             'name': -1\n   - name: Retrieve device\n     fmgr_fact:\n       facts:\n         selector: 'dvmdb_device'\n         params:\n           adom: 'root'\n           device: ''\n         option:\n           - 'get meta'\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": {
            "request_url": {
                "description": "The full url requested",
                "returned": "always",
                "sample": "/sys/login/user",
                "type": "str"
            },
            "response_code": {
                "description": "The status of api request",
                "returned": "always",
                "sample": 0,
                "type": "int"
            },
            "response_message": {
                "description": "The descriptive message of the api response",
                "returned": "always",
                "sample": "OK.",
                "type": "str"
            }
        }
    }
}
