{
    "community.network.ce_netconf": {
        "doc": {
            "author": [
                "wangdezhuang (@QijunPan)"
            ],
            "collection": "community.network",
            "description": [
                "Sends an arbitrary netconf command on HUAWEI CloudEngine switches."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/network/plugins/modules/ce_netconf.py",
            "has_action": false,
            "module": "ce_netconf",
            "notes": [
                "This module requires the netconf system service be enabled on the remote device being managed.",
                "Recommended connection is C(netconf).",
                "This module also works with C(local) connections for legacy playbooks."
            ],
            "options": {
                "cfg_xml": {
                    "description": [
                        "The config xml string."
                    ],
                    "required": true
                },
                "rpc": {
                    "choices": [
                        "get",
                        "edit-config",
                        "execute-action",
                        "execute-cli"
                    ],
                    "description": [
                        "The type of rpc."
                    ],
                    "required": true
                }
            },
            "short_description": "Run an arbitrary netconf command on HUAWEI CloudEngine switches."
        },
        "examples": "\n\n- name: CloudEngine netconf test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n\n  tasks:\n\n  - name: \"Netconf get operation\"\n    community.network.ce_netconf:\n      rpc: get\n      cfg_xml: '<filter type=\"subtree\">\n                  <vlan xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n                    <vlans>\n                      <vlan>\n                        <vlanId>10</vlanId>\n                        <vlanif>\n                          <ifName></ifName>\n                          <cfgBand></cfgBand>\n                          <dampTime></dampTime>\n                        </vlanif>\n                      </vlan>\n                    </vlans>\n                  </vlan>\n                </filter>'\n      provider: \"{{ cli }}\"\n\n  - name: \"Netconf edit-config operation\"\n    community.network.ce_netconf:\n      rpc: edit-config\n      cfg_xml: '<config>\n                    <aaa xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n                      <authenticationSchemes>\n                        <authenticationScheme operation=\"create\">\n                          <authenSchemeName>default_wdz</authenSchemeName>\n                          <firstAuthenMode>local</firstAuthenMode>\n                          <secondAuthenMode>invalid</secondAuthenMode>\n                        </authenticationScheme>\n                      </authenticationSchemes>\n                    </aaa>\n                   </config>'\n      provider: \"{{ cli }}\"\n\n  - name: \"Netconf execute-action operation\"\n    community.network.ce_netconf:\n      rpc: execute-action\n      cfg_xml: '<action>\n                     <l2mc xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n                       <l2McResetAllVlanStatis>\n                         <addrFamily>ipv4unicast</addrFamily>\n                       </l2McResetAllVlanStatis>\n                     </l2mc>\n                   </action>'\n      provider: \"{{ cli }}\"\n",
        "metadata": null,
        "return": {
            "changed": {
                "description": "check to see if a change was made on the device",
                "returned": "always",
                "sample": true,
                "type": "bool"
            },
            "end_state": {
                "description": "k/v pairs of aaa params after module execution",
                "returned": "always",
                "sample": {
                    "result": [
                        "ok"
                    ]
                },
                "type": "dict"
            }
        }
    }
}
