{
    "community.mongodb.mongodb_shell": {
        "doc": {
            "author": "Rhys Campbell (@rhysmeister)",
            "collection": "community.mongodb",
            "description": [
                "Run commands via the MongoDB shell.",
                "Commands provided with the eval parameter or included in a Javascript file.",
                "Attempts to parse returned data into a format that Ansible can use."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mongodb/plugins/modules/mongodb_shell.py",
            "has_action": false,
            "module": "mongodb_shell",
            "options": {
                "additional_args": {
                    "description": [
                        "Additional arguments to supply to the mongo command.",
                        "Supply as key-value pairs.",
                        "If the parameter is a valueless flag supply an empty string as the value."
                    ],
                    "type": "raw"
                },
                "db": {
                    "default": "test",
                    "description": [
                        "The database to run commands against"
                    ],
                    "required": false,
                    "type": "str"
                },
                "debug": {
                    "default": false,
                    "description": [
                        "show additional debug info."
                    ],
                    "type": "bool"
                },
                "eval": {
                    "description": [
                        "A MongoDB command to run."
                    ],
                    "type": "str"
                },
                "file": {
                    "description": [
                        "Path to a file containing MongoDB commands."
                    ],
                    "type": "str"
                },
                "idempotent": {
                    "default": false,
                    "description": [
                        "Provides a form of pseudo-idempotency to the module.",
                        "We perform a hash calculation on the contents of the eval key or the file name provided in the file key.",
                        "When the command is first execute a filed called <hash>.success will be created.",
                        "The module will not rerun the command if this file exists and idempotent is set to true."
                    ],
                    "type": "bool"
                },
                "login_database": {
                    "default": "admin",
                    "description": [
                        "The database where login credentials are stored."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "The host running MongoDB instance to login to."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with.",
                        "Required when I(login_user) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_port": {
                    "default": 27017,
                    "description": [
                        "The MongoDB server port to login to."
                    ],
                    "required": false,
                    "type": "int"
                },
                "login_user": {
                    "description": [
                        "The MongoDB user to login with.",
                        "Required when I(login_password) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "mongo_cmd": {
                    "default": "mongo",
                    "description": [
                        "The MongoDB shell command."
                    ],
                    "type": "str"
                },
                "nodb": {
                    "default": false,
                    "description": [
                        "Specify a non-default encoding for output."
                    ],
                    "type": "bool"
                },
                "norc": {
                    "default": false,
                    "description": [
                        "Prevents the shell from sourcing and evaluating ~/.mongorc.js on start up."
                    ],
                    "type": "bool"
                },
                "quiet": {
                    "default": true,
                    "description": [
                        "Silences output from the shell during the connection process.."
                    ],
                    "type": "bool"
                },
                "split_char": {
                    "default": " ",
                    "description": [
                        "Used by the split action in the transform stage."
                    ],
                    "type": "str"
                },
                "stringify": {
                    "default": false,
                    "description": [
                        "Wraps the command in eval in JSON.stringify(<js cmd>).",
                        "Useful for escaping documents that are returned in Extended JSON format."
                    ],
                    "type": "bool"
                },
                "transform": {
                    "choices": [
                        "auto",
                        "split",
                        "json",
                        "raw"
                    ],
                    "default": "auto",
                    "description": [
                        "Transform the output returned to the user.",
                        "auto - Attempt to automatically decide the best tranformation.",
                        "split - Split output on a character.",
                        "json - parse as json.",
                        "raw - Return the raw output."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "mongo"
            ],
            "short_description": "Run commands via the MongoDB shell."
        },
        "examples": "\n- name: Run the listDatabases command\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.adminCommand('listDatabases')\"\n\n- name: List collections and stringify the output\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.adminCommand('listCollections')\"\n    stringify: yes\n\n- name: Run the showBuiltinRoles command\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.getRoles({showBuiltinRoles: true})\"\n\n- name: Run a js file containing MongoDB commands with pseudo-idempotency\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    file: \"/path/to/mongo/file.js\"\n    idempotent: yes\n\n- name: Provide a couple of additional cmd args\n  community.mongodb.mongodb_shell:\n    login_user: user\n    login_password: secret\n    eval: \"db.adminCommand('listDatabases')\"\n    additional_args:\n      verbose: True\n      networkMessageCompressors: \"snappy\"\n",
        "metadata": null,
        "return": {
            "changed": {
                "description": "Change status.",
                "returned": "always",
                "type": "bool"
            },
            "err": {
                "description": "Raw stderr from mongo.",
                "returned": "when debug is set to true",
                "type": "str"
            },
            "failed": {
                "description": "Something went wrong.",
                "returned": "on failure",
                "type": "bool"
            },
            "file": {
                "description": "JS file that was executed successfully.",
                "returned": "When a js file is used.",
                "type": "str"
            },
            "msg": {
                "description": "A message indicating what has happened.",
                "returned": "always",
                "type": "str"
            },
            "out": {
                "description": "Raw stdout from mongo.",
                "returned": "when debug is set to true",
                "type": "str"
            },
            "rc": {
                "description": "Return code from mongo.",
                "returned": "when debug is set to true",
                "type": "int"
            },
            "transformed_output": {
                "description": "Output from the mongo command. We attempt to parse this into a list or json where possible.",
                "returned": "on success",
                "type": "list"
            }
        }
    }
}
