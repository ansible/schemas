{
    "community.mysql.mysql_variables": {
        "doc": {
            "author": [
                "Balazs Pocze (@banyek)"
            ],
            "collection": "community.mysql",
            "description": [
                "Query / Set MySQL variables."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mysql/plugins/modules/mysql_variables.py",
            "has_action": false,
            "module": "mysql_variables",
            "notes": [
                "Does not support C(check_mode).",
                "Requires the PyMySQL (Python 2.7 and Python 3.X) or MySQL-python (Python 2.X) package installed on the remote host. The Python package may be installed with apt-get install python-pymysql (Ubuntu; see M(ansible.builtin.apt)) or yum install python2-PyMySQL (RHEL/CentOS/Fedora; see M(ansible.builtin.yum)). You can also use dnf install python2-PyMySQL for newer versions of Fedora; see M(ansible.builtin.dnf).",
                "Be sure you have PyMySQL or MySQLdb library installed on the target machine for the Python interpreter Ansible uses, for example, if it is Python 3, you must install the library for Python 3. You can also change the interpreter. For more information, see U(https://docs.ansible.com/ansible/latest/reference_appendices/interpreter_discovery.html).",
                "Both C(login_password) and C(login_user) are required when you are passing credentials. If none are present, the module will attempt to read the credentials from C(~/.my.cnf), and finally fall back to using the MySQL default login of 'root' with no password.",
                "If there are problems with local connections, using I(login_unix_socket=/path/to/mysqld/socket) instead of I(login_host=localhost) might help. As an example, the default MariaDB installation of version 10.4 and later uses the unix_socket authentication plugin by default that without using I(login_unix_socket=/var/run/mysqld/mysqld.sock) (the default path) causes the error ``Host '127.0.0.1' is not allowed to connect to this MariaDB server``.",
                "Alternatively, you can use the mysqlclient library instead of MySQL-python (MySQLdb) which supports both Python 2.X and Python >=3.5. See U(https://pypi.org/project/mysqlclient/) how to install it."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_ca"
                    ],
                    "description": [
                        "The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server."
                    ],
                    "type": "path"
                },
                "check_hostname": {
                    "description": [
                        "Whether to validate the server host name when an SSL connection is required. Corresponds to MySQL CLIs C(--ssl) switch.",
                        "Setting this to C(false) disables hostname verification. Use with caution.",
                        "Requires pymysql >= 0.7.11.",
                        "This optoin has no effect on MySQLdb."
                    ],
                    "type": "bool",
                    "version_added": "1.1.0",
                    "version_added_collection": "community.mysql"
                },
                "client_cert": {
                    "aliases": [
                        "ssl_cert"
                    ],
                    "description": [
                        "The path to a client public key certificate."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "ssl_key"
                    ],
                    "description": [
                        "The path to the client private key."
                    ],
                    "type": "path"
                },
                "config_file": {
                    "default": "~/.my.cnf",
                    "description": [
                        "Specify a config file from which user and password are to be read."
                    ],
                    "type": "path"
                },
                "connect_timeout": {
                    "default": 30,
                    "description": [
                        "The connection timeout when connecting to the MySQL server."
                    ],
                    "type": "int"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "Host running the database.",
                        "In some cases for local connections the I(login_unix_socket=/path/to/mysqld/socket), that is usually C(/var/run/mysqld/mysqld.sock), needs to be used instead of I(login_host=localhost)."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_port": {
                    "default": 3306,
                    "description": [
                        "Port of the MySQL server. Requires I(login_host) be defined as other than localhost if login_port is used."
                    ],
                    "type": "int"
                },
                "login_unix_socket": {
                    "description": [
                        "The path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "mode": {
                    "choices": [
                        "global",
                        "persist",
                        "persist_only"
                    ],
                    "default": "global",
                    "description": [
                        "C(global) assigns C(value) to a global system variable which will be changed at runtime but won't persist across server restarts.",
                        "C(persist) assigns C(value) to a global system variable and persists it to the mysqld-auto.cnf option file in the data directory (the variable will survive service restarts).",
                        "C(persist_only) persists C(value) to the mysqld-auto.cnf option file in the data directory but without setting the global variable runtime value (the value will be changed after the next service restart).",
                        "Supported by MySQL 8.0 or later.",
                        "For more information see U(https://dev.mysql.com/doc/refman/8.0/en/set-variable.html)."
                    ],
                    "type": "str",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "value": {
                    "description": [
                        "If set, then sets variable value to this."
                    ],
                    "type": "str"
                },
                "variable": {
                    "description": [
                        "Variable name to operate."
                    ],
                    "required": true,
                    "type": "str"
                }
            },
            "requirements": [
                "PyMySQL (Python 2.7 and Python 3.X), or",
                "MySQLdb (Python 2.x)"
            ],
            "seealso": [
                {
                    "module": "community.mysql.mysql_info"
                },
                {
                    "description": "Complete reference of the MySQL SET command documentation.",
                    "link": "https://dev.mysql.com/doc/refman/8.0/en/set-statement.html",
                    "name": "MySQL SET command reference"
                }
            ],
            "short_description": "Manage MySQL global variables"
        },
        "examples": "\n- name: Check for sync_binlog setting\n  community.mysql.mysql_variables:\n    variable: sync_binlog\n\n- name: Set read_only variable to 1 persistently\n  community.mysql.mysql_variables:\n    variable: read_only\n    value: 1\n    mode: persist\n",
        "metadata": null,
        "return": {
            "queries": {
                "description": "List of executed queries which modified DB's state.",
                "returned": "if executed",
                "sample": [
                    "SET GLOBAL `read_only` = 1"
                ],
                "type": "list",
                "version_added": "0.1.0",
                "version_added_collection": "community.mysql"
            }
        }
    }
}
