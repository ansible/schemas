{
    "copy": {
        "doc": {
            "author": [
                "Ansible Core Team",
                "Michael DeHaan"
            ],
            "collection": "ansible.builtin",
            "description": [
                "The C(copy) module copies a file from the local or remote machine to a location on the remote machine.",
                "Use the M(ansible.builtin.fetch) module to copy files from remote locations to the local box.",
                "If you need variable interpolation in copied files, use the M(ansible.builtin.template) module. Using a variable in the C(content) field will result in unpredictable output.",
                "For Windows targets, use the M(ansible.windows.win_copy) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/copy.py",
            "has_action": true,
            "module": "copy",
            "notes": [
                "The M(ansible.builtin.copy) module recursively copy facility does not scale to lots (>hundreds) of files.",
                "Supports C(check_mode)."
            ],
            "options": {
                "attributes": {
                    "aliases": [
                        "attr"
                    ],
                    "description": [
                        "The attributes the resulting file or directory should have.",
                        "To get supported flags look at the man page for I(chattr) on the target system.",
                        "This string should contain the attributes in the same order as the one displayed by I(lsattr).",
                        "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."
                    ],
                    "type": "str",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "backup": {
                    "default": false,
                    "description": [
                        "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
                    ],
                    "type": "bool",
                    "version_added": "0.7",
                    "version_added_collection": "ansible.builtin"
                },
                "checksum": {
                    "description": [
                        "SHA1 checksum of the file being transferred.",
                        "Used to validate that the copy of the file was successful.",
                        "If this is not provided, ansible will use the local calculated checksum of the src file."
                    ],
                    "type": "str",
                    "version_added": "2.5",
                    "version_added_collection": "ansible.builtin"
                },
                "content": {
                    "description": [
                        "When used instead of C(src), sets the contents of a file directly to the specified value.",
                        "Works only when C(dest) is a file. Creates the file if it does not exist.",
                        "For advanced formatting or if C(content) contains a variable, use the M(ansible.builtin.template) module."
                    ],
                    "type": "str",
                    "version_added": "1.1",
                    "version_added_collection": "ansible.builtin"
                },
                "decrypt": {
                    "default": true,
                    "description": [
                        "This option controls the autodecryption of source files using vault."
                    ],
                    "type": "bool",
                    "version_added": "2.4",
                    "version_added_collection": "ansible.builtin"
                },
                "dest": {
                    "description": [
                        "Remote absolute path where the file should be copied to.",
                        "If C(src) is a directory, this must be a directory too.",
                        "If C(dest) is a non-existent path and if either C(dest) ends with \"/\" or C(src) is a directory, C(dest) is created.",
                        "If I(dest) is a relative path, the starting directory is determined by the remote host.",
                        "If C(src) and C(dest) are files, the parent directory of C(dest) is not created and the task fails if it does not already exist."
                    ],
                    "required": true,
                    "type": "path"
                },
                "directory_mode": {
                    "description": [
                        "When doing a recursive copy set the mode for the directories.",
                        "If this is not set we will use the system defaults.",
                        "The mode is only set on directories which are newly created, and will not affect those that already existed."
                    ],
                    "type": "raw",
                    "version_added": "1.5",
                    "version_added_collection": "ansible.builtin"
                },
                "follow": {
                    "default": false,
                    "description": [
                        "This flag indicates that filesystem links in the destination, if they exist, should be followed."
                    ],
                    "type": "bool",
                    "version_added": "1.8",
                    "version_added_collection": "ansible.builtin"
                },
                "force": {
                    "aliases": [
                        "thirsty"
                    ],
                    "default": true,
                    "description": [
                        "Influence whether the remote file must always be replaced.",
                        "If C(yes), the remote file will be replaced when contents are different than the source.",
                        "If C(no), the file will only be transferred if the destination does not exist.",
                        "Alias C(thirsty) has been deprecated and will be removed in 2.13."
                    ],
                    "type": "bool",
                    "version_added": "1.1",
                    "version_added_collection": "ansible.builtin"
                },
                "group": {
                    "description": [
                        "Name of the group that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "local_follow": {
                    "default": true,
                    "description": [
                        "This flag indicates that filesystem links in the source tree, if they exist, should be followed."
                    ],
                    "type": "bool",
                    "version_added": "2.4",
                    "version_added_collection": "ansible.builtin"
                },
                "mode": {
                    "description": [
                        "The permissions of the destination file or directory.",
                        "For those used to C(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777))or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.",
                        "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).",
                        "As of Ansible 2.3, the mode may also be the special string C(preserve).",
                        "C(preserve) means that the file will be given the same permissions as the source file.",
                        "When doing a recursive copy, see also C(directory_mode)."
                    ],
                    "type": "path"
                },
                "owner": {
                    "description": [
                        "Name of the user that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "remote_src": {
                    "default": false,
                    "description": [
                        "Influence whether C(src) needs to be transferred or already is present remotely.",
                        "If C(no), it will search for C(src) at originating/master machine.",
                        "If C(yes) it will go to the remote/target machine for the C(src).",
                        "C(remote_src) supports recursive copying as of version 2.8.",
                        "C(remote_src) only works with C(mode=preserve) as of version 2.6."
                    ],
                    "type": "bool",
                    "version_added": "2.0",
                    "version_added_collection": "ansible.builtin"
                },
                "selevel": {
                    "description": [
                        "The level part of the SELinux file context.",
                        "This is the MLS/MCS attribute, sometimes known as the C(range).",
                        "When set to C(_default), it will use the C(level) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "serole": {
                    "description": [
                        "The role part of the SELinux file context.",
                        "When set to C(_default), it will use the C(role) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "setype": {
                    "description": [
                        "The type part of the SELinux file context.",
                        "When set to C(_default), it will use the C(type) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "seuser": {
                    "description": [
                        "The user part of the SELinux file context.",
                        "By default it uses the C(system) policy, where applicable.",
                        "When set to C(_default), it will use the C(user) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "src": {
                    "description": [
                        "Local path to a file to copy to the remote server.",
                        "This can be absolute or relative.",
                        "If path is a directory, it is copied recursively. In this case, if path ends with \"/\", only inside contents of that directory are copied to destination. Otherwise, if it does not end with \"/\", the directory itself with all contents is copied. This behavior is similar to the C(rsync) command line tool."
                    ],
                    "type": "path"
                },
                "unsafe_writes": {
                    "default": false,
                    "description": [
                        "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.",
                        "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.",
                        "This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).",
                        "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."
                    ],
                    "type": "bool",
                    "version_added": "2.2",
                    "version_added_collection": "ansible.builtin"
                },
                "validate": {
                    "description": [
                        "The validation command to run before copying into place.",
                        "The path to the file to validate is passed in via '%s' which must be present as in the examples below.",
                        "The command is passed securely so shell features like expansion and pipes will not work."
                    ],
                    "type": "str"
                }
            },
            "seealso": [
                {
                    "module": "ansible.builtin.assemble"
                },
                {
                    "module": "ansible.builtin.fetch"
                },
                {
                    "module": "ansible.builtin.file"
                },
                {
                    "module": "ansible.builtin.template"
                },
                {
                    "module": "ansible.posix.synchronize"
                },
                {
                    "module": "ansible.windows.win_copy"
                }
            ],
            "short_description": "Copy files to remote locations",
            "version_added": "historical",
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n- name: Copy file with owner and permissions\n  ansible.builtin.copy:\n    src: /srv/myfiles/foo.conf\n    dest: /etc/foo.conf\n    owner: foo\n    group: foo\n    mode: '0644'\n\n- name: Copy file with owner and permission, using symbolic representation\n  ansible.builtin.copy:\n    src: /srv/myfiles/foo.conf\n    dest: /etc/foo.conf\n    owner: foo\n    group: foo\n    mode: u=rw,g=r,o=r\n\n- name: Another symbolic mode example, adding some permissions and removing others\n  ansible.builtin.copy:\n    src: /srv/myfiles/foo.conf\n    dest: /etc/foo.conf\n    owner: foo\n    group: foo\n    mode: u+rw,g-wx,o-rwx\n\n- name: Copy a new \"ntp.conf\" file into place, backing up the original if it differs from the copied version\n  ansible.builtin.copy:\n    src: /mine/ntp.conf\n    dest: /etc/ntp.conf\n    owner: root\n    group: root\n    mode: '0644'\n    backup: yes\n\n- name: Copy a new \"sudoers\" file into place, after passing validation with visudo\n  ansible.builtin.copy:\n    src: /mine/sudoers\n    dest: /etc/sudoers\n    validate: /usr/sbin/visudo -csf %s\n\n- name: Copy a \"sudoers\" file on the remote machine for editing\n  ansible.builtin.copy:\n    src: /etc/sudoers\n    dest: /etc/sudoers.edit\n    remote_src: yes\n    validate: /usr/sbin/visudo -csf %s\n\n- name: Copy using inline content\n  ansible.builtin.copy:\n    content: '# This file was moved to /etc/other.conf'\n    dest: /etc/mine.conf\n\n- name: If follow=yes, /path/to/file will be overwritten by contents of foo.conf\n  ansible.builtin.copy:\n    src: /etc/foo.conf\n    dest: /path/to/link  # link to /path/to/file\n    follow: yes\n\n- name: If follow=no, /path/to/link will become a file and be overwritten by contents of foo.conf\n  ansible.builtin.copy:\n    src: /etc/foo.conf\n    dest: /path/to/link  # link to /path/to/file\n    follow: no\n",
        "metadata": null,
        "return": {
            "backup_file": {
                "description": "Name of backup file created.",
                "returned": "changed and if backup=yes",
                "sample": "/path/to/file.txt.2015-02-12@22:09~",
                "type": "str"
            },
            "checksum": {
                "description": "SHA1 checksum of the file after running copy.",
                "returned": "success",
                "sample": "6e642bb8dd5c2e027bf21dd923337cbb4214f827",
                "type": "str"
            },
            "dest": {
                "description": "Destination file/path.",
                "returned": "success",
                "sample": "/path/to/file.txt",
                "type": "str"
            },
            "gid": {
                "description": "Group id of the file, after execution.",
                "returned": "success",
                "sample": 100,
                "type": "int"
            },
            "group": {
                "description": "Group of the file, after execution.",
                "returned": "success",
                "sample": "httpd",
                "type": "str"
            },
            "md5sum": {
                "description": "MD5 checksum of the file after running copy.",
                "returned": "when supported",
                "sample": "2a5aeecc61dc98c4d780b14b330e3282",
                "type": "str"
            },
            "mode": {
                "description": "Permissions of the target, after execution.",
                "returned": "success",
                "sample": 420,
                "type": "str"
            },
            "owner": {
                "description": "Owner of the file, after execution.",
                "returned": "success",
                "sample": "httpd",
                "type": "str"
            },
            "size": {
                "description": "Size of the target, after execution.",
                "returned": "success",
                "sample": 1220,
                "type": "int"
            },
            "src": {
                "description": "Source file used for the copy on the target machine.",
                "returned": "changed",
                "sample": "/home/httpd/.ansible/tmp/ansible-tmp-1423796390.97-147729857856000/source",
                "type": "str"
            },
            "state": {
                "description": "State of the target, after execution.",
                "returned": "success",
                "sample": "file",
                "type": "str"
            },
            "uid": {
                "description": "Owner id of the file, after execution.",
                "returned": "success",
                "sample": 100,
                "type": "int"
            }
        }
    }
}
