{
    "community.aws.ecs_service_facts": {
        "doc": {
            "author": [
                "Mark Chance (@Java1Guy)",
                "Darek Kaczynski (@kaczynskid)"
            ],
            "collection": "community.aws",
            "description": [
                "Lists or describes services in ECS.",
                "This module was called C(ecs_service_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.aws.ecs_service_info) module no longer returns C(ansible_facts)!"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ecs_service_facts.py",
            "has_action": false,
            "module": "ecs_service_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "cluster": {
                    "description": [
                        "The cluster ARNS in which to list the services."
                    ],
                    "required": false,
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "details": {
                    "default": false,
                    "description": [
                        "Set this to true if you want detailed information about the services."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "events": {
                    "default": true,
                    "description": [
                        "Whether to return ECS service events. Only has an effect if I(details=true)."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "service": {
                    "description": [
                        "One or more services to get details for"
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "json",
                "python >= 2.6"
            ],
            "short_description": "List or describe services in ECS",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Basic listing example\n- community.aws.ecs_service_info:\n    cluster: test-cluster\n    service: console-test-service\n    details: true\n  register: output\n\n# Basic listing example\n- community.aws.ecs_service_info:\n    cluster: test-cluster\n  register: output\n",
        "metadata": null,
        "return": {
            "services": {
                "contains": {
                    "clusterArn": {
                        "description": "The Amazon Resource Name (ARN) of the of the cluster that hosts the service.",
                        "returned": "always",
                        "type": "str"
                    },
                    "deployments": {
                        "description": "list of service deployments",
                        "elements": "dict",
                        "returned": "always",
                        "type": "list"
                    },
                    "desiredCount": {
                        "description": "The desired number of instantiations of the task definition to keep running on the service.",
                        "returned": "always",
                        "type": "int"
                    },
                    "events": {
                        "description": "list of service events",
                        "elements": "dict",
                        "returned": "when events is true",
                        "type": "list"
                    },
                    "loadBalancers": {
                        "contains": {
                            "containerName": {
                                "description": "The name of the container to associate with the load balancer.",
                                "returned": "always",
                                "type": "str"
                            },
                            "containerPort": {
                                "description": "The port on the container to associate with the load balancer.",
                                "returned": "always",
                                "type": "int"
                            },
                            "loadBalancerName": {
                                "description": "the name",
                                "returned": "always",
                                "type": "str"
                            }
                        },
                        "description": "A list of load balancer objects",
                        "returned": "always",
                        "type": "complex"
                    },
                    "pendingCount": {
                        "description": "The number of tasks in the cluster that are in the PENDING state.",
                        "returned": "always",
                        "type": "int"
                    },
                    "runningCount": {
                        "description": "The number of tasks in the cluster that are in the RUNNING state.",
                        "returned": "always",
                        "type": "int"
                    },
                    "serviceArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the region of the service, the AWS account ID of the service owner, the service namespace, and then the service name. For example, arn:aws:ecs:region :012345678910 :service/my-service .",
                        "returned": "always",
                        "type": "str"
                    },
                    "serviceName": {
                        "description": "A user-generated string used to identify the service",
                        "returned": "always",
                        "type": "str"
                    },
                    "status": {
                        "description": "The valid values are ACTIVE, DRAINING, or INACTIVE.",
                        "returned": "always",
                        "type": "str"
                    },
                    "taskDefinition": {
                        "description": "The ARN of a task definition to use for tasks in the service.",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "When details is false, returns an array of service ARNs, otherwise an array of complex objects as described below.",
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
