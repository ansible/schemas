{
    "community.general.git_config": {
        "doc": {
            "author": [
                "Matthew Gamble (@djmattyg007)",
                "Marius Gedminas (@mgedmin)"
            ],
            "collection": "community.general",
            "description": [
                "The C(git_config) module changes git configuration by invoking 'git config'. This is needed if you don't want to use M(ansible.builtin.template) for the entire git config file (e.g. because you need to change just C(user.email) in /etc/.git/config).  Solutions involving M(ansible.builtin.command) are cumbersome or don't work correctly in check mode."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/git_config.py",
            "has_action": false,
            "module": "git_config",
            "options": {
                "file": {
                    "description": [
                        "Path to an adhoc git configuration file to be managed using the C(file) scope."
                    ],
                    "type": "path",
                    "version_added": "2.0.0",
                    "version_added_collection": "community.general"
                },
                "list_all": {
                    "default": "no",
                    "description": [
                        "List all settings (optionally limited to a given I(scope))."
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "The name of the setting. If no value is supplied, the value will be read from the config if it has been set."
                    ],
                    "type": "str"
                },
                "repo": {
                    "description": [
                        "Path to a git repository for reading and writing values from a specific repo."
                    ],
                    "type": "path"
                },
                "scope": {
                    "choices": [
                        "file",
                        "local",
                        "global",
                        "system"
                    ],
                    "description": [
                        "Specify which scope to read/set values from.",
                        "This is required when setting config values.",
                        "If this is set to C(local), you must also specify the C(repo) parameter.",
                        "If this is set to C(file), you must also specify the C(file) parameter.",
                        "It defaults to system only when not using I(list_all)=C(yes)."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Indicates the setting should be set/unset. This parameter has higher precedence than I(value) parameter: when I(state)=absent and I(value) is defined, I(value) is discarded."
                    ],
                    "type": "str"
                },
                "value": {
                    "description": [
                        "When specifying the name of a single setting, supply a value to set that setting to the given value."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "git"
            ],
            "short_description": "Read and write git configuration"
        },
        "examples": "\n- name: Add a setting to ~/.gitconfig\n  community.general.git_config:\n    name: alias.ci\n    scope: global\n    value: commit\n\n- name: Add a setting to ~/.gitconfig\n  community.general.git_config:\n    name: alias.st\n    scope: global\n    value: status\n\n- name: Remove a setting from ~/.gitconfig\n  community.general.git_config:\n    name: alias.ci\n    scope: global\n    state: absent\n\n- name: Add a setting to ~/.gitconfig\n  community.general.git_config:\n    name: core.editor\n    scope: global\n    value: vim\n\n- name: Add a setting system-wide\n  community.general.git_config:\n    name: alias.remotev\n    scope: system\n    value: remote -v\n\n- name: Add a setting to a system scope (default)\n  community.general.git_config:\n    name: alias.diffc\n    value: diff --cached\n\n- name: Add a setting to a system scope (default)\n  community.general.git_config:\n    name: color.ui\n    value: auto\n\n- name: Make etckeeper not complaining when it is invoked by cron\n  community.general.git_config:\n    name: user.email\n    repo: /etc\n    scope: local\n    value: 'root@{{ ansible_fqdn }}'\n\n- name: Read individual values from git config\n  community.general.git_config:\n    name: alias.ci\n    scope: global\n\n- name: Scope system is also assumed when reading values, unless list_all=yes\n  community.general.git_config:\n    name: alias.diffc\n\n- name: Read all values from git config\n  community.general.git_config:\n    list_all: yes\n    scope: global\n\n- name: When list_all is yes and no scope is specified, you get configuration from all scopes\n  community.general.git_config:\n    list_all: yes\n\n- name: Specify a repository to include local settings\n  community.general.git_config:\n    list_all: yes\n    repo: /path/to/repo.git\n",
        "metadata": null,
        "return": {
            "config_value": {
                "description": "When list_all=no and value is not set, a string containing the value of the setting in name",
                "returned": "success",
                "sample": "vim",
                "type": "str"
            },
            "config_values": {
                "description": "When list_all=yes, a dict containing key/value pairs of multiple configuration settings",
                "returned": "success",
                "sample": {
                    "alias.diffc": "diff --cached",
                    "alias.remotev": "remote -v",
                    "color.ui": "auto",
                    "core.editor": "vim"
                },
                "type": "dict"
            }
        }
    }
}
