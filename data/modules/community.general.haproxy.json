{
    "community.general.haproxy": {
        "doc": {
            "author": [
                "Ravi Bhure (@ravibhure)"
            ],
            "collection": "community.general",
            "description": [
                "Enable, disable, drain and set weights for HAProxy backend servers using socket commands."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/haproxy.py",
            "has_action": false,
            "module": "haproxy",
            "notes": [
                "Enable, disable and drain commands are restricted and can only be issued on sockets configured for level 'admin'. For example, you can add the line 'stats socket /var/run/haproxy.sock level admin' to the general section of haproxy.cfg. See U(http://haproxy.1wt.eu/download/1.5/doc/configuration.txt).",
                "Depends on netcat (nc) being available; you need to install the appropriate package for your operating system before this module can be used."
            ],
            "options": {
                "agent": {
                    "default": false,
                    "description": [
                        "Disable/enable agent checks (depending on I(state) value)."
                    ],
                    "type": "bool",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.general"
                },
                "backend": {
                    "description": [
                        "Name of the HAProxy backend pool.",
                        "If this parameter is unset, it will be auto-detected."
                    ],
                    "type": "str"
                },
                "drain": {
                    "default": false,
                    "description": [
                        "Wait until the server has no active connections or until the timeout determined by wait_interval and wait_retries is reached.",
                        "Continue only after the status changes to 'MAINT'.",
                        "This overrides the shutdown_sessions option."
                    ],
                    "type": "bool"
                },
                "fail_on_not_found": {
                    "default": false,
                    "description": [
                        "Fail whenever trying to enable/disable a backend host that does not exist"
                    ],
                    "type": "bool"
                },
                "health": {
                    "default": false,
                    "description": [
                        "Disable/enable health checks (depending on I(state) value)."
                    ],
                    "type": "bool",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.general"
                },
                "host": {
                    "description": [
                        "Name of the backend host to change."
                    ],
                    "required": true,
                    "type": "str"
                },
                "shutdown_sessions": {
                    "default": false,
                    "description": [
                        "When disabling a server, immediately terminate all the sessions attached to the specified server.",
                        "This can be used to terminate long-running sessions after a server is put into maintenance mode. Overridden by the drain option."
                    ],
                    "type": "bool"
                },
                "socket": {
                    "default": "/var/run/haproxy.sock",
                    "description": [
                        "Path to the HAProxy socket file."
                    ],
                    "type": "path"
                },
                "state": {
                    "choices": [
                        "disabled",
                        "drain",
                        "enabled"
                    ],
                    "description": [
                        "Desired state of the provided backend host.",
                        "Note that C(drain) state was added in version 2.4.",
                        "It is supported only by HAProxy version 1.5 or later,",
                        "When used on versions < 1.5, it will be ignored."
                    ],
                    "required": true,
                    "type": "str"
                },
                "wait": {
                    "default": false,
                    "description": [
                        "Wait until the server reports a status of 'UP' when C(state=enabled), status of 'MAINT' when C(state=disabled) or status of 'DRAIN' when C(state=drain)"
                    ],
                    "type": "bool"
                },
                "wait_interval": {
                    "default": 5,
                    "description": [
                        "Number of seconds to wait between retries."
                    ],
                    "type": "int"
                },
                "wait_retries": {
                    "default": 25,
                    "description": [
                        "Number of times to check for status after changing the state."
                    ],
                    "type": "int"
                },
                "weight": {
                    "description": [
                        "The value passed in argument.",
                        "If the value ends with the `%` sign, then the new weight will be relative to the initially configured weight.",
                        "Relative weights are only permitted between 0 and 100% and absolute weights are permitted between 0 and 256."
                    ],
                    "type": "str"
                }
            },
            "short_description": "Enable, disable, and set weights for HAProxy backend servers using socket commands"
        },
        "examples": "\n- name: Disable server in 'www' backend pool\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n\n- name: Disable server in 'www' backend pool, also stop health/agent checks\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    health: yes\n    agent: yes\n\n- name: Disable server without backend pool name (apply to all available backend pool)\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n\n- name: Disable server, provide socket file\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n\n- name: Disable server, provide socket file, wait until status reports in maintenance\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n    wait: yes\n\n# Place server in drain mode, providing a socket file.  Then check the server's\n# status every minute to see if it changes to maintenance mode, continuing if it\n# does in an hour and failing otherwise.\n- community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n    wait: yes\n    drain: yes\n    wait_interval: 1\n    wait_retries: 60\n\n- name: Disable backend server in 'www' backend pool and drop open sessions to it\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n    socket: /var/run/haproxy.sock\n    shutdown_sessions: yes\n\n- name: Disable server without backend pool name (apply to all available backend pool) but fail when the backend host is not found\n  community.general.haproxy:\n    state: disabled\n    host: '{{ inventory_hostname }}'\n    fail_on_not_found: yes\n\n- name: Enable server in 'www' backend pool\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n\n- name: Enable server in 'www' backend pool wait until healthy\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n    wait: yes\n\n- name: Enable server in 'www' backend pool wait until healthy. Retry 10 times with intervals of 5 seconds to retrieve the health\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    backend: www\n    wait: yes\n    wait_retries: 10\n    wait_interval: 5\n\n- name: Enable server in 'www' backend pool with change server(s) weight\n  community.general.haproxy:\n    state: enabled\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    weight: 10\n    backend: www\n\n- name: Set the server in 'www' backend pool to drain mode\n  community.general.haproxy:\n    state: drain\n    host: '{{ inventory_hostname }}'\n    socket: /var/run/haproxy.sock\n    backend: www\n",
        "metadata": null,
        "return": null
    }
}
