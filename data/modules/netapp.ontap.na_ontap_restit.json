{
    "netapp.ontap.na_ontap_restit": {
        "doc": {
            "author": "NetApp Ansible Team (@carchi8py) <ng-ansibleteam@netapp.com>",
            "collection": "netapp.ontap",
            "description": [
                "Call a REST API on ONTAP.",
                "Cluster REST API are run using a cluster admin account.",
                "Vserver REST API can be run using a vsadmin account or using vserver tunneling (cluster admin with I(vserver_) options).",
                "In case of success, a json dictionary is returned as C(response).",
                "In case of a REST API error, C(status_code), C(error_code), C(error_message) are set to help with diagnosing the issue,",
                "and the call is reported as an error ('failed').",
                "Other errors (eg connection issues) are reported as Ansible error."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/netapp/ontap/plugins/modules/na_ontap_restit.py",
            "has_action": false,
            "module": "na_ontap_restit",
            "notes": [
                "The modules prefixed with na\\\\_ontap are built to support the ONTAP storage platform."
            ],
            "options": {
                "api": {
                    "description": [
                        "The REST API to call (eg I(cluster/software), I(svms/svm))."
                    ],
                    "required": true,
                    "type": "str"
                },
                "body": {
                    "aliases": [
                        "info"
                    ],
                    "description": [
                        "A dictionary for the info parameter"
                    ],
                    "type": "dict"
                },
                "cert_filepath": {
                    "description": [
                        "path to SSL client cert file (.pem).",
                        "not supported with python 2.6."
                    ],
                    "type": "str",
                    "version_added": "20.6.0",
                    "version_added_collection": "netapp.ontap"
                },
                "feature_flags": {
                    "description": [
                        "Enable or disable a new feature.",
                        "This can be used to enable an experimental feature or disable a new feature that breaks backward compatibility.",
                        "Supported keys and values are subject to change without notice.  Unknown keys are ignored."
                    ],
                    "type": "dict",
                    "version_added": "20.5.0",
                    "version_added_collection": "netapp.ontap"
                },
                "hal_linking": {
                    "default": false,
                    "description": [
                        "if true, HAL-encoded links are returned in the response."
                    ],
                    "type": "bool"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the ONTAP instance."
                    ],
                    "required": true,
                    "type": "str"
                },
                "http_port": {
                    "description": [
                        "Override the default port (80 or 443) with this port"
                    ],
                    "type": "int"
                },
                "https": {
                    "default": false,
                    "description": [
                        "Enable and disable https.",
                        "Ignored when using REST as only https is supported.",
                        "Ignored when using SSL certificate authentication as it requires SSL."
                    ],
                    "type": "bool"
                },
                "key_filepath": {
                    "description": [
                        "path to SSL client key file."
                    ],
                    "type": "str",
                    "version_added": "20.6.0",
                    "version_added_collection": "netapp.ontap"
                },
                "method": {
                    "default": "GET",
                    "description": [
                        "The REST method to use."
                    ],
                    "type": "str"
                },
                "ontapi": {
                    "description": [
                        "The ontap api version to use"
                    ],
                    "type": "int"
                },
                "password": {
                    "aliases": [
                        "pass"
                    ],
                    "description": [
                        "Password for the specified user."
                    ],
                    "type": "str"
                },
                "query": {
                    "description": [
                        "A list of dictionaries for the query parameters"
                    ],
                    "type": "dict"
                },
                "use_rest": {
                    "default": "auto",
                    "description": [
                        "REST API if supported by the target system for all the resources and attributes the module requires. Otherwise will revert to ZAPI.",
                        "always -- will always use the REST API",
                        "never -- will always use the ZAPI",
                        "auto -- will try to use the REST Api"
                    ],
                    "type": "str"
                },
                "username": {
                    "aliases": [
                        "user"
                    ],
                    "description": [
                        "This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required.",
                        "For more information, please read the documentation U(https://mysupport.netapp.com/NOW/download/software/nmsdk/9.4/).",
                        "Two authentication methods are supported",
                        "1. basic authentication, using username and password,",
                        "2. SSL certificate authentication, using a ssl client cert file, and optionally a private key file.",
                        "To use a certificate, the certificate must have been installed in the ONTAP cluster, and cert authentication must have been enabled."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "If set to C(no), the SSL certificates will not be validated.",
                        "This should only set to C(False) used on personally controlled sites using self-signed certificates."
                    ],
                    "type": "bool"
                },
                "vserver_name": {
                    "description": [
                        "if provided, forces vserver tunneling.  username identifies a cluster admin account."
                    ],
                    "type": "str"
                },
                "vserver_uuid": {
                    "description": [
                        "if provided, forces vserver tunneling.  username identifies a cluster admin account."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "Ansible 2.9",
                "Python3 netapp-lib (2018.11.13) or later. Install using 'pip install netapp-lib'",
                "netapp-lib 2020.3.12 is strongly recommended as it provides better error reporting for connection issues.",
                "A physical or virtual clustered Data ONTAP system. The modules support Data ONTAP 9.1 and onward.",
                "REST support requires ONTAP 9.6 or later.",
                "To enable http on the cluster you must run the following commands 'set -privilege advanced;' 'system services web modify -http-enabled true;'"
            ],
            "short_description": "NetApp ONTAP Run any REST API on ONTAP",
            "version_added": "20.4.0",
            "version_added_collection": "netapp.ontap"
        },
        "examples": "\n-\n  name: Ontap REST API\n  hosts: localhost\n  gather_facts: False\n  collections:\n    - netapp.ontap\n  vars:\n    login: &login\n      hostname: \"{{ admin_ip }}\"\n      username: \"{{ admin_username }}\"\n      password: \"{{ admin_password }}\"\n      https: true\n      validate_certs: false\n    svm_login: &svm_login\n      hostname: \"{{ svm_admin_ip }}\"\n      username: \"{{ svm_admin_username }}\"\n      password: \"{{ svm_admin_password }}\"\n      https: true\n      validate_certs: false\n\n  tasks:\n    - name: run ontap REST API command as cluster admin\n      na_ontap_restit:\n        <<: *login\n        api: cluster/software\n      register: result\n    - debug: var=result\n    - assert: { that: result.status_code==200, quiet: True }\n\n    - name: run ontap REST API command as cluster admin\n      na_ontap_restit:\n        <<: *login\n        api: cluster/software\n        query:\n          fields: version\n      register: result\n    - debug: var=result\n    - assert: { that: result.status_code==200, quiet: True }\n\n    - name: run ontap REST API command as cluster admin\n      na_ontap_restit:\n        <<: *login\n        api: svm/svms\n      register: result\n    - debug: var=result\n    - assert: { that: result.status_code==200, quiet: True }\n\n    - name: run ontap REST API command as cluster admin\n      na_ontap_restit:\n        <<: *login\n        api: svm/svms\n        query:\n          fields: aggregates,cifs,nfs,uuid\n          query_fields: name\n          query: trident_svm\n        hal_linking: true\n      register: result\n    - debug: var=result\n\n    - name: run ontap REST API command as vsadmin\n      na_ontap_restit:\n        <<: *svm_login\n        api: svm/svms\n      register: result\n    - debug: var=result\n    - assert: { that: result.status_code==200, quiet: True }\n\n    - name: run ontap REST API command as vserver tunneling\n      na_ontap_restit:\n        <<: *login\n        api: storage/volumes\n        vserver_name: ansibleSVM\n      register: result\n    - debug: var=result\n    - assert: { that: result.status_code==200, quiet: True }\n    - set_fact:\n        uuid: \"{{ result.response.records | json_query(get_uuid) }}\"\n      vars:\n        get_uuid: \"[? name=='deleteme_ln1'].uuid\"\n    - debug: var=uuid\n\n    - name: run ontap REST API command as DELETE method with vserver tunneling\n      na_ontap_restit:\n        <<: *login\n        api: \"storage/volumes/{{ uuid[0] }}\"\n        method: DELETE\n        vserver_name: ansibleSVM\n        query:\n          return_timeout: 60\n      register: result\n      when: uuid|length == 1\n    - debug: var=result\n    - assert: { that: result.skipped|default(false) or result.status_code|default(404) == 200, quiet: True }\n\n    - name: run ontap REST API command as POST method with vserver tunneling\n      na_ontap_restit:\n        <<: *login\n        api: storage/volumes\n        method: POST\n        vserver_name: ansibleSVM\n        query:\n          return_records: \"true\"\n          return_timeout: 60\n        body:\n          name: deleteme_ln1\n          aggregates:\n            - name: aggr1\n      register: result\n    - debug: var=result\n    - assert: { that: result.status_code==201, quiet: True }\n\n    - name: run ontap REST API command as DELETE method with vserver tunneling\n      # delete test volume if present\n      na_ontap_restit:\n        <<: *login\n        api: \"storage/volumes/{{ result.response.records[0].uuid }}\"\n        method: DELETE\n        vserver_name: ansibleSVM\n        query:\n          return_timeout: 60\n      register: result\n    - debug: var=result\n    - assert: { that: result.status_code==200, quiet: True }\n\n# error cases\n    - name: run ontap REST API command\n      na_ontap_restit:\n        <<: *login\n        api: unknown/endpoint\n      register: result\n      ignore_errors: True\n    - debug: var=result\n    - assert: { that: result.status_code==404, quiet: True }\n\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "certified"
        },
        "return": {
            "error_code": {
                "description": [
                    "If the REST API was executed but failed, the error code set by the REST API.",
                    "Not present if successful, or if the REST API call cannot be performed."
                ],
                "returned": "On error",
                "type": "str"
            },
            "error_message": {
                "description": [
                    "If the REST API was executed but failed, the error message set by the REST API.",
                    "Not present if successful, or if the REST API call cannot be performed."
                ],
                "returned": "On error",
                "type": "str"
            },
            "response": {
                "description": [
                    "If successful, a json dictionary returned by the REST API.",
                    "If the REST API was executed but failed, an empty dictionary.",
                    "Not present if the REST API call cannot be performed."
                ],
                "returned": "On success",
                "type": "dict"
            },
            "status_code": {
                "description": [
                    "The http status code."
                ],
                "returned": "Always",
                "type": "str"
            }
        }
    }
}
