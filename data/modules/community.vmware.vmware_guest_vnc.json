{
    "community.vmware.vmware_guest_vnc": {
        "doc": {
            "author": [
                "Armin Ranjbar Daemi (@rmin)"
            ],
            "collection": "community.vmware",
            "description": [
                "This module can be used to enable and disable VNC remote display on virtual machine."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/community/vmware/plugins/modules/vmware_guest_vnc.py",
            "has_action": false,
            "module": "vmware_guest_vnc",
            "options": {
                "datacenter": {
                    "default": "ha-datacenter",
                    "description": [
                        "Destination datacenter for the deploy operation.",
                        "This parameter is case sensitive."
                    ],
                    "type": "str"
                },
                "folder": {
                    "description": [
                        "Destination folder, absolute or relative path to find an existing guest.",
                        "The folder should include the datacenter. ESX's datacenter is ha-datacenter"
                    ],
                    "required": false,
                    "type": "str"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "moid": {
                    "description": [
                        "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.",
                        "This is required if C(name) or C(uuid) is not supplied."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name of the virtual machine to work with.",
                        "Virtual machine names in vCenter are not necessarily unique, which may be problematic, see C(name_match)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "name_match": {
                    "choices": [
                        "first",
                        "last"
                    ],
                    "default": "first",
                    "description": [
                        "If multiple virtual machines matching the name, use the first or last found."
                    ],
                    "required": false,
                    "type": "str"
                },
                "password": {
                    "aliases": [
                        "pass",
                        "pwd"
                    ],
                    "description": [
                        "The password of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "port": {
                    "default": 443,
                    "description": [
                        "The port number of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "int"
                },
                "proxy_host": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them.",
                        "The format is a hostname or a IP.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
                        "This feature depends on a version of pyvmomi greater than v6.7.1.2018.12"
                    ],
                    "required": false,
                    "type": "str"
                },
                "proxy_port": {
                    "description": [
                        "Port of the HTTP proxy that will receive all HTTPS requests and relay them.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead."
                    ],
                    "required": false,
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Set the state of VNC on virtual machine."
                    ],
                    "required": false,
                    "type": "str"
                },
                "username": {
                    "aliases": [
                        "admin",
                        "user"
                    ],
                    "description": [
                        "The username of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "uuid": {
                    "description": [
                        "UUID of the instance to manage if known, this is VMware's unique identifier.",
                        "This is required, if C(name) or C(moid) is not supplied."
                    ],
                    "required": false,
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
                        "Environment variable support added in Ansible 2.6.",
                        "If set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine."
                    ],
                    "type": "bool"
                },
                "vnc_ip": {
                    "default": "0.0.0.0",
                    "description": [
                        "Sets an IP for VNC on virtual machine.",
                        "This is required only when I(state) is set to present and will be ignored if I(state) is absent."
                    ],
                    "required": false,
                    "type": "str"
                },
                "vnc_password": {
                    "default": "",
                    "description": [
                        "Sets a password for VNC on virtual machine.",
                        "This is required only when I(state) is set to present and will be ignored if I(state) is absent."
                    ],
                    "required": false,
                    "type": "str"
                },
                "vnc_port": {
                    "default": 0,
                    "description": [
                        "The port that VNC listens on. Usually a number between 5900 and 7000 depending on your config.",
                        "This is required only when I(state) is set to present and will be ignored if I(state) is absent."
                    ],
                    "required": false,
                    "type": "int"
                }
            },
            "requirements": [
                "python >= 2.6",
                "PyVmomi"
            ],
            "short_description": "Manages VNC remote display on virtual machines in vCenter"
        },
        "examples": "\n- name: Enable VNC remote display on the VM\n  community.vmware.vmware_guest_vnc:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: no\n    folder: /mydatacenter/vm\n    name: testvm1\n    vnc_port: 5990\n    vnc_password: vNc5ecr3t\n    datacenter: \"{{ datacenter_name }}\"\n    state: present\n  delegate_to: localhost\n  register: vnc_result\n\n- name: Disable VNC remote display on the VM\n  community.vmware.vmware_guest_vnc:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: no\n    datacenter: \"{{ datacenter_name }}\"\n    uuid: 32074771-7d6b-699a-66a8-2d9cf8236fff\n    state: absent\n  delegate_to: localhost\n  register: vnc_result\n\n- name: Disable VNC remote display on the VM using MoID\n  community.vmware.vmware_guest_vnc:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    validate_certs: no\n    datacenter: \"{{ datacenter_name }}\"\n    moid: vm-42\n    state: absent\n  delegate_to: localhost\n  register: vnc_result\n",
        "metadata": null,
        "return": {
            "changed": {
                "description": "If anything changed on VM's extraConfig.",
                "returned": "always",
                "type": "bool"
            },
            "failed": {
                "description": "If changes failed.",
                "returned": "always",
                "type": "bool"
            },
            "instance": {
                "description": "Dictionary describing the VM, including VNC info.",
                "returned": "On success in both I(state)",
                "type": "dict"
            }
        }
    }
}
