{
    "community.crypto.openssl_publickey": {
        "doc": {
            "author": [
                "Yanis Guenane (@Spredzy)",
                "Felix Fontein (@felixfontein)"
            ],
            "collection": "community.crypto",
            "description": [
                "This module allows one to (re)generate OpenSSL public keys from their private keys.",
                "Keys are generated in PEM or OpenSSH format.",
                "The module can use the cryptography Python library, or the pyOpenSSL Python library. By default, it tries to detect which one is available. This can be overridden with the I(select_crypto_backend) option. When I(format) is C(OpenSSH), the C(cryptography) backend has to be used. Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in community.crypto 2.0.0."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/crypto/plugins/modules/openssl_publickey.py",
            "has_action": false,
            "module": "openssl_publickey",
            "options": {
                "attributes": {
                    "aliases": [
                        "attr"
                    ],
                    "description": [
                        "The attributes the resulting file or directory should have.",
                        "To get supported flags look at the man page for I(chattr) on the target system.",
                        "This string should contain the attributes in the same order as the one displayed by I(lsattr).",
                        "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."
                    ],
                    "type": "str",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "backup": {
                    "default": false,
                    "description": [
                        "Create a backup file including a timestamp so you can get the original public key back if you overwrote it with a different one by accident."
                    ],
                    "type": "bool"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Should the key be regenerated even it it already exists."
                    ],
                    "type": "bool"
                },
                "format": {
                    "choices": [
                        "OpenSSH",
                        "PEM"
                    ],
                    "default": "PEM",
                    "description": [
                        "The format of the public key."
                    ],
                    "type": "str"
                },
                "group": {
                    "description": [
                        "Name of the group that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "mode": {
                    "description": [
                        "The permissions the resulting file or directory should have.",
                        "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.",
                        "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.",
                        "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
                    ],
                    "type": "raw"
                },
                "owner": {
                    "description": [
                        "Name of the user that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "path": {
                    "description": [
                        "Name of the file in which the generated TLS/SSL public key will be written."
                    ],
                    "required": true,
                    "type": "path"
                },
                "privatekey_content": {
                    "description": [
                        "The content of the TLS/SSL private key from which to generate the public key.",
                        "Either I(privatekey_path) or I(privatekey_content) must be specified, but not both. If I(state) is C(present), one of them is required."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "privatekey_passphrase": {
                    "description": [
                        "The passphrase for the private key."
                    ],
                    "type": "str"
                },
                "privatekey_path": {
                    "description": [
                        "Path to the TLS/SSL private key from which to generate the public key.",
                        "Either I(privatekey_path) or I(privatekey_content) must be specified, but not both. If I(state) is C(present), one of them is required."
                    ],
                    "type": "path"
                },
                "return_content": {
                    "default": false,
                    "description": [
                        "If set to C(yes), will return the (current or generated) public key's content as I(publickey)."
                    ],
                    "type": "bool",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "select_crypto_backend": {
                    "choices": [
                        "auto",
                        "cryptography",
                        "pyopenssl"
                    ],
                    "default": "auto",
                    "description": [
                        "Determines which crypto backend to use.",
                        "The default choice is C(auto), which tries to use C(cryptography) if available, and falls back to C(pyopenssl).",
                        "If set to C(pyopenssl), will try to use the L(pyOpenSSL,https://pypi.org/project/pyOpenSSL/) library.",
                        "If set to C(cryptography), will try to use the L(cryptography,https://cryptography.io/) library."
                    ],
                    "type": "str"
                },
                "selevel": {
                    "description": [
                        "The level part of the SELinux file context.",
                        "This is the MLS/MCS attribute, sometimes known as the C(range).",
                        "When set to C(_default), it will use the C(level) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "serole": {
                    "description": [
                        "The role part of the SELinux file context.",
                        "When set to C(_default), it will use the C(role) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "setype": {
                    "description": [
                        "The type part of the SELinux file context.",
                        "When set to C(_default), it will use the C(type) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "seuser": {
                    "description": [
                        "The user part of the SELinux file context.",
                        "By default it uses the C(system) policy, where applicable.",
                        "When set to C(_default), it will use the C(user) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Whether the public key should exist or not, taking action if the state is different from what is stated."
                    ],
                    "type": "str"
                },
                "unsafe_writes": {
                    "default": false,
                    "description": [
                        "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.",
                        "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.",
                        "This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).",
                        "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."
                    ],
                    "type": "bool",
                    "version_added": "2.2",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "requirements": [
                "Either cryptography >= 1.2.3 (older versions might work as well)",
                "Or pyOpenSSL >= 16.0.0",
                "Needs cryptography >= 1.4 if I(format) is C(OpenSSH)"
            ],
            "seealso": [
                {
                    "module": "community.crypto.x509_certificate"
                },
                {
                    "module": "community.crypto.x509_certificate_pipe"
                },
                {
                    "module": "community.crypto.openssl_csr"
                },
                {
                    "module": "community.crypto.openssl_csr_pipe"
                },
                {
                    "module": "community.crypto.openssl_dhparam"
                },
                {
                    "module": "community.crypto.openssl_pkcs12"
                },
                {
                    "module": "community.crypto.openssl_privatekey"
                },
                {
                    "module": "community.crypto.openssl_privatekey_pipe"
                }
            ],
            "short_description": "Generate an OpenSSL public key from its private key."
        },
        "examples": "\n- name: Generate an OpenSSL public key in PEM format\n  community.crypto.openssl_publickey:\n    path: /etc/ssl/public/ansible.com.pem\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n\n- name: Generate an OpenSSL public key in PEM format from an inline key\n  community.crypto.openssl_publickey:\n    path: /etc/ssl/public/ansible.com.pem\n    privatekey_content: \"{{ private_key_content }}\"\n\n- name: Generate an OpenSSL public key in OpenSSH v2 format\n  community.crypto.openssl_publickey:\n    path: /etc/ssl/public/ansible.com.pem\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n    format: OpenSSH\n\n- name: Generate an OpenSSL public key with a passphrase protected private key\n  community.crypto.openssl_publickey:\n    path: /etc/ssl/public/ansible.com.pem\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n    privatekey_passphrase: ansible\n\n- name: Force regenerate an OpenSSL public key if it already exists\n  community.crypto.openssl_publickey:\n    path: /etc/ssl/public/ansible.com.pem\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n    force: yes\n\n- name: Remove an OpenSSL public key\n  community.crypto.openssl_publickey:\n    path: /etc/ssl/public/ansible.com.pem\n    state: absent\n",
        "metadata": null,
        "return": {
            "backup_file": {
                "description": "Name of backup file created.",
                "returned": "changed and if I(backup) is C(yes)",
                "sample": "/path/to/publickey.pem.2019-03-09@11:22~",
                "type": "str"
            },
            "filename": {
                "description": "Path to the generated TLS/SSL public key file.",
                "returned": "changed or success",
                "sample": "/etc/ssl/public/ansible.com.pem",
                "type": "str"
            },
            "fingerprint": {
                "description": [
                    "The fingerprint of the public key. Fingerprint will be generated for each hashlib.algorithms available.",
                    "Requires PyOpenSSL >= 16.0 for meaningful output."
                ],
                "returned": "changed or success",
                "sample": {
                    "md5": "84:75:71:72:8d:04:b5:6c:4d:37:6d:66:83:f5:4c:29",
                    "sha1": "51:cc:7c:68:5d:eb:41:43:88:7e:1a:ae:c7:f8:24:72:ee:71:f6:10",
                    "sha224": "b1:19:a6:6c:14:ac:33:1d:ed:18:50:d3:06:5c:b2:32:91:f1:f1:52:8c:cb:d5:75:e9:f5:9b:46",
                    "sha256": "41:ab:c7:cb:d5:5f:30:60:46:99:ac:d4:00:70:cf:a1:76:4f:24:5d:10:24:57:5d:51:6e:09:97:df:2f:de:c7",
                    "sha384": "85:39:50:4e:de:d9:19:33:40:70:ae:10:ab:59:24:19:51:c3:a2:e4:0b:1c:b1:6e:dd:b3:0c:d9:9e:6a:46:af:da:18:f8:ef:ae:2e:c0:9a:75:2c:9b:b3:0f:3a:5f:3d",
                    "sha512": "fd:ed:5e:39:48:5f:9f:fe:7f:25:06:3f:79:08:cd:ee:a5:e7:b3:3d:13:82:87:1f:84:e1:f5:c7:28:77:53:94:86:56:38:69:f0:d9:35:22:01:1e:a6:60:...:0f:9b"
                },
                "type": "dict"
            },
            "format": {
                "description": "The format of the public key (PEM, OpenSSH, ...).",
                "returned": "changed or success",
                "sample": "PEM",
                "type": "str"
            },
            "privatekey": {
                "description": [
                    "Path to the TLS/SSL private key the public key was generated from.",
                    "Will be C(none) if the private key has been provided in I(privatekey_content)."
                ],
                "returned": "changed or success",
                "sample": "/etc/ssl/private/ansible.com.pem",
                "type": "str"
            },
            "publickey": {
                "description": "The (current or generated) public key's content.",
                "returned": "if I(state) is C(present) and I(return_content) is C(yes)",
                "type": "str",
                "version_added": "1.0.0",
                "version_added_collection": "community.crypto"
            }
        }
    }
}
