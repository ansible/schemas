{
    "community.mongodb.mongodb_info": {
        "doc": {
            "author": "Andrew Klychkov (@Andersson007)",
            "collection": "community.mongodb",
            "description": [
                "Gather information about MongoDB instance."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mongodb/plugins/modules/mongodb_info.py",
            "has_action": false,
            "module": "mongodb_info",
            "notes": [
                "Requires the pymongo Python package on the remote host, version 2.4.2+."
            ],
            "options": {
                "auth_mechanism": {
                    "choices": [
                        "SCRAM-SHA-256",
                        "SCRAM-SHA-1",
                        "MONGODB-X509",
                        "GSSAPI",
                        "PLAIN"
                    ],
                    "description": [
                        "Authentication type."
                    ],
                    "required": false,
                    "type": "str"
                },
                "connection_options": {
                    "description": [
                        "Additional connection options.",
                        "Supply as a list of dicts or strings containing key value pairs seperated with '='."
                    ],
                    "elements": "raw",
                    "required": false,
                    "type": "list"
                },
                "filter": {
                    "description": [
                        "Limit the collected information by comma separated string or YAML list.",
                        "Allowable values are C(general), C(databases), C(total_size), C(parameters), C(users), C(roles).",
                        "By default, collects all subsets.",
                        "You can use '!' before value (for example, C(!users)) to exclude it from the information.",
                        "If you pass including and excluding values to the filter, for example, I(filter=!general,users), the excluding values, C(!general) in this case, will be ignored."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "login_database": {
                    "default": "admin",
                    "description": [
                        "The database where login credentials are stored."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "The host running MongoDB instance to login to."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with.",
                        "Required when I(login_user) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_port": {
                    "default": 27017,
                    "description": [
                        "The MongoDB server port to login to."
                    ],
                    "required": false,
                    "type": "int"
                },
                "login_user": {
                    "description": [
                        "The MongoDB user to login with.",
                        "Required when I(login_password) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl": {
                    "default": false,
                    "description": [
                        "Whether to use an SSL connection when connecting to the database."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "ssl_ca_certs": {
                    "description": [
                        "The ssl_ca_certs option takes a path to a CA file."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_cert_reqs": {
                    "choices": [
                        "CERT_NONE",
                        "CERT_OPTIONAL",
                        "CERT_REQUIRED"
                    ],
                    "default": "CERT_REQUIRED",
                    "description": [
                        "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_certfile": {
                    "description": [
                        "Present a client certificate using the ssl_certfile option."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_crlfile": {
                    "description": [
                        "The ssl_crlfile option takes a path to a CRL file."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_keyfile": {
                    "description": [
                        "Private key for the client certificate."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_pem_passphrase": {
                    "description": [
                        "Passphrase to decrypt encrypted private keys."
                    ],
                    "required": false,
                    "type": "str"
                }
            },
            "requirements": [
                "pymongo"
            ],
            "short_description": "Gather information about MongoDB instance.",
            "version_added": "1.0.0",
            "version_added_collection": "community.mongodb"
        },
        "examples": "\n- name: Gather all supported information\n  community.mongodb.mongodb_info:\n    login_user: admin\n    login_password: secret\n  register: result\n\n- name: Show gathered info\n  debug:\n    msg: '{{ result }}'\n\n- name: Gather only information about databases and their total size\n  community.mongodb.mongodb_info:\n    login_user: admin\n    login_password: secret\n    filter: databases, total_size\n\n- name: Gather all information except parameters\n  community.mongodb.mongodb_info:\n    login_user: admin\n    login_password: secret\n    filter: '!parameters'\n",
        "metadata": null,
        "return": {
            "databases": {
                "description": "Database information.",
                "returned": "always",
                "sample": {
                    "admin": {
                        "empty": false,
                        "sizeOnDisk": 245760
                    },
                    "config": {
                        "empty": false,
                        "sizeOnDisk": 110592
                    }
                },
                "type": "dict"
            },
            "general": {
                "description": "General instance information.",
                "returned": "always",
                "sample": {
                    "allocator": "tcmalloc",
                    "bits": 64,
                    "maxBsonObjectSize": 16777216,
                    "storageEngines": [
                        "biggie"
                    ],
                    "version": "4.2.3"
                },
                "type": "dict"
            },
            "parameters": {
                "description": "Server parameters information.",
                "returned": "always",
                "sample": {
                    "maxOplogTruncationPointsAfterStartup": 100,
                    "maxOplogTruncationPointsDuringStartup": 100,
                    "maxSessions": 1000000
                },
                "type": "dict"
            },
            "roles": {
                "description": "Role information.",
                "returned": "always",
                "sample": {
                    "db": {
                        "restore": {
                            "inheritedRoles": [],
                            "isBuiltin": true,
                            "roles": []
                        }
                    }
                },
                "type": "dict"
            },
            "total_size": {
                "description": "Total size of all databases in bytes.",
                "returned": "always",
                "sample": 397312,
                "type": "int"
            },
            "users": {
                "description": "User information.",
                "returned": "always",
                "sample": {
                    "db": {
                        "new_user": {
                            "_id": "config.new_user",
                            "mechanisms": [
                                "SCRAM-SHA-1",
                                "SCRAM-SHA-256"
                            ],
                            "roles": []
                        }
                    }
                },
                "type": "dict"
            }
        }
    }
}
