{
    "community.postgresql.postgresql_query": {
        "doc": {
            "author": [
                "Felix Archambault (@archf)",
                "Andrew Klychkov (@Andersson007)",
                "Will Rouesnel (@wrouesnel)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Runs arbitrary PostgreSQL queries.",
                "Can run queries from SQL script files.",
                "Does not run against backup files. Use M(community.postgresql.postgresql_db) with I(state=restore) to run queries on files made by pg_dump/pg_dumpall utilities."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_query.py",
            "has_action": false,
            "module": "postgresql_query",
            "notes": [
                "Supports C(check_mode).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "as_single_query": {
                    "description": [
                        "If C(yes), when reading from the I(path_to_script) file, executes its whole content in a single query.",
                        "When C(yes), the C(query_all_results) return value contains only the result of the last statement.",
                        "Whether the state is reported as changed or not is determined by the last statement of the file.",
                        "Used only when I(path_to_script) is specified, otherwise ignored.",
                        "If set to C(no), the script can contain only semicolon-separated queries. (see the I(path_to_script) option documentation).",
                        "The default value is C(no)."
                    ],
                    "type": "bool",
                    "version_added": "1.1.0",
                    "version_added_collection": "community.postgresql"
                },
                "autocommit": {
                    "default": false,
                    "description": [
                        "Execute in autocommit mode when the query can't be run inside a transaction block (e.g., VACUUM).",
                        "Mutually exclusive with I(check_mode)."
                    ],
                    "type": "bool"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of database to connect to and run queries against."
                    ],
                    "type": "str"
                },
                "encoding": {
                    "description": [
                        "Set the client encoding for the current session (e.g. C(UTF-8)).",
                        "The default is the encoding defined by the database."
                    ],
                    "type": "str",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "named_args": {
                    "description": [
                        "Dictionary of key-value arguments to pass to the query. When the value is a list, it will be converted to PostgreSQL array.",
                        "Mutually exclusive with I(positional_args)."
                    ],
                    "type": "dict"
                },
                "path_to_script": {
                    "description": [
                        "Path to a SQL script on the target machine.",
                        "If the script contains several queries, they must be semicolon-separated.",
                        "To run scripts containing objects with semicolons (for example, function and procedure definitions), use I(as_single_query=yes).",
                        "To upload dumps or to execute other complex scripts, the preferable way is to use the M(community.postgresql.postgresql_db) module with I(state=restore).",
                        "Mutually exclusive with I(query)."
                    ],
                    "type": "path"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "positional_args": {
                    "description": [
                        "List of values to be passed as positional arguments to the query. When the value is a list, it will be converted to PostgreSQL array.",
                        "Mutually exclusive with I(named_args)."
                    ],
                    "elements": "raw",
                    "type": "list"
                },
                "query": {
                    "description": [
                        "SQL query to run. Variables can be escaped with psycopg2 syntax U(http://initd.org/psycopg/docs/usage.html)."
                    ],
                    "type": "str"
                },
                "search_path": {
                    "description": [
                        "List of schema names to look in."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.postgresql"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether a value of I(session_role) is potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections via I(session_role) are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "module": "community.postgresql.postgresql_db"
                },
                {
                    "description": "Complete reference of the PostgreSQL schema documentation.",
                    "link": "https://www.postgresql.org/docs/current/ddl-schemas.html",
                    "name": "PostgreSQL Schema reference"
                }
            ],
            "short_description": "Run PostgreSQL queries"
        },
        "examples": "\n- name: Simple select query to acme db\n  community.postgresql.postgresql_query:\n    db: acme\n    query: SELECT version()\n\n- name: Select query to db acme with positional arguments and non-default credentials\n  community.postgresql.postgresql_query:\n    db: acme\n    login_user: django\n    login_password: mysecretpass\n    query: SELECT * FROM acme WHERE id = %s AND story = %s\n    positional_args:\n    - 1\n    - test\n\n- name: Select query to test_db with named_args\n  community.postgresql.postgresql_query:\n    db: test_db\n    query: SELECT * FROM test WHERE id = %(id_val)s AND story = %(story_val)s\n    named_args:\n      id_val: 1\n      story_val: test\n\n- name: Insert query to test_table in db test_db\n  community.postgresql.postgresql_query:\n    db: test_db\n    query: INSERT INTO test_table (id, story) VALUES (2, 'my_long_story')\n\n# If your script contains semicolons as parts of separate objects\n# like functions, procedures, and so on, use \"as_single_query: yes\"\n- name: Run queries from SQL script using UTF-8 client encoding for session\n  community.postgresql.postgresql_query:\n    db: test_db\n    path_to_script: /var/lib/pgsql/test.sql\n    positional_args:\n    - 1\n    encoding: UTF-8\n\n- name: Example of using autocommit parameter\n  community.postgresql.postgresql_query:\n    db: test_db\n    query: VACUUM\n    autocommit: yes\n\n- name: >\n    Insert data to the column of array type using positional_args.\n    Note that we use quotes here, the same as for passing JSON, etc.\n  community.postgresql.postgresql_query:\n    query: INSERT INTO test_table (array_column) VALUES (%s)\n    positional_args:\n    - '{1,2,3}'\n\n# Pass list and string vars as positional_args\n- name: Set vars\n  ansible.builtin.set_fact:\n    my_list:\n    - 1\n    - 2\n    - 3\n    my_arr: '{1, 2, 3}'\n\n- name: Select from test table by passing positional_args as arrays\n  community.postgresql.postgresql_query:\n    query: SELECT * FROM test_array_table WHERE arr_col1 = %s AND arr_col2 = %s\n    positional_args:\n    - '{{ my_list }}'\n    - '{{ my_arr|string }}'\n\n# Select from test table looking into app1 schema first, then,\n# if the schema doesn't exist or the table hasn't been found there,\n# try to find it in the schema public\n- name: Select from test using search_path\n  community.postgresql.postgresql_query:\n    query: SELECT * FROM test_array_table\n    search_path:\n    - app1\n    - public\n\n# If you use a variable in positional_args / named_args that can\n# be undefined and you wish to set it as NULL, the constructions like\n# \"{{ my_var if (my_var is defined) else none | default(none) }}\"\n# will not work as expected substituting an empty string instead of NULL.\n# If possible, we suggest to use Ansible's DEFAULT_JINJA2_NATIVE configuration\n# (https://docs.ansible.com/ansible/latest/reference_appendices/config.html#default-jinja2-native).\n# Enabling it fixes this problem. If you cannot enable it, the following workaround\n# can be used.\n# You should precheck such a value and define it as NULL when undefined.\n# For example:\n- name: When undefined, set to NULL\n  set_fact:\n    my_var: NULL\n  when: my_var is undefined\n\n# Then:\n- name: Insert a value using positional arguments\n  community.postgresql.postgresql_query:\n    query: INSERT INTO test_table (col1) VALUES (%s)\n    positional_args:\n    - '{{ my_var }}'\n",
        "metadata": null,
        "return": {
            "query": {
                "description": [
                    "Executed query.",
                    "When reading several queries from a file, it contains only the last one."
                ],
                "returned": "always",
                "sample": "SELECT * FROM bar",
                "type": "str"
            },
            "query_all_results": {
                "description": [
                    "List containing results of all queries executed (one sublist for every query). Useful when reading several queries from a file."
                ],
                "elements": "list",
                "returned": "always",
                "sample": [
                    [
                        {
                            "Column": "Value1"
                        },
                        {
                            "Column": "Value2"
                        }
                    ],
                    [
                        {
                            "Column": "Value1"
                        },
                        {
                            "Column": "Value2"
                        }
                    ]
                ],
                "type": "list"
            },
            "query_list": {
                "description": [
                    "List of executed queries. Useful when reading several queries from a file."
                ],
                "elements": "str",
                "returned": "always",
                "sample": [
                    "SELECT * FROM foo",
                    "SELECT * FROM bar"
                ],
                "type": "list"
            },
            "query_result": {
                "description": [
                    "List of dictionaries in column:value form representing returned rows.",
                    "When running queries from a file, returns result of the last query."
                ],
                "elements": "dict",
                "returned": "always",
                "sample": [
                    {
                        "Column": "Value1"
                    },
                    {
                        "Column": "Value2"
                    }
                ],
                "type": "list"
            },
            "rowcount": {
                "description": [
                    "Number of produced or affected rows.",
                    "When using a script with multiple queries, it contains a total number of produced or affected rows."
                ],
                "returned": "changed",
                "sample": 5,
                "type": "int"
            },
            "statusmessage": {
                "description": [
                    "Attribute containing the message returned by the command.",
                    "When reading several queries from a file, it contains a message of the last one."
                ],
                "returned": "always",
                "sample": "INSERT 0 1",
                "type": "str"
            }
        }
    }
}
