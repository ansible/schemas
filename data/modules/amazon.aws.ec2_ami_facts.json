{
    "amazon.aws.ec2_ami_facts": {
        "doc": {
            "author": [
                "Prasad Katti (@prasadkatti)"
            ],
            "collection": "amazon.aws",
            "description": [
                "Gather information about ec2 AMIs",
                "This module was called C(ec2_ami_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/amazon/aws/plugins/modules/ec2_ami_facts.py",
            "has_action": false,
            "module": "ec2_ami_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "describe_image_attributes": {
                    "default": false,
                    "description": [
                        "Describe attributes (like launchPermission) of the images found."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "executable_users": {
                    "aliases": [
                        "executable_user"
                    ],
                    "description": [
                        "Filter images by users with explicit launch permissions. Valid options are an AWS account ID, self, or all (public AMIs)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "filters": {
                    "description": [
                        "A dict of filters to apply. Each dict item consists of a filter key and a filter value.",
                        "See U(https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html) for possible filters.",
                        "Filter names and values are case sensitive."
                    ],
                    "type": "dict"
                },
                "image_ids": {
                    "aliases": [
                        "image_id"
                    ],
                    "description": "One or more image IDs.",
                    "elements": "str",
                    "type": "list"
                },
                "owners": {
                    "aliases": [
                        "owner"
                    ],
                    "description": [
                        "Filter the images by the owner. Valid options are an AWS account ID, self, or an AWS owner alias ( amazon | aws-marketplace | microsoft )."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Gather information about ec2 AMIs"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n- name: gather information about an AMI using ami-id\n  ec2_ami_info:\n    image_ids: ami-5b488823\n\n- name: gather information about all AMIs with tag key Name and value webapp\n  ec2_ami_info:\n    filters:\n      \"tag:Name\": webapp\n\n- name: gather information about an AMI with 'AMI Name' equal to foobar\n  ec2_ami_info:\n    filters:\n      name: foobar\n\n- name: gather information about Ubuntu 17.04 AMIs published by Canonical (099720109477)\n  ec2_ami_info:\n    owners: 099720109477\n    filters:\n      name: \"ubuntu/images/ubuntu-zesty-17.04-*\"\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": {
            "images": {
                "contains": {
                    "architecture": {
                        "description": "The architecture of the image.",
                        "returned": "always",
                        "sample": "x86_64",
                        "type": "str"
                    },
                    "block_device_mappings": {
                        "contains": {
                            "device_name": {
                                "description": "The device name exposed to the instance.",
                                "returned": "always",
                                "sample": "/dev/sda1",
                                "type": "str"
                            },
                            "ebs": {
                                "description": "EBS volumes",
                                "returned": "always",
                                "type": "complex"
                            }
                        },
                        "description": "Any block device mapping entries.",
                        "elements": "dict",
                        "returned": "always",
                        "type": "list"
                    },
                    "creation_date": {
                        "description": "The date and time the image was created.",
                        "returned": "always",
                        "sample": "2017-10-16T19:22:13.000Z",
                        "type": "str"
                    },
                    "description": {
                        "description": "The description of the AMI.",
                        "returned": "always",
                        "sample": "",
                        "type": "str"
                    },
                    "ena_support": {
                        "description": "Whether enhanced networking with ENA is enabled.",
                        "returned": "always",
                        "sample": true,
                        "type": "bool"
                    },
                    "hypervisor": {
                        "description": "The hypervisor type of the image.",
                        "returned": "always",
                        "sample": "xen",
                        "type": "str"
                    },
                    "image_id": {
                        "description": "The ID of the AMI.",
                        "returned": "always",
                        "sample": "ami-5b466623",
                        "type": "str"
                    },
                    "image_location": {
                        "description": "The location of the AMI.",
                        "returned": "always",
                        "sample": "408466080000/Webapp",
                        "type": "str"
                    },
                    "image_type": {
                        "description": "The type of image.",
                        "returned": "always",
                        "sample": "machine",
                        "type": "str"
                    },
                    "launch_permissions": {
                        "contains": {
                            "group": {
                                "description": "A value of 'all' means the AMI is public.",
                                "type": "str"
                            },
                            "user_id": {
                                "description": "An AWS account ID with permissions to launch the AMI.",
                                "type": "str"
                            }
                        },
                        "description": "A List of AWS accounts may launch the AMI.",
                        "elements": "dict",
                        "returned": "When image is owned by calling account and I(describe_image_attributes) is yes.",
                        "sample": [
                            {
                                "group": "all"
                            },
                            {
                                "user_id": "408466080000"
                            }
                        ],
                        "type": "list"
                    },
                    "name": {
                        "description": "The name of the AMI that was provided during image creation.",
                        "returned": "always",
                        "sample": "Webapp",
                        "type": "str"
                    },
                    "owner_id": {
                        "description": "The AWS account ID of the image owner.",
                        "returned": "always",
                        "sample": "408466080000",
                        "type": "str"
                    },
                    "public": {
                        "description": "Whether the image has public launch permissions.",
                        "returned": "always",
                        "sample": true,
                        "type": "bool"
                    },
                    "root_device_name": {
                        "description": "The device name of the root device.",
                        "returned": "always",
                        "sample": "/dev/sda1",
                        "type": "str"
                    },
                    "root_device_type": {
                        "description": "The type of root device used by the AMI.",
                        "returned": "always",
                        "sample": "ebs",
                        "type": "str"
                    },
                    "sriov_net_support": {
                        "description": "Whether enhanced networking is enabled.",
                        "returned": "always",
                        "sample": "simple",
                        "type": "str"
                    },
                    "state": {
                        "description": "The current state of the AMI.",
                        "returned": "always",
                        "sample": "available",
                        "type": "str"
                    },
                    "tags": {
                        "description": "Any tags assigned to the image.",
                        "returned": "always",
                        "type": "dict"
                    },
                    "virtualization_type": {
                        "description": "The type of virtualization of the AMI.",
                        "returned": "always",
                        "sample": "hvm",
                        "type": "str"
                    }
                },
                "description": "A list of images.",
                "elements": "dict",
                "returned": "always",
                "type": "list"
            }
        }
    }
}
