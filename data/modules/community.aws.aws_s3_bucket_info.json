{
    "community.aws.aws_s3_bucket_info": {
        "doc": {
            "author": "Gerben Geijteman (@hyperized)",
            "collection": "community.aws",
            "description": [
                "Lists S3 buckets and details about those buckets.",
                "This module was called C(aws_s3_bucket_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.aws.aws_s3_bucket_info) module no longer returns C(ansible_facts)!"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/aws_s3_bucket_info.py",
            "has_action": false,
            "module": "aws_s3_bucket_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "bucket_facts": {
                    "description": [
                        "Retrieve requested S3 bucket detailed information",
                        "Each bucket_X option executes one API call, hence many options being set to C(true) will cause slower module execution.",
                        "You can limit buckets by using the I(name) or I(name_filter) option."
                    ],
                    "suboptions": {
                        "bucket_accelerate_configuration": {
                            "default": false,
                            "description": "Retrive S3 accelerate configuration.",
                            "type": "bool"
                        },
                        "bucket_acl": {
                            "default": false,
                            "description": "Retrive S3 bucket ACLs.",
                            "type": "bool"
                        },
                        "bucket_cors": {
                            "default": false,
                            "description": "Retrive S3 bucket CORS configuration.",
                            "type": "bool"
                        },
                        "bucket_encryption": {
                            "default": false,
                            "description": "Retrive S3 bucket encryption.",
                            "type": "bool"
                        },
                        "bucket_lifecycle_configuration": {
                            "default": false,
                            "description": "Retrive S3 bucket lifecycle configuration.",
                            "type": "bool"
                        },
                        "bucket_location": {
                            "default": false,
                            "description": "Retrive S3 bucket location.",
                            "type": "bool"
                        },
                        "bucket_logging": {
                            "default": false,
                            "description": "Retrive S3 bucket logging.",
                            "type": "bool"
                        },
                        "bucket_notification_configuration": {
                            "default": false,
                            "description": "Retrive S3 bucket notification configuration.",
                            "type": "bool"
                        },
                        "bucket_ownership_controls": {
                            "default": false,
                            "description": "Retrive S3 ownership controls.",
                            "type": "bool"
                        },
                        "bucket_policy": {
                            "default": false,
                            "description": "Retrive S3 bucket policy.",
                            "type": "bool"
                        },
                        "bucket_policy_status": {
                            "default": false,
                            "description": "Retrive S3 bucket policy status.",
                            "type": "bool"
                        },
                        "bucket_replication": {
                            "default": false,
                            "description": "Retrive S3 bucket replication.",
                            "type": "bool"
                        },
                        "bucket_request_payment": {
                            "default": false,
                            "description": "Retrive S3 bucket request payment.",
                            "type": "bool"
                        },
                        "bucket_tagging": {
                            "default": false,
                            "description": "Retrive S3 bucket tagging.",
                            "type": "bool"
                        },
                        "bucket_website": {
                            "default": false,
                            "description": "Retrive S3 bucket website.",
                            "type": "bool"
                        },
                        "public_access_block": {
                            "default": false,
                            "description": "Retrive S3 bucket public access block.",
                            "type": "bool"
                        }
                    },
                    "type": "dict",
                    "version_added": "1.4.0",
                    "version_added_collection": "community.aws"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "name": {
                    "default": "",
                    "description": [
                        "Name of bucket to query."
                    ],
                    "type": "str",
                    "version_added": "1.4.0",
                    "version_added_collection": "community.aws"
                },
                "name_filter": {
                    "default": "",
                    "description": [
                        "Limits buckets to only buckets who's name contain the string in I(name_filter)."
                    ],
                    "type": "str",
                    "version_added": "1.4.0",
                    "version_added_collection": "community.aws"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "transform_location": {
                    "default": false,
                    "description": [
                        "S3 bucket location for default us-east-1 is normally reported as C(null).",
                        "Setting this option to C(true) will return C(us-east-1) instead.",
                        "Affects only queries with I(bucket_facts=true) and I(bucket_location=true)."
                    ],
                    "type": "bool",
                    "version_added": "1.4.0",
                    "version_added_collection": "community.aws"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3 >= 1.4.4",
                "python >= 2.6"
            ],
            "short_description": "lists S3 buckets in AWS",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Note: Only AWS S3 is currently supported\n\n# Lists all s3 buckets\n- community.aws.aws_s3_bucket_info:\n  register: result\n\n# Retrieve detailed bucket information\n- community.aws.aws_s3_bucket_info:\n    # Show only buckets with name matching\n    name_filter: your.testing\n    # Choose facts to retrieve\n    bucket_facts:\n      # bucket_accelerate_configuration: true\n      bucket_acl: true\n      bucket_cors: true\n      bucket_encryption: true\n      # bucket_lifecycle_configuration: true\n      bucket_location: true\n      # bucket_logging: true\n      # bucket_notification_configuration: true\n      # bucket_ownership_controls: true\n      # bucket_policy: true\n      # bucket_policy_status: true\n      # bucket_replication: true\n      # bucket_request_payment: true\n      # bucket_tagging: true\n      # bucket_website: true\n      # public_access_block: true\n    transform_location: true\n    register: result\n\n# Print out result\n- name: List buckets\n  ansible.builtin.debug:\n    msg: \"{{ result['buckets'] }}\"\n",
        "metadata": null,
        "return": {
            "bucket_list": {
                "contains": {
                    "bucket_acl": {
                        "contains": {
                            "Grants": {
                                "description": "List of ACL grants.",
                                "sample": [],
                                "type": "list"
                            },
                            "Owner": {
                                "contains": {
                                    "DisplayName": {
                                        "description": "Bucket owner user display name.",
                                        "returned": "always",
                                        "sample": "username",
                                        "type": "str"
                                    },
                                    "ID": {
                                        "description": "Bucket owner user ID.",
                                        "returned": "always",
                                        "sample": "123894e509349etc",
                                        "type": "str"
                                    }
                                },
                                "description": "Bucket owner information.",
                                "type": "complex"
                            }
                        },
                        "description": "Bucket ACL configuration.",
                        "returned": "when I(bucket_facts=true) and I(bucket_acl=true)",
                        "type": "complex"
                    },
                    "bucket_cors": {
                        "contains": {
                            "CORSRules": {
                                "description": "Bucket CORS configuration.",
                                "returned": "when CORS rules are defined for the bucket",
                                "sample": [],
                                "type": "list"
                            }
                        },
                        "description": "Bucket CORS configuration.",
                        "returned": "when I(bucket_facts=true) and I(bucket_cors=true)",
                        "type": "complex"
                    },
                    "bucket_encryption": {
                        "contains": {
                            "ServerSideEncryptionConfiguration": {
                                "contains": {
                                    "Rules": {
                                        "description": "List of applied encryptio rules.",
                                        "returned": "when encryption is enabled on the bucket",
                                        "sample": {
                                            "ApplyServerSideEncryptionByDefault": {
                                                "SSEAlgorithm": "AES256"
                                            },
                                            "BucketKeyEnabled": false
                                        },
                                        "type": "list"
                                    }
                                },
                                "description": "ServerSideEncryptionConfiguration configuration.",
                                "returned": "when encryption is enabled on the bucket",
                                "type": "complex"
                            }
                        },
                        "description": "Bucket encryption configuration.",
                        "returned": "when I(bucket_facts=true) and I(bucket_encryption=true)",
                        "type": "complex"
                    },
                    "bucket_lifecycle_configuration": {
                        "contains": {
                            "Rules": {
                                "description": "List of lifecycle management rules.",
                                "returned": "when lifecycle configuration is present",
                                "sample": [
                                    {
                                        "ID": "example-rule",
                                        "Status": "Enabled"
                                    }
                                ],
                                "type": "list"
                            }
                        },
                        "description": "Bucket lifecycle configuration settings.",
                        "returned": "when I(bucket_facts=true) and I(bucket_lifecycle_configuration=true)",
                        "type": "complex"
                    },
                    "bucket_location": {
                        "contains": {
                            "LocationConstraint": {
                                "description": "AWS region.",
                                "returned": "always",
                                "sample": "us-east-2",
                                "type": "str"
                            }
                        },
                        "description": "Bucket location.",
                        "returned": "when I(bucket_facts=true) and I(bucket_location=true)",
                        "type": "complex"
                    },
                    "bucket_logging": {
                        "contains": {
                            "LoggingEnabled": {
                                "contains": {
                                    "TargetBucket": {
                                        "description": "Target bucket name.",
                                        "returned": "always",
                                        "sample": "logging-bucket-name",
                                        "type": "str"
                                    },
                                    "TargetPrefix": {
                                        "description": "Prefix in target bucket.",
                                        "returned": "always",
                                        "sample": "",
                                        "type": "str"
                                    }
                                },
                                "description": "Server access logging configuration.",
                                "returned": "when server access logging is defined for the bucket",
                                "type": "complex"
                            }
                        },
                        "description": "Server access logging configuration.",
                        "returned": "when I(bucket_facts=true) and I(bucket_logging=true)",
                        "type": "complex"
                    },
                    "bucket_name_filter": {
                        "description": "String used to limit buckets. See I(name_filter).",
                        "returned": "when I(name_filter) is defined",
                        "sample": "filter-by-this-string",
                        "type": "str"
                    },
                    "bucket_notification_configuration": {
                        "contains": {
                            "TopicConfigurations": {
                                "description": "List of notification events configurations.",
                                "returned": "when at least one notification is configured",
                                "sample": [],
                                "type": "list"
                            }
                        },
                        "description": "Bucket notification settings.",
                        "returned": "when I(bucket_facts=true) and I(bucket_notification_configuration=true)",
                        "type": "complex"
                    },
                    "bucket_ownership_controls": {
                        "contains": {
                            "OwnershipControls": {
                                "contains": {
                                    "Rules": {
                                        "description": "List of ownership rules.",
                                        "returned": "when ownership rule is defined",
                                        "sample": [
                                            {
                                                "ObjectOwnership:": "ObjectWriter"
                                            }
                                        ],
                                        "type": "list"
                                    }
                                },
                                "description": "Object ownership settings.",
                                "returned": "when ownership controls are defined for the bucket",
                                "type": "complex"
                            }
                        },
                        "description": "Preffered object ownership settings.",
                        "returned": "when I(bucket_facts=true) and I(bucket_ownership_controls=true)",
                        "type": "complex"
                    },
                    "bucket_policy": {
                        "description": "Bucket policy contents.",
                        "returned": "when I(bucket_facts=true) and I(bucket_policy=true)",
                        "sample": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"AddCannedAcl\",\"Effect\":\"Allow\",..}}]}",
                        "type": "str"
                    },
                    "bucket_policy_status": {
                        "contains": {
                            "PolicyStatus": {
                                "contains": {
                                    "IsPublic": {
                                        "description": "Report bucket policy public status.",
                                        "returned": "when bucket policy is present",
                                        "sample": true,
                                        "type": "bool"
                                    }
                                },
                                "description": "Status of bucket policy.",
                                "returned": "when bucket policy is present",
                                "type": "complex"
                            }
                        },
                        "description": "Status of bucket policy.",
                        "returned": "when I(bucket_facts=true) and I(bucket_policy_status=true)",
                        "type": "complex"
                    },
                    "bucket_replication": {
                        "contains": {
                            "Role": {
                                "description": "IAM role used for replication.",
                                "returned": "when replication rule is defined",
                                "sample": "arn:aws:iam::123:role/example-role",
                                "type": "str"
                            },
                            "Rules": {
                                "description": "List of replication rules.",
                                "returned": "when replication rule is defined",
                                "sample": [
                                    {
                                        "Filter": "{}",
                                        "ID": "rule-1"
                                    }
                                ],
                                "type": "list"
                            }
                        },
                        "description": "Replication configuration settings.",
                        "returned": "when I(bucket_facts=true) and I(bucket_replication=true)",
                        "type": "complex"
                    },
                    "bucket_request_payment": {
                        "contains": {
                            "Payer": {
                                "description": "Current payer.",
                                "returned": "always",
                                "sample": "BucketOwner",
                                "type": "str"
                            }
                        },
                        "description": "Requester pays setting.",
                        "returned": "when I(bucket_facts=true) and I(bucket_request_payment=true)",
                        "type": "complex"
                    },
                    "bucket_tagging": {
                        "description": "Bucket tags.",
                        "returned": "when I(bucket_facts=true) and I(bucket_tagging=true)",
                        "sample": {
                            "Tag1": "Value1",
                            "Tag2": "Value2"
                        },
                        "type": "dict"
                    },
                    "bucket_website": {
                        "contains": {
                            "ErrorDocument": {
                                "description": "Object serving as HTTP error page.",
                                "returned": "when static website hosting is enabled",
                                "sample": {
                                    "Key": "error.html"
                                },
                                "type": "dict"
                            },
                            "IndexDocument": {
                                "description": "Object serving as HTTP index page.",
                                "returned": "when static website hosting is enabled",
                                "sample": {
                                    "Suffix": "error.html"
                                },
                                "type": "dict"
                            },
                            "RedirectAllRequestsTo": {
                                "contains": {
                                    "HostName": {
                                        "description": "Hostname to redirect.",
                                        "returned": "always",
                                        "sample": "www.example.com",
                                        "type": "str"
                                    },
                                    "Protocol": {
                                        "description": "Protocol used for redirect.",
                                        "returned": "always",
                                        "sample": "https",
                                        "type": "str"
                                    }
                                },
                                "description": "Website redict settings.",
                                "returned": "when redirect requests is configured",
                                "type": "complex"
                            }
                        },
                        "description": "Static website hosting.",
                        "returned": "when I(bucket_facts=true) and I(bucket_website=true)",
                        "type": "complex"
                    },
                    "creation_date": {
                        "description": "Bucket creation date timestamp.",
                        "returned": "always",
                        "sample": "2021-01-21T12:44:10+00:00",
                        "type": "str"
                    },
                    "name": {
                        "description": "Bucket name.",
                        "returned": "always",
                        "sample": "a-testing-bucket-name",
                        "type": "str"
                    },
                    "public_access_block": {
                        "contains": {
                            "PublicAccessBlockConfiguration": {
                                "contains": {
                                    "BlockPublicAcls": {
                                        "description": "BlockPublicAcls setting value.",
                                        "sample": true,
                                        "type": "bool"
                                    },
                                    "BlockPublicPolicy": {
                                        "description": "BlockPublicPolicy setting value.",
                                        "sample": true,
                                        "type": "bool"
                                    },
                                    "IgnorePublicAcls": {
                                        "description": "IgnorePublicAcls setting value.",
                                        "sample": true,
                                        "type": "bool"
                                    },
                                    "RestrictPublicBuckets": {
                                        "description": "RestrictPublicBuckets setting value.",
                                        "sample": true,
                                        "type": "bool"
                                    }
                                },
                                "description": "PublicAccessBlockConfiguration data.",
                                "returned": "when PublicAccessBlockConfiguration is defined for the bucket",
                                "type": "complex"
                            }
                        },
                        "description": "Bucket public access block configuration.",
                        "returned": "when I(bucket_facts=true) and I(public_access_block=true)",
                        "type": "complex"
                    }
                },
                "description": "List of buckets",
                "returned": "always",
                "type": "complex"
            }
        }
    }
}
