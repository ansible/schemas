{
    "community.general.pamd": {
        "doc": {
            "author": [
                "Kenneth D. Evensen (@kevensen)"
            ],
            "collection": "community.general",
            "description": [
                "Edit PAM service's type, control, module path and module arguments.",
                "In order for a PAM rule to be modified, the type, control and module_path must match an existing rule.  See man(5) pam.d for details."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/pamd.py",
            "has_action": false,
            "module": "pamd",
            "options": {
                "backup": {
                    "default": false,
                    "description": [
                        "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
                    ],
                    "type": "bool"
                },
                "control": {
                    "description": [
                        "The control of the PAM rule being modified.",
                        "This may be a complicated control with brackets. If this is the case, be sure to put \"[bracketed controls]\" in quotes.",
                        "The C(type), C(control) and C(module_path) all must match a rule to be modified."
                    ],
                    "required": true,
                    "type": "str"
                },
                "module_arguments": {
                    "description": [
                        "When state is C(updated), the module_arguments will replace existing module_arguments.",
                        "When state is C(args_absent) args matching those listed in module_arguments will be removed.",
                        "When state is C(args_present) any args listed in module_arguments are added if missing from the existing rule.",
                        "Furthermore, if the module argument takes a value denoted by C(=), the value will be changed to that specified in module_arguments."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "module_path": {
                    "description": [
                        "The module path of the PAM rule being modified.",
                        "The C(type), C(control) and C(module_path) all must match a rule to be modified."
                    ],
                    "required": true,
                    "type": "str"
                },
                "name": {
                    "description": [
                        "The name generally refers to the PAM service file to change, for example system-auth."
                    ],
                    "required": true,
                    "type": "str"
                },
                "new_control": {
                    "description": [
                        "The new control to assign to the new rule."
                    ],
                    "type": "str"
                },
                "new_module_path": {
                    "description": [
                        "The new module path to be assigned to the new rule."
                    ],
                    "type": "str"
                },
                "new_type": {
                    "choices": [
                        "account",
                        "-account",
                        "auth",
                        "-auth",
                        "password",
                        "-password",
                        "session",
                        "-session"
                    ],
                    "description": [
                        "The new type to assign to the new rule."
                    ],
                    "type": "str"
                },
                "path": {
                    "default": "/etc/pam.d",
                    "description": [
                        "This is the path to the PAM service files."
                    ],
                    "type": "path"
                },
                "state": {
                    "choices": [
                        "absent",
                        "before",
                        "after",
                        "args_absent",
                        "args_present",
                        "updated"
                    ],
                    "default": "updated",
                    "description": [
                        "The default of C(updated) will modify an existing rule if type, control and module_path all match an existing rule.",
                        "With C(before), the new rule will be inserted before a rule matching type, control and module_path.",
                        "Similarly, with C(after), the new rule will be inserted after an existing rulematching type, control and module_path.",
                        "With either C(before) or C(after) new_type, new_control, and new_module_path must all be specified.",
                        "If state is C(args_absent) or C(args_present), new_type, new_control, and new_module_path will be ignored.",
                        "State C(absent) will remove the rule.  The 'absent' state was added in Ansible 2.4."
                    ],
                    "type": "str"
                },
                "type": {
                    "choices": [
                        "account",
                        "-account",
                        "auth",
                        "-auth",
                        "password",
                        "-password",
                        "session",
                        "-session"
                    ],
                    "description": [
                        "The type of the PAM rule being modified.",
                        "The C(type), C(control) and C(module_path) all must match a rule to be modified."
                    ],
                    "required": true,
                    "type": "str"
                }
            },
            "short_description": "Manage PAM Modules"
        },
        "examples": "\n- name: Update pamd rule's control in /etc/pam.d/system-auth\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    new_control: sufficient\n\n- name: Update pamd rule's complex control in /etc/pam.d/system-auth\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    new_control: '[success=2 default=ignore]'\n\n- name: Insert a new rule before an existing rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    new_type: auth\n    new_control: sufficient\n    new_module_path: pam_faillock.so\n    state: before\n\n- name: Insert a new rule pam_wheel.so with argument 'use_uid' after an \\\n        existing rule pam_rootok.so\n  community.general.pamd:\n    name: su\n    type: auth\n    control: sufficient\n    module_path: pam_rootok.so\n    new_type: auth\n    new_control: required\n    new_module_path: pam_wheel.so\n    module_arguments: 'use_uid'\n    state: after\n\n- name: Remove module arguments from an existing rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    module_arguments: ''\n    state: updated\n\n- name: Replace all module arguments in an existing rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    module_arguments: 'preauth\n        silent\n        deny=3\n        unlock_time=604800\n        fail_interval=900'\n    state: updated\n\n- name: Remove specific arguments from a rule\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    module_arguments: crond,quiet\n    state: args_absent\n\n- name: Ensure specific arguments are present in a rule\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    module_arguments: crond,quiet\n    state: args_present\n\n- name: Ensure specific arguments are present in a rule (alternative)\n  community.general.pamd:\n    name: system-auth\n    type: session\n    control: '[success=1 default=ignore]'\n    module_path: pam_succeed_if.so\n    module_arguments:\n    - crond\n    - quiet\n    state: args_present\n\n- name: Module arguments requiring commas must be listed as a Yaml list\n  community.general.pamd:\n    name: special-module\n    type: account\n    control: required\n    module_path: pam_access.so\n    module_arguments:\n    - listsep=,\n    state: args_present\n\n- name: Update specific argument value in a rule\n  community.general.pamd:\n    name: system-auth\n    type: auth\n    control: required\n    module_path: pam_faillock.so\n    module_arguments: 'fail_interval=300'\n    state: args_present\n\n- name: Add pam common-auth rule for duo\n  community.general.pamd:\n    name: common-auth\n    new_type: auth\n    new_control: '[success=1 default=ignore]'\n    new_module_path: '/lib64/security/pam_duo.so'\n    state: after\n    type: auth\n    module_path: pam_sss.so\n    control: 'requisite'\n",
        "metadata": null,
        "return": {
            "action": {
                "description": [
                    "That action that was taken and is one of: update_rule, insert_before_rule, insert_after_rule, args_present, args_absent, absent. This was available in Ansible 2.4 and removed in Ansible 2.8"
                ],
                "returned": "always",
                "sample": "update_rule",
                "type": "str"
            },
            "backupdest": {
                "description": [
                    "The file name of the backup file, if created."
                ],
                "returned": "success",
                "type": "str"
            },
            "change_count": {
                "description": "How many rules were changed.",
                "returned": "success",
                "sample": 1,
                "type": "int"
            },
            "dest": {
                "description": [
                    "Path to pam.d service that was changed.  This is only available in Ansible 2.3 and was removed in Ansible 2.4."
                ],
                "returned": "success",
                "sample": "/etc/pam.d/system-auth",
                "type": "str"
            },
            "new_rule": {
                "description": "The changes to the rule.  This was available in Ansible 2.4 and Ansible 2.5.  It was removed in Ansible 2.6.",
                "returned": "success",
                "sample": "None      None None sha512 shadow try_first_pass use_authtok",
                "type": "str"
            },
            "updated_rule_(n)": {
                "description": "The rule(s) that was/were changed.  This is only available in Ansible 2.4 and was removed in Ansible 2.5.",
                "returned": "success",
                "sample": [
                    "password      sufficient  pam_unix.so sha512 shadow try_first_pass use_authtok"
                ],
                "type": "str"
            }
        }
    }
}
