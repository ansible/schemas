{
    "community.general.dnsimple": {
        "doc": {
            "author": "Alex Coomans (@drcapulet)",
            "collection": "community.general",
            "description": [
                "Manages domains and records via the DNSimple API, see the docs: U(http://developer.dnsimple.com/)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/dnsimple.py",
            "has_action": false,
            "module": "dnsimple",
            "notes": [
                "DNSimple API v1 is deprecated. Please install dnsimple-python>=1.0.0 which uses v2 API."
            ],
            "options": {
                "account_api_token": {
                    "description": [
                        "Account API token. See I(account_email) for more information."
                    ],
                    "type": "str"
                },
                "account_email": {
                    "description": [
                        "Account email. If omitted, the environment variables C(DNSIMPLE_EMAIL) and C(DNSIMPLE_API_TOKEN) will be looked for.",
                        "If those aren't found, a C(.dnsimple) file will be looked for, see: U(https://github.com/mikemaccana/dnsimple-python#getting-started)."
                    ],
                    "type": "str"
                },
                "domain": {
                    "description": [
                        "Domain to work with. Can be the domain name (e.g. \"mydomain.com\") or the numeric ID of the domain in DNSimple.",
                        "If omitted, a list of domains will be returned.",
                        "If domain is present but the domain doesn't exist, it will be created."
                    ],
                    "type": "str"
                },
                "priority": {
                    "description": [
                        "Record priority."
                    ],
                    "type": "int"
                },
                "record": {
                    "description": [
                        "Record to add, if blank a record for the domain will be created, supports the wildcard (*)."
                    ],
                    "type": "str"
                },
                "record_ids": {
                    "description": [
                        "List of records to ensure they either exist or do not exist."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "solo": {
                    "default": false,
                    "description": [
                        "Whether the record should be the only one for that record type and record name.",
                        "Only use with C(state) is set to C(present) on a record."
                    ],
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "whether the record should exist or not."
                    ],
                    "type": "str"
                },
                "ttl": {
                    "default": 3600,
                    "description": [
                        "The TTL to give the new record in seconds."
                    ],
                    "type": "int"
                },
                "type": {
                    "choices": [
                        "A",
                        "ALIAS",
                        "CNAME",
                        "MX",
                        "SPF",
                        "URL",
                        "TXT",
                        "NS",
                        "SRV",
                        "NAPTR",
                        "PTR",
                        "AAAA",
                        "SSHFP",
                        "HINFO",
                        "POOL",
                        "CAA"
                    ],
                    "description": [
                        "The type of DNS record to create."
                    ],
                    "type": "str"
                },
                "value": {
                    "description": [
                        "Record value.",
                        "Must be specified when trying to ensure a record exists."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "dnsimple >= 1.0.0"
            ],
            "short_description": "Interface with dnsimple.com (a DNS hosting service)"
        },
        "examples": "\n- name: Authenticate using email and API token and fetch all domains\n  community.general.dnsimple:\n    account_email: test@example.com\n    account_api_token: dummyapitoken\n  delegate_to: localhost\n\n- name: Fetch my.com domain records\n  community.general.dnsimple:\n    domain: my.com\n    state: present\n  delegate_to: localhost\n  register: records\n\n- name: Delete a domain\n  community.general.dnsimple:\n    domain: my.com\n    state: absent\n  delegate_to: localhost\n\n- name: Create a test.my.com A record to point to 127.0.0.1\n  community.general.dnsimple:\n    domain: my.com\n    record: test\n    type: A\n    value: 127.0.0.1\n  delegate_to: localhost\n  register: record\n\n- name: Delete record using record_ids\n  community.general.dnsimple:\n    domain: my.com\n    record_ids: '{{ record[\"id\"] }}'\n    state: absent\n  delegate_to: localhost\n\n- name: Create a my.com CNAME record to example.com\n  community.general.dnsimple:\n    domain: my.com\n    record: ''\n    type: CNAME\n    value: example.com\n    state: present\n  delegate_to: localhost\n\n- name: Change TTL value for a record\n  community.general.dnsimple:\n    domain: my.com\n    record: ''\n    type: CNAME\n    value: example.com\n    ttl: 600\n    state: present\n  delegate_to: localhost\n\n- name: Delete the record\n  community.general.dnsimple:\n    domain: my.com\n    record: ''\n    type: CNAME\n    value: example.com\n    state: absent\n  delegate_to: localhost\n",
        "metadata": null,
        "return": null
    }
}
