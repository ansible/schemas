{
    "kubernetes.core.k8s_service": {
        "doc": {
            "author": "KubeVirt Team (@kubevirt)",
            "collection": "kubernetes.core",
            "description": [
                "Use Openshift Python SDK to manage Services on Kubernetes"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/kubernetes/core/plugins/modules/k8s_service.py",
            "has_action": true,
            "module": "k8s_service",
            "notes": [
                "The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on both platforms. For API version details and additional information visit https://github.com/openshift/openshift-restclient-python",
                "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file."
            ],
            "options": {
                "api_key": {
                    "description": [
                        "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable."
                    ],
                    "type": "str"
                },
                "apply": {
                    "default": false,
                    "description": [
                        "C(apply) compares the desired resource definition with the previously supplied resource definition, ignoring properties that are automatically generated",
                        "C(apply) works better with Services than 'force=yes'",
                        "mutually exclusive with C(merge_type)"
                    ],
                    "type": "bool"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_ca_cert"
                    ],
                    "description": [
                        "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable."
                    ],
                    "type": "path"
                },
                "client_cert": {
                    "aliases": [
                        "cert_file"
                    ],
                    "description": [
                        "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "key_file"
                    ],
                    "description": [
                        "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable."
                    ],
                    "type": "path"
                },
                "context": {
                    "description": [
                        "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable."
                    ],
                    "type": "str"
                },
                "force": {
                    "default": false,
                    "description": [
                        "If set to C(yes), and I(state) is C(present), an existing object will be replaced."
                    ],
                    "type": "bool"
                },
                "host": {
                    "description": [
                        "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable."
                    ],
                    "type": "str"
                },
                "kubeconfig": {
                    "description": [
                        "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json). Can also be specified via K8S_AUTH_KUBECONFIG environment variable."
                    ],
                    "type": "path"
                },
                "merge_type": {
                    "choices": [
                        "json",
                        "merge",
                        "strategic-merge"
                    ],
                    "description": [
                        "Whether to override the default patch merge approach with a specific type. By default, the strategic merge will typically be used.",
                        "For example, Custom Resource Definitions typically aren't updatable by the usual strategic merge. You may want to use C(merge) if you see \"strategic merge patch format is not supported\"",
                        "See U(https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment)",
                        "Requires openshift >= 0.6.2",
                        "If more than one merge_type is given, the merge_types will be tried in order",
                        "If openshift >= 0.6.2, this defaults to C(['strategic-merge', 'merge']), which is ideal for using the same parameters on resource kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default is simply C(strategic-merge)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "name": {
                    "description": [
                        "Use to specify a Service object name."
                    ],
                    "required": true,
                    "type": "str"
                },
                "namespace": {
                    "description": [
                        "Use to specify a Service object namespace."
                    ],
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.",
                        "Please read the description of the C(username) option for a discussion of when this option is applicable."
                    ],
                    "type": "str"
                },
                "persist_config": {
                    "description": [
                        "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.",
                        "When the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.",
                        "Default to false.",
                        "Please note that the current version of the k8s python client library does not support setting this flag to True yet.",
                        "The fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169"
                    ],
                    "type": "bool"
                },
                "ports": {
                    "description": [
                        "A list of ports to expose.",
                        "U(https://kubernetes.io/docs/concepts/services-networking/service/#multi-port-services)"
                    ],
                    "elements": "dict",
                    "type": "list"
                },
                "proxy": {
                    "description": [
                        "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.",
                        "Please note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY)."
                    ],
                    "type": "str"
                },
                "resource_definition": {
                    "aliases": [
                        "definition",
                        "inline"
                    ],
                    "description": [
                        "Provide a valid YAML definition (either as a string, list, or dict) for an object when creating or updating.",
                        "NOTE: I(kind), I(api_version), I(name), and I(namespace) will be overwritten by corresponding values found in the provided I(resource_definition)."
                    ]
                },
                "selector": {
                    "description": [
                        "Label selectors identify objects this Service should apply to.",
                        "U(https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)"
                    ],
                    "type": "dict"
                },
                "src": {
                    "description": [
                        "Provide a path to a file containing a valid YAML definition of an object or objects to be created or updated. Mutually exclusive with I(resource_definition). NOTE: I(kind), I(api_version), I(name), and I(namespace) will be overwritten by corresponding values found in the configuration read in from the I(src) file.",
                        "Reads from the local file system. To read from the Ansible controller's file system, including vaulted files, use the file lookup plugin or template lookup plugin, combined with the from_yaml filter, and pass the result to I(resource_definition). See Examples below.",
                        "Mutually exclusive with I(template) in case of M(k8s) module."
                    ],
                    "type": "path"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Determines if an object should be created, patched, or deleted. When set to C(present), an object will be created, if it does not already exist. If set to C(absent), an existing object will be deleted. If set to C(present), an existing object will be patched, if its attributes differ from those specified using I(resource_definition) or I(src)."
                    ],
                    "type": "str"
                },
                "type": {
                    "choices": [
                        "NodePort",
                        "ClusterIP",
                        "LoadBalancer",
                        "ExternalName"
                    ],
                    "description": [
                        "Specifies the type of Service to create.",
                        "See U(https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)"
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.",
                        "Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the C(k8s_auth) module, as that might do what you need."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "description": [
                        "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.7",
                "openshift >= 0.6.2"
            ],
            "short_description": "Manage Services on Kubernetes"
        },
        "examples": "\n- name: Expose https port with ClusterIP\n  kubernetes.core.k8s_service:\n    state: present\n    name: test-https\n    namespace: default\n    ports:\n    - port: 443\n      protocol: TCP\n    selector:\n      key: special\n\n- name: Expose https port with ClusterIP using spec\n  kubernetes.core.k8s_service:\n    state: present\n    name: test-https\n    namespace: default\n    inline:\n      spec:\n        ports:\n        - port: 443\n          protocol: TCP\n        selector:\n          key: special\n",
        "metadata": null,
        "return": {
            "result": {
                "contains": {
                    "api_version": {
                        "description": "The versioned schema of this representation of an object.",
                        "returned": "success",
                        "type": "str"
                    },
                    "kind": {
                        "description": "Always 'Service'.",
                        "returned": "success",
                        "type": "str"
                    },
                    "metadata": {
                        "description": "Standard object metadata. Includes name, namespace, annotations, labels, etc.",
                        "returned": "success",
                        "type": "complex"
                    },
                    "spec": {
                        "description": "Specific attributes of the object. Will vary based on the I(api_version) and I(kind).",
                        "returned": "success",
                        "type": "complex"
                    },
                    "status": {
                        "description": "Current status details for the object.",
                        "returned": "success",
                        "type": "complex"
                    }
                },
                "description": [
                    "The created, patched, or otherwise present Service object. Will be empty in the case of a deletion."
                ],
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
