{
    "community.general.rocketchat": {
        "doc": {
            "author": "Ramon de la Fuente (@ramondelafuente)",
            "collection": "community.general",
            "description": [
                "The C(rocketchat) module sends notifications to Rocket Chat via the Incoming WebHook integration"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/rocketchat.py",
            "has_action": false,
            "module": "rocketchat",
            "options": {
                "attachments": {
                    "description": [
                        "Define a list of attachments."
                    ],
                    "elements": "dict",
                    "type": "list"
                },
                "channel": {
                    "description": [
                        "Channel to send the message to. If absent, the message goes to the channel selected for the I(token) specified during the creation of webhook."
                    ],
                    "type": "str"
                },
                "color": {
                    "choices": [
                        "normal",
                        "good",
                        "warning",
                        "danger"
                    ],
                    "default": "normal",
                    "description": [
                        "Allow text to use default colors - use the default of 'normal' to not send a custom color bar at the start of the message"
                    ],
                    "type": "str"
                },
                "domain": {
                    "description": [
                        "The domain for your environment without protocol. (i.e. C(example.com) or C(chat.example.com))"
                    ],
                    "required": true,
                    "type": "str"
                },
                "icon_emoji": {
                    "description": [
                        "Emoji for the message sender. The representation for the available emojis can be got from Rocket Chat. (for example :thumbsup:) (if I(icon_emoji) is set, I(icon_url) will not be used)"
                    ],
                    "type": "str"
                },
                "icon_url": {
                    "default": "https://www.ansible.com/favicon.ico",
                    "description": [
                        "URL for the message sender's icon."
                    ],
                    "type": "str"
                },
                "link_names": {
                    "choices": [
                        1,
                        0
                    ],
                    "default": 1,
                    "description": [
                        "Automatically create links for channels and usernames in I(msg)."
                    ],
                    "type": "int"
                },
                "msg": {
                    "description": [
                        "Message to be sent."
                    ],
                    "type": "str"
                },
                "protocol": {
                    "choices": [
                        "http",
                        "https"
                    ],
                    "default": "https",
                    "description": [
                        "Specify the protocol used to send notification messages before the webhook url. (i.e. http or https)"
                    ],
                    "type": "str"
                },
                "token": {
                    "description": [
                        "Rocket Chat Incoming Webhook integration token.  This provides authentication to Rocket Chat's Incoming webhook for posting messages."
                    ],
                    "required": true,
                    "type": "str"
                },
                "username": {
                    "default": "Ansible",
                    "description": [
                        "This is the sender of the message."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": "yes",
                    "description": [
                        "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates."
                    ],
                    "type": "bool"
                }
            },
            "short_description": "Send notifications to Rocket Chat"
        },
        "examples": "\n- name: Send notification message via Rocket Chat\n  community.general.rocketchat:\n    token: thetoken/generatedby/rocketchat\n    domain: chat.example.com\n    msg: '{{ inventory_hostname }} completed'\n  delegate_to: localhost\n\n- name: Send notification message via Rocket Chat all options\n  community.general.rocketchat:\n    domain: chat.example.com\n    token: thetoken/generatedby/rocketchat\n    msg: '{{ inventory_hostname }} completed'\n    channel: #ansible\n    username: 'Ansible on {{ inventory_hostname }}'\n    icon_url: http://www.example.com/some-image-file.png\n    link_names: 0\n  delegate_to: localhost\n\n- name: Insert a color bar in front of the message for visibility purposes and use the default webhook icon and name configured in rocketchat\n  community.general.rocketchat:\n    token: thetoken/generatedby/rocketchat\n    domain: chat.example.com\n    msg: '{{ inventory_hostname }} is alive!'\n    color: good\n    username: ''\n    icon_url: ''\n  delegate_to: localhost\n\n- name: Use the attachments API\n  community.general.rocketchat:\n    token: thetoken/generatedby/rocketchat\n    domain: chat.example.com\n    attachments:\n      - text: Display my system load on host A and B\n        color: #ff00dd\n        title: System load\n        fields:\n          - title: System A\n            value: 'load average: 0,74, 0,66, 0,63'\n            short: True\n          - title: System B\n            value: 'load average: 5,16, 4,64, 2,43'\n            short: True\n  delegate_to: localhost\n",
        "metadata": null,
        "return": {
            "changed": {
                "description": "A flag indicating if any change was made or not.",
                "returned": "success",
                "sample": false,
                "type": "bool"
            }
        }
    }
}
