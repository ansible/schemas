{
    "community.crypto.luks_device": {
        "doc": {
            "author": "Jan Pokorny (@japokorn)",
            "collection": "community.crypto",
            "description": [
                "Module manages L(LUKS,https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup) on given device. Supports creating, destroying, opening and closing of LUKS container and adding or removing new keys and passphrases."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/crypto/plugins/modules/luks_device.py",
            "has_action": false,
            "module": "luks_device",
            "options": {
                "cipher": {
                    "description": [
                        "This option allows the user to define the cipher specification string for the LUKS container.",
                        "Will only be used on container creation.",
                        "For pre-2.6.10 kernels, use C(aes-plain) as they don't understand the new cipher spec strings. To use ESSIV, use C(aes-cbc-essiv:sha256)."
                    ],
                    "type": "str",
                    "version_added": "1.1.0",
                    "version_added_collection": "community.crypto"
                },
                "device": {
                    "description": [
                        "Device to work with (e.g. C(/dev/sda1)). Needed in most cases. Can be omitted only when I(state=closed) together with I(name) is provided."
                    ],
                    "type": "str"
                },
                "force_remove_last_key": {
                    "default": false,
                    "description": [
                        "If set to C(yes), allows removing the last key from a container.",
                        "BEWARE that when the last key has been removed from a container, the container can no longer be opened!"
                    ],
                    "type": "bool"
                },
                "hash": {
                    "description": [
                        "This option allows the user to specify the hash function used in LUKS key setup scheme and volume key digest.",
                        "Will only be used on container creation."
                    ],
                    "type": "str",
                    "version_added": "1.1.0",
                    "version_added_collection": "community.crypto"
                },
                "keyfile": {
                    "description": [
                        "Used to unlock the container. Either a I(keyfile) or a I(passphrase) is needed for most of the operations. Parameter value is the path to the keyfile with the passphrase.",
                        "BEWARE that working with keyfiles in plaintext is dangerous. Make sure that they are protected."
                    ],
                    "type": "path"
                },
                "keysize": {
                    "description": [
                        "Sets the key size only if LUKS container does not exist."
                    ],
                    "type": "int",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "label": {
                    "description": [
                        "This option allow the user to create a LUKS2 format container with label support, respectively to identify the container by label on later usages.",
                        "Will only be used on container creation, or when I(device) is not specified.",
                        "This cannot be specified if I(type) is set to C(luks1)."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "name": {
                    "description": [
                        "Sets container name when I(state=opened). Can be used instead of I(device) when closing the existing container (i.e. when I(state=closed))."
                    ],
                    "type": "str"
                },
                "new_keyfile": {
                    "description": [
                        "Adds additional key to given container on I(device). Needs I(keyfile) or I(passphrase) option for authorization. LUKS container supports up to 8 keyslots. Parameter value is the path to the keyfile with the passphrase.",
                        "NOTE that adding additional keys is idempotent only since community.crypto 1.4.0. For older versions, a new keyslot will be used even if another keyslot already exists for this keyfile.",
                        "BEWARE that working with keyfiles in plaintext is dangerous. Make sure that they are protected."
                    ],
                    "type": "path"
                },
                "new_passphrase": {
                    "description": [
                        "Adds additional passphrase to given container on I(device). Needs I(keyfile) or I(passphrase) option for authorization. LUKS container supports up to 8 keyslots. Parameter value is a string with the new passphrase.",
                        "NOTE that adding additional passphrase is idempotent only since community.crypto 1.4.0. For older versions, a new keyslot will be used even if another keyslot already exists for this passphrase."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "passphrase": {
                    "description": [
                        "Used to unlock the container. Either a I(passphrase) or a I(keyfile) is needed for most of the operations. Parameter value is a string with the passphrase."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "pbkdf": {
                    "description": [
                        "This option allows the user to configure the Password-Based Key Derivation Function (PBKDF) used.",
                        "Will only be used on container creation, and when adding keys to an existing container."
                    ],
                    "suboptions": {
                        "algorithm": {
                            "choices": [
                                "argon2i",
                                "argon2id",
                                "pbkdf2"
                            ],
                            "description": [
                                "The algorithm to use.",
                                "Only available for the LUKS 2 format."
                            ],
                            "type": "str"
                        },
                        "iteration_count": {
                            "description": [
                                "Specify the iteration count used for the PBKDF.",
                                "Mutually exclusive with I(iteration_time)."
                            ],
                            "type": "int"
                        },
                        "iteration_time": {
                            "description": [
                                "Specify the iteration time used for the PBKDF.",
                                "Note that this is in B(seconds), not in milliseconds as on the command line.",
                                "Mutually exclusive with I(iteration_count)."
                            ],
                            "type": "float"
                        },
                        "memory": {
                            "description": [
                                "The memory cost limit in kilobytes for the PBKDF.",
                                "This is not used for PBKDF2, but only for the Argon PBKDFs."
                            ],
                            "type": "int"
                        },
                        "parallel": {
                            "description": [
                                "The parallel cost for the PBKDF. This is the number of threads that run in parallel.",
                                "This is not used for PBKDF2, but only for the Argon PBKDFs."
                            ],
                            "type": "int"
                        }
                    },
                    "type": "dict",
                    "version_added": "1.4.0",
                    "version_added_collection": "community.crypto"
                },
                "remove_keyfile": {
                    "description": [
                        "Removes given key from the container on I(device). Does not remove the keyfile from filesystem. Parameter value is the path to the keyfile with the passphrase.",
                        "NOTE that removing keys is idempotent only since community.crypto 1.4.0. For older versions, trying to remove a key which no longer exists results in an error.",
                        "NOTE that to remove the last key from a LUKS container, the I(force_remove_last_key) option must be set to C(yes).",
                        "BEWARE that working with keyfiles in plaintext is dangerous. Make sure that they are protected."
                    ],
                    "type": "path"
                },
                "remove_passphrase": {
                    "description": [
                        "Removes given passphrase from the container on I(device). Parameter value is a string with the passphrase to remove.",
                        "NOTE that removing passphrases is idempotent only since community.crypto 1.4.0. For older versions, trying to remove a passphrase which no longer exists results in an error.",
                        "NOTE that to remove the last keyslot from a LUKS container, the I(force_remove_last_key) option must be set to C(yes)."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "sector_size": {
                    "description": [
                        "This option allows the user to specify the sector size (in bytes) used for LUKS2 containers.",
                        "Will only be used on container creation."
                    ],
                    "type": "int",
                    "version_added": "1.5.0",
                    "version_added_collection": "community.crypto"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent",
                        "opened",
                        "closed"
                    ],
                    "default": "present",
                    "description": [
                        "Desired state of the LUKS container. Based on its value creates, destroys, opens or closes the LUKS container on a given device.",
                        "I(present) will create LUKS container unless already present. Requires I(device) and either I(keyfile) or I(passphrase) options to be provided.",
                        "I(absent) will remove existing LUKS container if it exists. Requires I(device) or I(name) to be specified.",
                        "I(opened) will unlock the LUKS container. If it does not exist it will be created first. Requires I(device) and either I(keyfile) or I(passphrase) to be specified. Use the I(name) option to set the name of the opened container.  Otherwise the name will be generated automatically and returned as a part of the result.",
                        "I(closed) will lock the LUKS container. However if the container does not exist it will be created. Requires I(device) and either I(keyfile) or I(passphrase) options to be provided. If container does already exist I(device) or I(name) will suffice."
                    ],
                    "type": "str"
                },
                "type": {
                    "choices": [
                        "luks1",
                        "luks2"
                    ],
                    "description": [
                        "This option allow the user explicit define the format of LUKS container that wants to work with. Options are C(luks1) or C(luks2)"
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                },
                "uuid": {
                    "description": [
                        "With this option user can identify the LUKS container by UUID.",
                        "Will only be used when I(device) and I(label) are not specified."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.crypto"
                }
            },
            "requirements": [
                "cryptsetup",
                "wipefs (when I(state) is C(absent))",
                "lsblk",
                "blkid (when I(label) or I(uuid) options are used)"
            ],
            "short_description": "Manage encrypted (LUKS) devices"
        },
        "examples": "\n\n- name: Create LUKS container (remains unchanged if it already exists)\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"present\"\n    keyfile: \"/vault/keyfile\"\n\n- name: Create LUKS container with a passphrase\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"present\"\n    passphrase: \"foo\"\n\n- name: Create LUKS container with specific encryption\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"present\"\n    cipher: \"aes\"\n    hash: \"sha256\"\n\n- name: (Create and) open the LUKS container; name it \"mycrypt\"\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"opened\"\n    name: \"mycrypt\"\n    keyfile: \"/vault/keyfile\"\n\n- name: Close the existing LUKS container \"mycrypt\"\n  community.crypto.luks_device:\n    state: \"closed\"\n    name: \"mycrypt\"\n\n- name: Make sure LUKS container exists and is closed\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"closed\"\n    keyfile: \"/vault/keyfile\"\n\n- name: Create container if it does not exist and add new key to it\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"present\"\n    keyfile: \"/vault/keyfile\"\n    new_keyfile: \"/vault/keyfile2\"\n\n- name: Add new key to the LUKS container (container has to exist)\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    keyfile: \"/vault/keyfile\"\n    new_keyfile: \"/vault/keyfile2\"\n\n- name: Add new passphrase to the LUKS container\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    keyfile: \"/vault/keyfile\"\n    new_passphrase: \"foo\"\n\n- name: Remove existing keyfile from the LUKS container\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    remove_keyfile: \"/vault/keyfile2\"\n\n- name: Remove existing passphrase from the LUKS container\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    remove_passphrase: \"foo\"\n\n- name: Completely remove the LUKS container and its contents\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"absent\"\n\n- name: Create a container with label\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"present\"\n    keyfile: \"/vault/keyfile\"\n    label: personalLabelName\n\n- name: Open the LUKS container based on label without device; name it \"mycrypt\"\n  community.crypto.luks_device:\n    label: \"personalLabelName\"\n    state: \"opened\"\n    name: \"mycrypt\"\n    keyfile: \"/vault/keyfile\"\n\n- name: Close container based on UUID\n  community.crypto.luks_device:\n    uuid: 03ecd578-fad4-4e6c-9348-842e3e8fa340\n    state: \"closed\"\n    name: \"mycrypt\"\n\n- name: Create a container using luks2 format\n  community.crypto.luks_device:\n    device: \"/dev/loop0\"\n    state: \"present\"\n    keyfile: \"/vault/keyfile\"\n    type: luks2\n",
        "metadata": null,
        "return": {
            "name": {
                "description": "When I(state=opened) returns (generated or given) name of LUKS container. Returns None if no name is supplied.",
                "returned": "success",
                "sample": "luks-c1da9a58-2fde-4256-9d9f-6ab008b4dd1b",
                "type": "str"
            }
        }
    }
}
