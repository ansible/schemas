{
    "community.aws.ecs_taskdefinition": {
        "doc": {
            "author": "Mark Chance (@Java1Guy)",
            "collection": "community.aws",
            "description": [
                "Registers or deregisters task definitions in the Amazon Web Services (AWS) EC2 Container Service (ECS)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ecs_taskdefinition.py",
            "has_action": false,
            "module": "ecs_taskdefinition",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "arn": {
                    "description": [
                        "The ARN of the task description to delete."
                    ],
                    "required": false,
                    "type": "str"
                },
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "containers": {
                    "description": [
                        "A list of containers definitions.",
                        "See U(https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ecs.html) for a complete list of parameters."
                    ],
                    "elements": "dict",
                    "required": true,
                    "suboptions": {
                        "command": {
                            "description": "The command that is passed to the container.",
                            "required": false,
                            "type": "list"
                        },
                        "cpu": {
                            "description": "The number of cpu units reserved for the container.",
                            "required": false,
                            "type": "int"
                        },
                        "dependsOn": {
                            "description": [
                                "The dependencies defined for container startup and shutdown.",
                                "When a dependency is defined for container startup, for container shutdown it is reversed."
                            ],
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "condition": {
                                    "choices": [
                                        "start",
                                        "complete",
                                        "success",
                                        "healthy"
                                    ],
                                    "description": "The dependency condition of the container.",
                                    "required": true,
                                    "type": "str"
                                },
                                "containerName": {
                                    "description": "The name of a container.",
                                    "required": true,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "disableNetworking": {
                            "description": "When this parameter is C(True), networking is disabled within the container.",
                            "required": false,
                            "type": "bool"
                        },
                        "dnsSearchDomains": {
                            "description": [
                                "A list of DNS search domains that are presented to the container.",
                                "This parameter is not supported for Windows containers."
                            ],
                            "required": false,
                            "type": "list"
                        },
                        "dnsServers": {
                            "description": [
                                "A list of DNS servers that are presented to the container.",
                                "This parameter is not supported for Windows containers."
                            ],
                            "required": false,
                            "type": "list"
                        },
                        "dockerLabels": {
                            "description": "A key/value map of labels to add to the container.",
                            "required": false,
                            "type": "dict"
                        },
                        "dockerSecurityOptions": {
                            "description": [
                                "A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems.",
                                "This parameter is not supported for Windows containers."
                            ],
                            "required": false,
                            "type": "list"
                        },
                        "entryPoint": {
                            "description": "The entry point that is passed to the container.",
                            "required": false,
                            "type": "str"
                        },
                        "environment": {
                            "description": "The environment variables to pass to a container.",
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "name": {
                                    "description": "The name of the key-value pair.",
                                    "required": false,
                                    "type": "str"
                                },
                                "value": {
                                    "description": "The value of the key-value pair.",
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "environmentFiles": {
                            "description": "A list of files containing the environment variables to pass to a container.",
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "type": {
                                    "description": "The file type to use. The only supported value is C(s3).",
                                    "required": false,
                                    "type": "str"
                                },
                                "value": {
                                    "description": "The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.",
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "essential": {
                            "description": [
                                "If I(essential=True), and the container fails or stops for any reason, all other containers that are part of the task are stopped."
                            ],
                            "required": false,
                            "type": "bool"
                        },
                        "extraHosts": {
                            "description": [
                                "A list of hostnames and IP address mappings to append to the /etc/hosts file on the container.",
                                "This parameter is not supported for Windows containers or tasks that use I(network_mode=awsvpc)."
                            ],
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "hostname": {
                                    "description": "The hostname to use in the /etc/hosts entry.",
                                    "required": false,
                                    "type": "str"
                                },
                                "ipAddress": {
                                    "description": "The IP address to use in the /etc/hosts entry.",
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "healthCheck": {
                            "description": "The health check command and associated configuration parameters for the container.",
                            "required": false,
                            "type": "dict"
                        },
                        "hostname": {
                            "description": [
                                "The hostname to use for your container.",
                                "This parameter is not supported if I(network_mode=awsvpc)."
                            ],
                            "required": false,
                            "type": "str"
                        },
                        "image": {
                            "description": "The image used to start a container.",
                            "required": false,
                            "type": "str"
                        },
                        "interactive": {
                            "description": [
                                "When I(interactive=True), it allows to deploy containerized applications that require stdin or a tty to be allocated."
                            ],
                            "required": false,
                            "type": "bool"
                        },
                        "links": {
                            "description": [
                                "Allows containers to communicate with each other without the need for port mappings.",
                                "This parameter is only supported if I(network_mode=bridge)."
                            ],
                            "required": false,
                            "type": "list"
                        },
                        "linuxParameters": {
                            "description": "Linux-specific modifications that are applied to the container, such as Linux kernel capabilities.",
                            "required": false,
                            "suboptions": {
                                "capabilities": {
                                    "description": [
                                        "The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker."
                                    ],
                                    "required": false,
                                    "suboptions": {
                                        "add": {
                                            "choices": [
                                                "ALL",
                                                "AUDIT_CONTROL",
                                                "AUDIT_WRITE",
                                                "BLOCK_SUSPEND",
                                                "CHOWN",
                                                "DAC_OVERRIDE",
                                                "DAC_READ_SEARCH",
                                                "FOWNER",
                                                "FSETID",
                                                "IPC_LOCK",
                                                "IPC_OWNER",
                                                "KILL",
                                                "LEASE",
                                                "LINUX_IMMUTABLE",
                                                "MAC_ADMIN",
                                                "MAC_OVERRIDE",
                                                "MKNOD",
                                                "NET_ADMIN",
                                                "NET_BIND_SERVICE",
                                                "NET_BROADCAST",
                                                "NET_RAW",
                                                "SETFCAP",
                                                "SETGID",
                                                "SETPCAP",
                                                "SETUID",
                                                "SYS_ADMIN",
                                                "SYS_BOOT",
                                                "SYS_CHROOT",
                                                "SYS_MODULE",
                                                "SYS_NICE",
                                                "SYS_PACCT",
                                                "SYS_PTRACE",
                                                "SYS_RAWIO",
                                                "SYS_RESOURCE",
                                                "SYS_TIME",
                                                "SYS_TTY_CONFIG",
                                                "SYSLOG",
                                                "WAKE_ALARM"
                                            ],
                                            "description": [
                                                "The Linux capabilities for the container that have been added to the default configuration provided by Docker.",
                                                "If I(launch_type=FARGATE), this parameter is not supported."
                                            ],
                                            "required": false,
                                            "type": "list"
                                        },
                                        "drop": {
                                            "choices": [
                                                "ALL",
                                                "AUDIT_CONTROL",
                                                "AUDIT_WRITE",
                                                "BLOCK_SUSPEND",
                                                "CHOWN",
                                                "DAC_OVERRIDE",
                                                "DAC_READ_SEARCH",
                                                "FOWNER",
                                                "FSETID",
                                                "IPC_LOCK",
                                                "IPC_OWNER",
                                                "KILL",
                                                "LEASE",
                                                "LINUX_IMMUTABLE",
                                                "MAC_ADMIN",
                                                "MAC_OVERRIDE",
                                                "MKNOD",
                                                "NET_ADMIN",
                                                "NET_BIND_SERVICE",
                                                "NET_BROADCAST",
                                                "NET_RAW",
                                                "SETFCAP",
                                                "SETGID",
                                                "SETPCAP",
                                                "SETUID",
                                                "SYS_ADMIN",
                                                "SYS_BOOT",
                                                "SYS_CHROOT",
                                                "SYS_MODULE",
                                                "SYS_NICE",
                                                "SYS_PACCT",
                                                "SYS_PTRACE",
                                                "SYS_RAWIO",
                                                "SYS_RESOURCE",
                                                "SYS_TIME",
                                                "SYS_TTY_CONFIG",
                                                "SYSLOG",
                                                "WAKE_ALARM"
                                            ],
                                            "description": [
                                                "The Linux capabilities for the container that have been removed from the default configuration provided by Docker."
                                            ],
                                            "required": false,
                                            "type": "list"
                                        }
                                    },
                                    "type": "dict"
                                },
                                "devices": {
                                    "description": [
                                        "Any host devices to expose to the container.",
                                        "If I(launch_type=FARGATE), this parameter is not supported."
                                    ],
                                    "elements": "dict",
                                    "required": false,
                                    "suboptions": {
                                        "containerPath": {
                                            "description": "The path inside the container at which to expose the host device.",
                                            "required": false,
                                            "type": "str"
                                        },
                                        "hostPath": {
                                            "description": "The path for the device on the host container instance.",
                                            "required": true,
                                            "type": "str"
                                        },
                                        "permissions": {
                                            "description": "The explicit permissions to provide to the container for the device.",
                                            "required": false,
                                            "type": "list"
                                        }
                                    },
                                    "type": "list"
                                },
                                "initProcessEnabled": {
                                    "description": "Run an init process inside the container that forwards signals and reaps processes.",
                                    "required": false,
                                    "type": "bool"
                                },
                                "maxSwap": {
                                    "description": [
                                        "The total amount of swap memory (in MiB) a container can use.",
                                        "If I(launch_type=FARGATE), this parameter is not supported."
                                    ],
                                    "required": false,
                                    "type": "int"
                                },
                                "sharedMemorySize": {
                                    "description": [
                                        "The value for the size (in MiB) of the /dev/shm volume.",
                                        "If I(launch_type=FARGATE), this parameter is not supported."
                                    ],
                                    "required": false,
                                    "type": "int"
                                },
                                "swappiness": {
                                    "description": [
                                        "This allows you to tune a container's memory swappiness behavior.",
                                        "If I(launch_type=FARGATE), this parameter is not supported."
                                    ],
                                    "required": false,
                                    "type": "int"
                                },
                                "tmpfs": {
                                    "description": [
                                        "The container path, mount options, and size (in MiB) of the tmpfs mount.",
                                        "If I(launch_type=FARGATE), this parameter is not supported."
                                    ],
                                    "elements": "dict",
                                    "required": false,
                                    "suboptions": {
                                        "containerPath": {
                                            "description": "The absolute file path where the tmpfs volume is to be mounted.",
                                            "required": true,
                                            "type": "str"
                                        },
                                        "mountOptions": {
                                            "choices": [
                                                "defaults",
                                                "ro",
                                                "rw",
                                                "suid",
                                                "nosuid",
                                                "dev",
                                                "nodev",
                                                "exec",
                                                "noexec",
                                                "sync",
                                                "async",
                                                "dirsync",
                                                "remount",
                                                "mand",
                                                "nomand",
                                                "atime",
                                                "noatime",
                                                "diratime",
                                                "nodiratime",
                                                "bind",
                                                "rbind",
                                                "unbindable",
                                                "runbindable",
                                                "private",
                                                "rprivate",
                                                "shared",
                                                "rshared",
                                                "slave",
                                                "rslave",
                                                "relatime",
                                                "norelatime",
                                                "strictatime",
                                                "nostrictatime",
                                                "mode",
                                                "uid",
                                                "gid",
                                                "nr_inodes",
                                                "nr_blocks",
                                                "mpol"
                                            ],
                                            "description": "The list of tmpfs volume mount options.",
                                            "required": false,
                                            "type": "list"
                                        },
                                        "size": {
                                            "description": "The size (in MiB) of the tmpfs volume.",
                                            "required": true,
                                            "type": "int"
                                        }
                                    },
                                    "type": "list"
                                }
                            },
                            "type": "list"
                        },
                        "logConfiguration": {
                            "description": "The log configuration specification for the container.",
                            "required": false,
                            "suboptions": {
                                "logDriver": {
                                    "description": [
                                        "The log driver to use for the container.",
                                        "For tasks on AWS Fargate, the supported log drivers are C(awslogs), C(splunk), and C(awsfirelens).",
                                        "For tasks hosted on Amazon EC2 instances, the supported log drivers are C(awslogs), C(fluentd), C(gelf), C(json-file), C(journald), C(logentries), C(syslog), C(splunk), and C(awsfirelens)."
                                    ],
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "dict"
                        },
                        "memory": {
                            "description": "The amount (in MiB) of memory to present to the container.",
                            "required": false,
                            "type": "int"
                        },
                        "memoryReservation": {
                            "description": "The soft limit (in MiB) of memory to reserve for the container.",
                            "required": false,
                            "type": "int"
                        },
                        "mountPoints": {
                            "description": "The mount points for data volumes in your container.",
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "containerPath": {
                                    "description": "The path on the container to mount the host volume at.",
                                    "required": false,
                                    "type": "str"
                                },
                                "readOnly": {
                                    "default": false,
                                    "description": [
                                        "If this value is C(True), the container has read-only access to the volume.",
                                        "If this value is C(False), then the container can write to the volume."
                                    ],
                                    "required": false,
                                    "type": "bool"
                                },
                                "sourceVolume": {
                                    "description": "The name of the volume to mount.",
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "name": {
                            "description": "The name of a container.",
                            "required": false,
                            "type": "str"
                        },
                        "options": {
                            "description": "The configuration options to send to the log driver.",
                            "required": false,
                            "type": "str"
                        },
                        "portMappings": {
                            "description": "The list of port mappings for the container.",
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "containerPort": {
                                    "description": "The port number on the container that is bound to the user-specified or automatically assigned host port.",
                                    "required": false,
                                    "type": "int"
                                },
                                "hostPort": {
                                    "description": "The port number on the container instance to reserve for your container.",
                                    "required": false,
                                    "type": "int"
                                },
                                "protocol": {
                                    "choices": [
                                        "tcp",
                                        "udp"
                                    ],
                                    "default": "tcp",
                                    "description": "The protocol used for the port mapping.",
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "privileged": {
                            "description": "When this parameter is C(True), the container is given elevated privileges on the host container instance.",
                            "required": false,
                            "type": "bool"
                        },
                        "pseudoTerminal": {
                            "description": "When this parameter is C(True), a TTY is allocated.",
                            "required": false,
                            "type": "bool"
                        },
                        "readonlyRootFilesystem": {
                            "description": "When this parameter is C(True), the container is given read-only access to its root file system.",
                            "required": false,
                            "type": "bool"
                        },
                        "repositoryCredentials": {
                            "description": "The private repository authentication credentials to use.",
                            "required": false,
                            "suboptions": {
                                "credentialsParameter": {
                                    "description": [
                                        "The Amazon Resource Name (ARN) of the secret containing the private repository credentials."
                                    ],
                                    "required": true,
                                    "type": "str"
                                }
                            },
                            "type": "dict"
                        },
                        "resourceRequirements": {
                            "description": [
                                "The type and amount of a resource to assign to a container.",
                                "The only supported resource is a C(GPU)."
                            ],
                            "required": false,
                            "type": "list"
                        },
                        "secretOptions": {
                            "description": "The secrets to pass to the log configuration.",
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "name": {
                                    "description": "The name of the secret.",
                                    "required": false,
                                    "type": "str"
                                },
                                "valueFrom": {
                                    "description": "The secret to expose to the container.",
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "secrets": {
                            "description": "The secrets to pass to the container.",
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "name": {
                                    "description": "The value to set as the environment variable on the container.",
                                    "required": true,
                                    "type": "str"
                                },
                                "size": {
                                    "description": "The secret to expose to the container.",
                                    "required": true,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "startTimeout": {
                            "description": "Time duration (in seconds) to wait before giving up on resolving dependencies for a container.",
                            "required": false,
                            "type": "int"
                        },
                        "stopTimeout": {
                            "description": "Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.",
                            "required": false,
                            "type": "int"
                        },
                        "systemControls": {
                            "description": "A list of namespaced kernel parameters to set in the container.",
                            "required": false,
                            "type": "list"
                        },
                        "ulimits": {
                            "description": [
                                "A list of ulimits to set in the container.",
                                "This parameter is not supported for Windows containers."
                            ],
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "hardLimit": {
                                    "description": "The hard limit for the ulimit type.",
                                    "required": false,
                                    "type": "int"
                                },
                                "name": {
                                    "description": "The type of the ulimit.",
                                    "required": false,
                                    "type": "str"
                                },
                                "softLimit": {
                                    "description": "The soft limit for the ulimit type.",
                                    "required": false,
                                    "type": "int"
                                }
                            },
                            "type": "list"
                        },
                        "user": {
                            "description": [
                                "The user to use inside the container.",
                                "This parameter is not supported for Windows containers."
                            ],
                            "required": false,
                            "type": "str"
                        },
                        "volumesFrom": {
                            "description": "Data volumes to mount from another container.",
                            "elements": "dict",
                            "required": false,
                            "suboptions": {
                                "readOnly": {
                                    "default": false,
                                    "description": [
                                        "If this value is C(True), the container has read-only access to the volume.",
                                        "If this value is C(False), then the container can write to the volume."
                                    ],
                                    "required": false,
                                    "type": "bool"
                                },
                                "sourceContainer": {
                                    "description": [
                                        "The name of another container within the same task definition from which to mount volumes."
                                    ],
                                    "required": false,
                                    "type": "str"
                                }
                            },
                            "type": "list"
                        },
                        "workingDirectory": {
                            "description": "The working directory in which to run commands inside the container.",
                            "required": false,
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "cpu": {
                    "description": [
                        "The number of cpu units used by the task. If I(launch_type=EC2), this field is optional and any value can be used.",
                        "If I(launch_type=FARGATE), this field is required and you must use one of C(256), C(512), C(1024), C(2048), C(4096)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "execution_role_arn": {
                    "description": [
                        "The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume."
                    ],
                    "required": false,
                    "type": "str"
                },
                "family": {
                    "description": [
                        "A Name that would be given to the task definition."
                    ],
                    "required": false,
                    "type": "str"
                },
                "force_create": {
                    "default": false,
                    "description": [
                        "Always create new task definition."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "launch_type": {
                    "choices": [
                        "EC2",
                        "FARGATE"
                    ],
                    "description": [
                        "The launch type on which to run your task."
                    ],
                    "required": false,
                    "type": "str"
                },
                "memory": {
                    "description": [
                        "The amount (in MiB) of memory used by the task. If I(launch_type=EC2), this field is optional and any value can be used.",
                        "If I(launch_type=FARGATE), this field is required and is limited by the CPU."
                    ],
                    "required": false,
                    "type": "str"
                },
                "network_mode": {
                    "choices": [
                        "default",
                        "bridge",
                        "host",
                        "none",
                        "awsvpc"
                    ],
                    "default": "bridge",
                    "description": [
                        "The Docker networking mode to use for the containers in the task.",
                        "C(awsvpc) mode was added in Ansible 2.5",
                        "Windows containers must use I(network_mode=default), which will utilize docker NAT networking.",
                        "Setting I(network_mode=default) for a Linux container will use C(bridge) mode."
                    ],
                    "required": false,
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "revision": {
                    "description": [
                        "A revision number for the task definition."
                    ],
                    "required": false,
                    "type": "int"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": [
                        "State whether the task definition should exist or be deleted."
                    ],
                    "required": true,
                    "type": "str"
                },
                "task_role_arn": {
                    "description": [
                        "The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
                    ],
                    "required": false,
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "volumes": {
                    "description": [
                        "A list of names of volumes to be attached."
                    ],
                    "elements": "dict",
                    "required": false,
                    "suboptions": {
                        "name": {
                            "description": "The name of the volume.",
                            "required": true,
                            "type": "str"
                        }
                    },
                    "type": "list"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "json",
                "python >= 2.6"
            ],
            "short_description": "register a task definition in ecs",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n- name: Create task definition\n  community.aws.ecs_taskdefinition:\n    containers:\n    - name: simple-app\n      cpu: 10\n      essential: true\n      image: \"httpd:2.4\"\n      memory: 300\n      mountPoints:\n      - containerPath: /usr/local/apache2/htdocs\n        sourceVolume: my-vol\n      portMappings:\n      - containerPort: 80\n        hostPort: 80\n      logConfiguration:\n        logDriver: awslogs\n        options:\n          awslogs-group: /ecs/test-cluster-taskdef\n          awslogs-region: us-west-2\n          awslogs-stream-prefix: ecs\n    - name: busybox\n      command:\n        - >\n          /bin/sh -c \"while true; do echo '<html><head><title>Amazon ECS Sample App</title></head><body><div><h1>Amazon ECS Sample App</h1><h2>Congratulations!\n          </h2><p>Your application is now running on a container in Amazon ECS.</p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom;\n          cat top date bottom > /usr/local/apache2/htdocs/index.html ; sleep 1; done\"\n      cpu: 10\n      entryPoint:\n      - sh\n      - \"-c\"\n      essential: false\n      image: busybox\n      memory: 200\n      volumesFrom:\n      - sourceContainer: simple-app\n    volumes:\n    - name: my-vol\n    family: test-cluster-taskdef\n    state: present\n  register: task_output\n\n- name: Create task definition\n  community.aws.ecs_taskdefinition:\n    family: nginx\n    containers:\n    - name: nginx\n      essential: true\n      image: \"nginx\"\n      portMappings:\n      - containerPort: 8080\n        hostPort: 8080\n      cpu: 512\n      memory: 1024\n    state: present\n\n- name: Create task definition\n  community.aws.ecs_taskdefinition:\n    family: nginx\n    containers:\n    - name: nginx\n      essential: true\n      image: \"nginx\"\n      portMappings:\n      - containerPort: 8080\n        hostPort: 8080\n    launch_type: FARGATE\n    cpu: 512\n    memory: 1024\n    state: present\n    network_mode: awsvpc\n\n- name: Create task definition\n  community.aws.ecs_taskdefinition:\n    family: nginx\n    containers:\n    - name: nginx\n      essential: true\n      image: \"nginx\"\n      portMappings:\n      - containerPort: 8080\n        hostPort: 8080\n      cpu: 512\n      memory: 1024\n      dependsOn:\n      - containerName: \"simple-app\"\n        condition: \"start\"\n\n# Create Task Definition with Environment Variables and Secrets\n- name: Create task definition\n  community.aws.ecs_taskdefinition:\n    family: nginx\n    containers:\n    - name: nginx\n      essential: true\n      image: \"nginx\"\n      environment:\n        - name: \"PORT\"\n          value: \"8080\"\n      secrets:\n        # For variables stored in Secrets Manager\n        - name: \"NGINX_HOST\"\n          valueFrom: \"arn:aws:secretsmanager:us-west-2:123456789012:secret:nginx/NGINX_HOST\"\n        # For variables stored in Parameter Store\n        - name: \"API_KEY\"\n          valueFrom: \"arn:aws:ssm:us-west-2:123456789012:parameter/nginx/API_KEY\"\n    launch_type: FARGATE\n    cpu: 512\n    memory: 1GB\n    state: present\n    network_mode: awsvpc\n",
        "metadata": null,
        "return": {
            "taskdefinition": {
                "description": "a reflection of the input parameters",
                "returned": "always",
                "type": "dict"
            }
        }
    }
}
