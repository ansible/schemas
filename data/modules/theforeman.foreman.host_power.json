{
    "theforeman.foreman.host_power": {
        "doc": {
            "author": [
                "Bernhard Hopfenmueller (@Fobhep) ATIX AG",
                "Baptiste Agasse (@bagasse)"
            ],
            "collection": "theforeman.foreman",
            "description": [
                "Manage power state of a host",
                "This beta version can start and stop an existing foreman host and question the current power state."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/theforeman/foreman/plugins/modules/host_power.py",
            "has_action": false,
            "module": "host_power",
            "options": {
                "name": {
                    "aliases": [
                        "hostname"
                    ],
                    "description": "Name (FQDN) of the host",
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Password of the user accessing the Foreman server.",
                        "If the value is not specified in the task, the value of environment variable C(FOREMAN_PASSWORD) will be used instead."
                    ],
                    "required": true,
                    "type": "str"
                },
                "server_url": {
                    "description": [
                        "URL of the Foreman server.",
                        "If the value is not specified in the task, the value of environment variable C(FOREMAN_SERVER_URL) will be used instead."
                    ],
                    "required": true,
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "on",
                        "start",
                        "off",
                        "stop",
                        "soft",
                        "reboot",
                        "cycle",
                        "reset",
                        "state",
                        "status"
                    ],
                    "default": "state",
                    "description": "Desired power state",
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Username accessing the Foreman server.",
                        "If the value is not specified in the task, the value of environment variable C(FOREMAN_USERNAME) will be used instead."
                    ],
                    "required": true,
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Whether or not to verify the TLS certificates of the Foreman server.",
                        "If the value is not specified in the task, the value of environment variable C(FOREMAN_VALIDATE_CERTS) will be used instead."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "requests"
            ],
            "short_description": "Manage Power State of Hosts",
            "version_added": "1.0.0",
            "version_added_collection": "theforeman.foreman"
        },
        "examples": "\n- name: \"Switch a host on\"\n  theforeman.foreman.host_power:\n    username: \"admin\"\n    password: \"changeme\"\n    server_url: \"https://foreman.example.com\"\n    hostname: \"test-host.domain.test\"\n    state: on\n\n- name: \"Switch a host off\"\n  theforeman.foreman.host_power:\n    username: \"admin\"\n    password: \"changeme\"\n    server_url: \"https://foreman.example.com\"\n    hostname: \"test-host.domain.test\"\n    state: off\n\n- name: \"Query host power state\"\n  theforeman.foreman.host_power:\n    username: \"admin\"\n    password: \"changeme\"\n    server_url: \"https://foreman.example.com\"\n    hostname: \"test-host.domain.test\"\n    state: state\n    register: result\n- debug:\n    msg: \"Host power state is {{ result.power_state }}\"\n\n\n",
        "metadata": null,
        "return": {
            "power_state": {
                "description": "current power state of host",
                "returned": "always",
                "sample": "off",
                "type": "str"
            }
        }
    }
}
