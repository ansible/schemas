{
    "community.general.aerospike_migrations": {
        "doc": {
            "author": "Albert Autin (@Alb0t)",
            "collection": "community.general",
            "description": [
                "This can be used to check for migrations in a cluster. This makes it easy to do a rolling upgrade/update on Aerospike nodes.",
                "If waiting for migrations is not desired, simply just poll until port 3000 if available or asinfo -v status returns ok"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/aerospike_migrations.py",
            "has_action": false,
            "module": "aerospike_migrations",
            "options": {
                "connect_timeout": {
                    "default": 1000,
                    "description": [
                        "How long to try to connect before giving up (milliseconds)"
                    ],
                    "required": false,
                    "type": "int"
                },
                "consecutive_good_checks": {
                    "default": 3,
                    "description": [
                        "How many times should the cluster report \"no migrations\" consecutively before returning OK back to ansible?"
                    ],
                    "required": false,
                    "type": "int"
                },
                "fail_on_cluster_change": {
                    "default": true,
                    "description": [
                        "Fail if the cluster key changes if something else is changing the cluster, we may want to fail"
                    ],
                    "required": false,
                    "type": "bool"
                },
                "host": {
                    "default": "localhost",
                    "description": [
                        "Which host do we use as seed for info connection"
                    ],
                    "required": false,
                    "type": "str"
                },
                "local_only": {
                    "description": [
                        "Do you wish to only check for migrations on the local node before returning, or do you want all nodes in the cluster to finish before returning?"
                    ],
                    "required": true,
                    "type": "bool"
                },
                "migrate_rx_key": {
                    "default": "migrate_rx_partitions_remaining",
                    "description": [
                        "The metric key used to determine if we have rx migrations remaining. Changeable due to backwards compatibility."
                    ],
                    "required": false,
                    "type": "str"
                },
                "migrate_tx_key": {
                    "default": "migrate_tx_partitions_remaining",
                    "description": [
                        "The metric key used to determine if we have tx migrations remaining. Changeable due to backwards compatibility."
                    ],
                    "required": false,
                    "type": "str"
                },
                "min_cluster_size": {
                    "default": 1,
                    "description": [
                        "Check will return bad until cluster size is met or until tries is exhausted"
                    ],
                    "required": false,
                    "type": "int"
                },
                "port": {
                    "default": 3000,
                    "description": [
                        "Which port to connect to Aerospike on (service port)"
                    ],
                    "required": false,
                    "type": "int"
                },
                "sleep_between_checks": {
                    "default": 60,
                    "description": [
                        "How long to sleep between each check (seconds)."
                    ],
                    "required": false,
                    "type": "int"
                },
                "target_cluster_size": {
                    "description": [
                        "When all aerospike builds in the cluster are greater than version 4.3, then the C(cluster-stable) info command will be used. Inside this command, you can optionally specify what the target cluster size is - but it is not necessary. You can still rely on min_cluster_size if you don't want to use this option.",
                        "If this option is specified on a cluster that has at least 1 host <4.3 then it will be ignored until the min version reaches 4.3."
                    ],
                    "required": false,
                    "type": "int"
                },
                "tries_limit": {
                    "default": 300,
                    "description": [
                        "How many times do we poll before giving up and failing?"
                    ],
                    "required": false,
                    "type": "int"
                }
            },
            "short_description": "Check or wait for migrations between nodes"
        },
        "examples": "\n# check for migrations on local node\n- name: Wait for migrations on local node before proceeding\n  community.general.aerospike_migrations:\n    host: \"localhost\"\n    connect_timeout: 2000\n    consecutive_good_checks: 5\n    sleep_between_checks: 15\n    tries_limit: 600\n    local_only: False\n\n# example playbook:\n- name: Upgrade aerospike\n  hosts: all\n  become: true\n  serial: 1\n  tasks:\n    - name: Install dependencies\n      ansible.builtin.apt:\n        name:\n            - python\n            - python-pip\n            - python-setuptools\n        state: latest\n    - name: Setup aerospike\n      ansible.builtin.pip:\n          name: aerospike\n# check for migrations every (sleep_between_checks)\n# If at least (consecutive_good_checks) checks come back OK in a row, then return OK.\n# Will exit if any exception, which can be caused by bad nodes,\n# nodes not returning data, or other reasons.\n# Maximum runtime before giving up in this case will be:\n# Tries Limit * Sleep Between Checks * delay * retries\n    - name: Wait for aerospike migrations\n      community.general.aerospike_migrations:\n          local_only: True\n          sleep_between_checks: 1\n          tries_limit: 5\n          consecutive_good_checks: 3\n          fail_on_cluster_change: true\n          min_cluster_size: 3\n          target_cluster_size: 4\n      register: migrations_check\n      until: migrations_check is succeeded\n      changed_when: false\n      delay: 60\n      retries: 120\n    - name: Another thing\n      ansible.builtin.shell: |\n          echo foo\n    - name: Reboot\n      ansible.builtin.reboot:\n",
        "metadata": null,
        "return": null
    }
}
