{
    "community.general.django_manage": {
        "doc": {
            "author": "Scott Anderson (@tastychutney)",
            "collection": "community.general",
            "description": [
                "Manages a Django application using the C(manage.py) application frontend to C(django-admin). With the C(virtualenv) parameter, all management commands will be executed by the given C(virtualenv) installation."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/django_manage.py",
            "has_action": false,
            "module": "django_manage",
            "notes": [
                "C(virtualenv) (U(http://www.virtualenv.org)) must be installed on the remote host if the virtualenv parameter is specified.",
                "This module will create a virtualenv if the virtualenv parameter is specified and a virtualenv does not already exist at the given location.",
                "This module assumes English error messages for the C(createcachetable) command to detect table existence, unfortunately.",
                "To be able to use the C(migrate) command with django versions < 1.7, you must have C(south) installed and added as an app in your settings.",
                "To be able to use the C(collectstatic) command, you must have enabled staticfiles in your settings.",
                "Your C(manage.py) application must be executable (rwxr-xr-x), and must have a valid shebang, i.e. C(#!/usr/bin/env python), for invoking the appropriate Python interpreter."
            ],
            "options": {
                "apps": {
                    "description": [
                        "A list of space-delimited apps to target. Used by the C(test) command."
                    ],
                    "required": false,
                    "type": "str"
                },
                "cache_table": {
                    "description": [
                        "The name of the table used for database-backed caching. Used by the C(createcachetable) command."
                    ],
                    "required": false,
                    "type": "str"
                },
                "clear": {
                    "default": false,
                    "description": [
                        "Clear the existing files before trying to copy or link the original file.",
                        "Used only with the 'collectstatic' command. The C(--noinput) argument will be added automatically."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "command": {
                    "description": [
                        "The name of the Django management command to run. Built in commands are C(cleanup), C(collectstatic), C(flush), C(loaddata), C(migrate), C(syncdb), C(test), and C(validate).",
                        "Other commands can be entered, but will fail if they're unknown to Django.  Other commands that may prompt for user input should be run with the C(--noinput) flag.",
                        "The module will perform some basic parameter validation (when applicable) to the commands C(cleanup), C(collectstatic), C(createcachetable), C(flush), C(loaddata), C(migrate), C(syncdb), C(test), and C(validate)."
                    ],
                    "required": true,
                    "type": "str"
                },
                "database": {
                    "description": [
                        "The database to target. Used by the C(createcachetable), C(flush), C(loaddata), C(syncdb), and C(migrate) commands."
                    ],
                    "required": false,
                    "type": "str"
                },
                "failfast": {
                    "aliases": [
                        "fail_fast"
                    ],
                    "default": false,
                    "description": [
                        "Fail the command immediately if a test fails. Used by the C(test) command."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "fixtures": {
                    "description": [
                        "A space-delimited list of fixture file names to load in the database. B(Required) by the C(loaddata) command."
                    ],
                    "required": false,
                    "type": "str"
                },
                "link": {
                    "description": [
                        "Will create links to the files instead of copying them, you can only use this parameter with C(collectstatic) command."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "liveserver": {
                    "aliases": [
                        "live_server"
                    ],
                    "description": [
                        "This parameter was implemented a long time ago in a galaxy far way. It probably relates to the django-liveserver package, which is no longer updated.",
                        "Hence, it will be considered DEPRECATED and should be removed in a future release."
                    ],
                    "required": false,
                    "type": "str"
                },
                "merge": {
                    "description": [
                        "Will run out-of-order or missing migrations as they are not rollback migrations, you can only use this parameter with C(migrate) command."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "project_path": {
                    "aliases": [
                        "app_path",
                        "chdir"
                    ],
                    "description": [
                        "The path to the root of the Django application where B(manage.py) lives."
                    ],
                    "required": true,
                    "type": "path"
                },
                "pythonpath": {
                    "aliases": [
                        "python_path"
                    ],
                    "description": [
                        "A directory to add to the Python path. Typically used to include the settings module if it is located external to the application directory."
                    ],
                    "required": false,
                    "type": "path"
                },
                "settings": {
                    "description": [
                        "The Python path to the application's settings module, such as C(myapp.settings)."
                    ],
                    "required": false,
                    "type": "path"
                },
                "skip": {
                    "description": [
                        "Will skip over out-of-order missing migrations, you can only use this parameter with C(migrate) command."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "testrunner": {
                    "aliases": [
                        "test_runner"
                    ],
                    "description": [
                        "From the Django docs: Controls the test runner class that is used to execute tests.",
                        "This parameter is passed as-is to C(manage.py)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "virtualenv": {
                    "aliases": [
                        "virtual_env"
                    ],
                    "description": [
                        "An optional path to a I(virtualenv) installation to use while running the manage application."
                    ],
                    "type": "path"
                }
            },
            "requirements": [
                "virtualenv",
                "django"
            ],
            "short_description": "Manages a Django application."
        },
        "examples": "\n- name: Run cleanup on the application installed in django_dir\n  community.general.django_manage:\n    command: cleanup\n    project_path: \"{{ django_dir }}\"\n\n- name: Load the initial_data fixture into the application\n  community.general.django_manage:\n    command: loaddata\n    project_path: \"{{ django_dir }}\"\n    fixtures: \"{{ initial_data }}\"\n\n- name: Run syncdb on the application\n  community.general.django_manage:\n    command: syncdb\n    project_path: \"{{ django_dir }}\"\n    settings: \"{{ settings_app_name }}\"\n    pythonpath: \"{{ settings_dir }}\"\n    virtualenv: \"{{ virtualenv_dir }}\"\n\n- name: Run the SmokeTest test case from the main app. Useful for testing deploys\n  community.general.django_manage:\n    command: test\n    project_path: \"{{ django_dir }}\"\n    apps: main.SmokeTest\n\n- name: Create an initial superuser\n  community.general.django_manage:\n    command: \"createsuperuser --noinput --username=admin --email=admin@example.com\"\n    project_path: \"{{ django_dir }}\"\n",
        "metadata": null,
        "return": null
    }
}
