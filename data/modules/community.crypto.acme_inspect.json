{
    "community.crypto.acme_inspect": {
        "doc": {
            "author": "Felix Fontein (@felixfontein)",
            "collection": "community.crypto",
            "description": [
                "Allows to send direct requests to an ACME server with the L(ACME protocol,https://tools.ietf.org/html/rfc8555), which is supported by CAs such as L(Let's Encrypt,https://letsencrypt.org/).",
                "This module can be used to debug failed certificate request attempts, for example when M(community.crypto.acme_certificate) fails or encounters a problem which you wish to investigate.",
                "The module can also be used to directly access features of an ACME servers which are not yet supported by the Ansible ACME modules."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/crypto/plugins/modules/acme_inspect.py",
            "has_action": false,
            "module": "acme_inspect",
            "notes": [
                "The I(account_uri) option must be specified for properly authenticated ACME v2 requests (except a C(new-account) request).",
                "Using the C(ansible) tool, M(community.crypto.acme_inspect) can be used to directly execute ACME requests without the need of writing a playbook. For example, the following command retrieves the ACME account with ID 1 from Let's Encrypt (assuming C(/path/to/key) is the correct private account key): C(ansible localhost -m acme_inspect -a \"account_key_src=/path/to/key acme_directory=https://acme-v02.api.letsencrypt.org/directory acme_version=2 account_uri=https://acme-v02.api.letsencrypt.org/acme/acct/1 method=get url=https://acme-v02.api.letsencrypt.org/acme/acct/1\")",
                "If a new enough version of the C(cryptography) library is available (see Requirements for details), it will be used instead of the C(openssl) binary. This can be explicitly disabled or enabled with the C(select_crypto_backend) option. Note that using the C(openssl) binary will be slower and less secure, as private key contents always have to be stored on disk (see C(account_key_content)).",
                "Although the defaults are chosen so that the module can be used with the L(Let's Encrypt,https://letsencrypt.org/) CA, the module can in principle be used with any CA providing an ACME endpoint, such as L(Buypass Go SSL,https://www.buypass.com/ssl/products/acme)."
            ],
            "options": {
                "account_key_content": {
                    "description": [
                        "Content of the ACME account RSA or Elliptic Curve key.",
                        "Mutually exclusive with C(account_key_src).",
                        "Required if C(account_key_src) is not used.",
                        "B(Warning:) the content will be written into a temporary file, which will be deleted by Ansible when the module completes. Since this is an important private key \u2014 it can be used to change the account key, or to revoke your certificates without knowing their private keys \u2014, this might not be acceptable.",
                        "In case C(cryptography) is used, the content is not written into a temporary file. It can still happen that it is written to disk by Ansible in the process of moving the module with its argument to the node where it is executed."
                    ],
                    "type": "str"
                },
                "account_key_passphrase": {
                    "description": [
                        "Phassphrase to use to decode the account key.",
                        "B(Note:) this is not supported by the C(openssl) backend, only by the C(cryptography) backend."
                    ],
                    "type": "str",
                    "version_added": "1.6.0",
                    "version_added_collection": "community.crypto"
                },
                "account_key_src": {
                    "aliases": [
                        "account_key"
                    ],
                    "description": [
                        "Path to a file containing the ACME account RSA or Elliptic Curve key.",
                        "Private keys can be created with the M(community.crypto.openssl_privatekey) or M(community.crypto.openssl_privatekey_pipe) modules. If the requisites (pyOpenSSL or cryptography) are not available, keys can also be created directly with the C(openssl) command line tool: RSA keys can be created with C(openssl genrsa ...). Elliptic curve keys can be created with C(openssl ecparam -genkey ...). Any other tool creating private keys in PEM format can be used as well.",
                        "Mutually exclusive with C(account_key_content).",
                        "Required if C(account_key_content) is not used."
                    ],
                    "type": "path"
                },
                "account_uri": {
                    "description": [
                        "If specified, assumes that the account URI is as given. If the account key does not match this account, or an account with this URI does not exist, the module fails."
                    ],
                    "type": "str"
                },
                "acme_directory": {
                    "description": [
                        "The ACME directory to use. This is the entry point URL to access the ACME CA server API.",
                        "For safety reasons the default is set to the Let's Encrypt staging server (for the ACME v1 protocol). This will create technically correct, but untrusted certificates.",
                        "The default value is C(https://acme-staging.api.letsencrypt.org/directory). Note that in community.crypto 2.0.0, this option B(will be required) and will no longer have a default. Note that the default is the Let's Encrypt staging server for the ACME v1 protocol, which is deprecated and will be disabled in May 2021 (see L(here,https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430/7) for details).",
                        "For Let's Encrypt, all staging endpoints can be found here: U(https://letsencrypt.org/docs/staging-environment/). For Buypass, all endpoints can be found here: U(https://community.buypass.com/t/63d4ay/buypass-go-ssl-endpoints)",
                        "For B(Let's Encrypt), the production directory URL for ACME v2 is U(https://acme-v02.api.letsencrypt.org/directory). (The production directory URL for ACME v1 is U(https://acme-v01.api.letsencrypt.org/directory) and will be disabled in July 2021.)",
                        "For B(Buypass), the production directory URL for ACME v2 and v1 is U(https://api.buypass.com/acme/directory).",
                        "For B(ZeroSSL), the production directory URL for ACME v2 is U(https://acme.zerossl.com/v2/DV90).",
                        "B(Warning:) So far, the ACME modules have only been tested against Let's Encrypt (staging and production), Buypass (staging and production), ZeroSSL (production), and L(Pebble testing server,https://github.com/letsencrypt/Pebble). If you experience problems with another ACME server, please L(create an issue,https://github.com/ansible-collections/community.crypto/issues/new/choose) to help us supporting it. Feedback that an ACME server not mentioned does work is also appreciated."
                    ],
                    "type": "str"
                },
                "acme_version": {
                    "choices": [
                        1,
                        2
                    ],
                    "description": [
                        "The ACME version of the endpoint.",
                        "Must be C(1) for the classic Let's Encrypt and Buypass ACME endpoints, or C(2) for standardized ACME v2 endpoints.",
                        "The default value is C(1). Note that in community.crypto 2.0.0, this option B(will be required) and will no longer have a default.",
                        "Please also note that we will deprecate ACME v1 support eventually."
                    ],
                    "type": "int"
                },
                "content": {
                    "description": [
                        "An encoded JSON object which will be sent as the content if I(method) is C(post).",
                        "Required when I(method) is C(post), and not allowed otherwise."
                    ],
                    "type": "str"
                },
                "fail_on_acme_error": {
                    "default": true,
                    "description": [
                        "If I(method) is C(post) or C(get), make the module fail in case an ACME error is returned."
                    ],
                    "type": "bool"
                },
                "method": {
                    "choices": [
                        "get",
                        "post",
                        "directory-only"
                    ],
                    "default": "get",
                    "description": [
                        "The method to use to access the given URL on the ACME server.",
                        "The value C(post) executes an authenticated POST request. The content must be specified in the I(content) option.",
                        "The value C(get) executes an authenticated POST-as-GET request for ACME v2, and a regular GET request for ACME v1.",
                        "The value C(directory-only) only retrieves the directory, without doing a request."
                    ],
                    "type": "str"
                },
                "select_crypto_backend": {
                    "choices": [
                        "auto",
                        "cryptography",
                        "openssl"
                    ],
                    "default": "auto",
                    "description": [
                        "Determines which crypto backend to use.",
                        "The default choice is C(auto), which tries to use C(cryptography) if available, and falls back to C(openssl).",
                        "If set to C(openssl), will try to use the C(openssl) binary.",
                        "If set to C(cryptography), will try to use the L(cryptography,https://cryptography.io/) library."
                    ],
                    "type": "str"
                },
                "url": {
                    "description": [
                        "The URL to send the request to.",
                        "Must be specified if I(method) is not C(directory-only)."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Whether calls to the ACME directory will validate TLS certificates.",
                        "B(Warning:) Should B(only ever) be set to C(no) for testing purposes, for example when testing against a local Pebble server."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "either openssl or L(cryptography,https://cryptography.io/) >= 1.5"
            ],
            "seealso": [
                {
                    "description": "The specification of the ACME protocol (RFC 8555).",
                    "link": "https://tools.ietf.org/html/rfc8555",
                    "name": "Automatic Certificate Management Environment (ACME)"
                },
                {
                    "description": "The specification of the C(tls-alpn-01) challenge (RFC 8737).",
                    "link": "https://www.rfc-editor.org/rfc/rfc8737.html",
                    "name": "ACME TLS ALPN Challenge Extension"
                }
            ],
            "short_description": "Send direct requests to an ACME server"
        },
        "examples": "\n- name: Get directory\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    method: directory-only\n  register: directory\n\n- name: Create an account\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    url: \"{{ directory.newAccount}}\"\n    method: post\n    content: '{\"termsOfServiceAgreed\":true}'\n  register: account_creation\n  # account_creation.headers.location contains the account URI\n  # if creation was successful\n\n- name: Get account information\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    account_uri: \"{{ account_creation.headers.location }}\"\n    url: \"{{ account_creation.headers.location }}\"\n    method: get\n\n- name: Update account contacts\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    account_uri: \"{{ account_creation.headers.location }}\"\n    url: \"{{ account_creation.headers.location }}\"\n    method: post\n    content: '{{ account_info | to_json }}'\n  vars:\n    account_info:\n      # For valid values, see\n      # https://tools.ietf.org/html/rfc8555#section-7.3\n      contact:\n      - mailto:me@example.com\n\n- name: Create certificate order\n  community.crypto.acme_certificate:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    account_uri: \"{{ account_creation.headers.location }}\"\n    csr: /etc/pki/cert/csr/sample.com.csr\n    fullchain_dest: /etc/httpd/ssl/sample.com-fullchain.crt\n    challenge: http-01\n  register: certificate_request\n\n# Assume something went wrong. certificate_request.order_uri contains\n# the order URI.\n\n- name: Get order information\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    account_uri: \"{{ account_creation.headers.location }}\"\n    url: \"{{ certificate_request.order_uri }}\"\n    method: get\n  register: order\n\n- name: Get first authz for order\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    account_uri: \"{{ account_creation.headers.location }}\"\n    url: \"{{ order.output_json.authorizations[0] }}\"\n    method: get\n  register: authz\n\n- name: Get HTTP-01 challenge for authz\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    account_uri: \"{{ account_creation.headers.location }}\"\n    url: \"{{ authz.output_json.challenges | selectattr('type', 'equalto', 'http-01') }}\"\n    method: get\n  register: http01challenge\n\n- name: Activate HTTP-01 challenge manually\n  community.crypto.acme_inspect:\n    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory\n    acme_version: 2\n    account_key_src: /etc/pki/cert/private/account.key\n    account_uri: \"{{ account_creation.headers.location }}\"\n    url: \"{{ http01challenge.url }}\"\n    method: post\n    content: '{}'\n",
        "metadata": null,
        "return": {
            "directory": {
                "description": "The ACME directory's content",
                "returned": "always",
                "sample": "{\n  \"a85k3x9f91A4\": \"https://community.letsencrypt.org/t/adding-random-entries-to-the-directory/33417\",\n  \"keyChange\": \"https://acme-v02.api.letsencrypt.org/acme/key-change\",\n  \"meta\": {\n      \"caaIdentities\": [\n          \"letsencrypt.org\"\n      ],\n      \"termsOfService\": \"https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf\",\n      \"website\": \"https://letsencrypt.org\"\n  },\n  \"newAccount\": \"https://acme-v02.api.letsencrypt.org/acme/new-acct\",\n  \"newNonce\": \"https://acme-v02.api.letsencrypt.org/acme/new-nonce\",\n  \"newOrder\": \"https://acme-v02.api.letsencrypt.org/acme/new-order\",\n  \"revokeCert\": \"https://acme-v02.api.letsencrypt.org/acme/revoke-cert\"\n}\n",
                "type": "dict"
            },
            "headers": {
                "description": "The request's HTTP headers (with lowercase keys)",
                "returned": "always",
                "sample": "{\n  \"boulder-requester\": \"12345\",\n  \"cache-control\": \"max-age=0, no-cache, no-store\",\n  \"connection\": \"close\",\n  \"content-length\": \"904\",\n  \"content-type\": \"application/json\",\n  \"cookies\": {},\n  \"cookies_string\": \"\",\n  \"date\": \"Wed, 07 Nov 2018 12:34:56 GMT\",\n  \"expires\": \"Wed, 07 Nov 2018 12:44:56 GMT\",\n  \"link\": \"<https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf>;rel=\"terms-of-service\"\",\n  \"msg\": \"OK (904 bytes)\",\n  \"pragma\": \"no-cache\",\n  \"replay-nonce\": \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGH\",\n  \"server\": \"nginx\",\n  \"status\": 200,\n  \"strict-transport-security\": \"max-age=604800\",\n  \"url\": \"https://acme-v02.api.letsencrypt.org/acme/acct/46161\",\n  \"x-frame-options\": \"DENY\"\n}\n",
                "type": "dict"
            },
            "output_json": {
                "description": "The output parsed as JSON",
                "returned": "if output can be parsed as JSON",
                "sample": [
                    {
                        "id": 12345
                    },
                    {
                        "key": [
                            {
                                "kty": "RSA"
                            },
                            "..."
                        ]
                    }
                ],
                "type": "dict"
            },
            "output_text": {
                "description": "The raw text output",
                "returned": "always",
                "sample": "{\n  \"id\": 12345,\n  \"key\": {\n    \"kty\": \"RSA\",\n ...",
                "type": "str"
            }
        }
    }
}
