{
    "community.crypto.openssl_privatekey_pipe": {
        "doc": {
            "author": [
                "Yanis Guenane (@Spredzy)",
                "Felix Fontein (@felixfontein)"
            ],
            "collection": "community.crypto",
            "description": [
                "Keys are generated in PEM format.",
                "Make sure to not write the result of this module into logs or to the console, as it contains private key data! Use the I(no_log) task option to be sure.",
                "Note that this module is implemented as an L(action plugin,https://docs.ansible.com/ansible/latest/plugins/action.html) and will always be executed on the controller.",
                "One can generate L(RSA,https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29), L(DSA,https://en.wikipedia.org/wiki/Digital_Signature_Algorithm), L(ECC,https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) or L(EdDSA,https://en.wikipedia.org/wiki/EdDSA) private keys.",
                "Please note that the module regenerates private keys if they don't match the module's options. In particular, if you provide another passphrase (or specify none), change the keysize, etc., the private key will be regenerated. If you are concerned that this could B(overwrite your private key), consider using the I(backup) option.",
                "The module can use the cryptography Python library, or the pyOpenSSL Python library. By default, it tries to detect which one is available. This can be overridden with the I(select_crypto_backend) option. Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in community.crypto 2.0.0.",
                "This allows to read and write keys to vaults without having to write intermediate versions to disk.",
                "This module allows one to (re)generate OpenSSL private keys without disk access."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/crypto/plugins/modules/openssl_privatekey_pipe.py",
            "has_action": true,
            "module": "openssl_privatekey_pipe",
            "options": {
                "cipher": {
                    "description": [
                        "The cipher to encrypt the private key. (Valid values can be found by running `openssl list -cipher-algorithms` or `openssl list-cipher-algorithms`, depending on your OpenSSL version.)",
                        "When using the C(cryptography) backend, use C(auto)."
                    ],
                    "type": "str"
                },
                "content": {
                    "description": [
                        "The current private key data.",
                        "Needed for idempotency. If not provided, the module will always return a change, and all idempotence-related options are ignored."
                    ],
                    "type": "str"
                },
                "content_base64": {
                    "default": false,
                    "description": [
                        "Set to C(true) if the content is base64 encoded."
                    ],
                    "type": "bool"
                },
                "curve": {
                    "choices": [
                        "secp224r1",
                        "secp256k1",
                        "secp256r1",
                        "secp384r1",
                        "secp521r1",
                        "secp192r1",
                        "brainpoolP256r1",
                        "brainpoolP384r1",
                        "brainpoolP512r1",
                        "sect163k1",
                        "sect163r2",
                        "sect233k1",
                        "sect233r1",
                        "sect283k1",
                        "sect283r1",
                        "sect409k1",
                        "sect409r1",
                        "sect571k1",
                        "sect571r1"
                    ],
                    "description": [
                        "Note that not all curves are supported by all versions of C(cryptography).",
                        "For maximal interoperability, C(secp384r1) or C(secp256r1) should be used.",
                        "We use the curve names as defined in the L(IANA registry for TLS,https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8).",
                        "Please note that all curves except C(secp224r1), C(secp256k1), C(secp256r1), C(secp384r1) and C(secp521r1) are discouraged for new private keys."
                    ],
                    "type": "str"
                },
                "format": {
                    "choices": [
                        "pkcs1",
                        "pkcs8",
                        "raw",
                        "auto",
                        "auto_ignore"
                    ],
                    "default": "auto_ignore",
                    "description": [
                        "Determines which format the private key is written in. By default, PKCS1 (traditional OpenSSL format) is used for all keys which support it. Please note that not every key can be exported in any format.",
                        "The value C(auto) selects a fromat based on the key format. The value C(auto_ignore) does the same, but for existing private key files, it will not force a regenerate when its format is not the automatically selected one for generation.",
                        "Note that if the format for an existing private key mismatches, the key is B(regenerated) by default. To change this behavior, use the I(format_mismatch) option.",
                        "The I(format) option is only supported by the C(cryptography) backend. The C(pyopenssl) backend will fail if a value different from C(auto_ignore) is used."
                    ],
                    "type": "str"
                },
                "format_mismatch": {
                    "choices": [
                        "regenerate",
                        "convert"
                    ],
                    "default": "regenerate",
                    "description": [
                        "Determines behavior of the module if the format of a private key does not match the expected format, but all other parameters are as expected.",
                        "If set to C(regenerate) (default), generates a new private key.",
                        "If set to C(convert), the key will be converted to the new format instead.",
                        "Only supported by the C(cryptography) backend."
                    ],
                    "type": "str"
                },
                "passphrase": {
                    "description": [
                        "The passphrase for the private key."
                    ],
                    "type": "str"
                },
                "regenerate": {
                    "choices": [
                        "never",
                        "fail",
                        "partial_idempotence",
                        "full_idempotence",
                        "always"
                    ],
                    "default": "full_idempotence",
                    "description": [
                        "Allows to configure in which situations the module is allowed to regenerate private keys. The module will always generate a new key if the destination file does not exist.",
                        "By default, the key will be regenerated when it doesn't match the module's options, except when the key cannot be read or the passphrase does not match. Please note that this B(changed) for Ansible 2.10. For Ansible 2.9, the behavior was as if C(full_idempotence) is specified.",
                        "If set to C(never), the module will fail if the key cannot be read or the passphrase isn't matching, and will never regenerate an existing key.",
                        "If set to C(fail), the module will fail if the key does not correspond to the module's options.",
                        "If set to C(partial_idempotence), the key will be regenerated if it does not conform to the module's options. The key is B(not) regenerated if it cannot be read (broken file), the key is protected by an unknown passphrase, or when they key is not protected by a passphrase, but a passphrase is specified.",
                        "If set to C(full_idempotence), the key will be regenerated if it does not conform to the module's options. This is also the case if the key cannot be read (broken file), the key is protected by an unknown passphrase, or when they key is not protected by a passphrase, but a passphrase is specified. Make sure you have a B(backup) when using this option!",
                        "If set to C(always), the module will always regenerate the key. This is equivalent to setting I(force) to C(yes).",
                        "Note that if I(format_mismatch) is set to C(convert) and everything matches except the format, the key will always be converted, except if I(regenerate) is set to C(always)."
                    ],
                    "type": "str"
                },
                "return_current_key": {
                    "default": false,
                    "description": [
                        "Set to C(true) to return the current private key when the module did not generate a new one.",
                        "Note that in case of check mode, when this option is not set to C(true), the module always returns the current key (if it was provided) and Ansible will replace it by C(VALUE_SPECIFIED_IN_NO_LOG_PARAMETER)."
                    ],
                    "type": "bool"
                },
                "select_crypto_backend": {
                    "choices": [
                        "auto",
                        "cryptography",
                        "pyopenssl"
                    ],
                    "default": "auto",
                    "description": [
                        "Determines which crypto backend to use.",
                        "The default choice is C(auto), which tries to use C(cryptography) if available, and falls back to C(pyopenssl).",
                        "If set to C(pyopenssl), will try to use the L(pyOpenSSL,https://pypi.org/project/pyOpenSSL/) library.",
                        "If set to C(cryptography), will try to use the L(cryptography,https://cryptography.io/) library.",
                        "Please note that the C(pyopenssl) backend has been deprecated in Ansible 2.9, and will be removed in community.crypto 2.0.0. From that point on, only the C(cryptography) backend will be available."
                    ],
                    "type": "str"
                },
                "size": {
                    "default": 4096,
                    "description": [
                        "Size (in bits) of the TLS/SSL key to generate."
                    ],
                    "type": "int"
                },
                "type": {
                    "choices": [
                        "DSA",
                        "ECC",
                        "Ed25519",
                        "Ed448",
                        "RSA",
                        "X25519",
                        "X448"
                    ],
                    "default": "RSA",
                    "description": [
                        "The algorithm used to generate the TLS/SSL private key.",
                        "Note that C(ECC), C(X25519), C(X448), C(Ed25519) and C(Ed448) require the C(cryptography) backend. C(X25519) needs cryptography 2.5 or newer, while C(X448), C(Ed25519) and C(Ed448) require cryptography 2.6 or newer. For C(ECC), the minimal cryptography version required depends on the I(curve) option."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "Either cryptography >= 1.2.3 (older versions might work as well)",
                "Or pyOpenSSL"
            ],
            "seealso": [
                {
                    "module": "community.crypto.openssl_privatekey"
                },
                {
                    "module": "community.crypto.openssl_privatekey_info"
                },
                {
                    "module": "community.crypto.x509_certificate"
                },
                {
                    "module": "community.crypto.x509_certificate_pipe"
                },
                {
                    "module": "community.crypto.openssl_csr"
                },
                {
                    "module": "community.crypto.openssl_csr_pipe"
                },
                {
                    "module": "community.crypto.openssl_dhparam"
                },
                {
                    "module": "community.crypto.openssl_pkcs12"
                },
                {
                    "module": "community.crypto.openssl_publickey"
                }
            ],
            "short_description": "Generate OpenSSL private keys without disk access",
            "version_added": "1.3.0",
            "version_added_collection": "community.crypto"
        },
        "examples": "\n- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)\n  community.crypto.openssl_privatekey_pipe:\n    path: /etc/ssl/private/ansible.com.pem\n  register: output\n  no_log: true  # make sure that private key data is not accidentally revealed in logs!\n- name: Show generated key\n  debug:\n    msg: \"{{ output.privatekey }}\"\n  # DO NOT OUTPUT KEY MATERIAL TO CONSOLE OR LOGS IN PRODUCTION!\n\n- block:\n    - name: Update sops-encrypted key with the community.sops collection\n      community.crypto.openssl_privatekey_pipe:\n        content: \"{{ lookup('community.sops.sops', 'private_key.pem.sops') }}\"\n        size: 2048\n      register: output\n      no_log: true  # make sure that private key data is not accidentally revealed in logs!\n\n    - name: Update encrypted key when openssl_privatekey_pipe reported a change\n      community.sops.encrypt_sops:\n        path: private_key.pem.sops\n        content_text: \"{{ output.privatekey }}\"\n      when: output is changed\n  always:\n    - name: Make sure that output (which contains the private key) is overwritten\n      set_fact:\n        output: ''\n",
        "metadata": null,
        "return": {
            "curve": {
                "description": "Elliptic curve used to generate the TLS/SSL private key.",
                "returned": "changed or success, and I(type) is C(ECC)",
                "sample": "secp256r1",
                "type": "str"
            },
            "fingerprint": {
                "description": [
                    "The fingerprint of the public key. Fingerprint will be generated for each C(hashlib.algorithms) available.",
                    "The PyOpenSSL backend requires PyOpenSSL >= 16.0 for meaningful output."
                ],
                "returned": "changed or success",
                "sample": {
                    "md5": "84:75:71:72:8d:04:b5:6c:4d:37:6d:66:83:f5:4c:29",
                    "sha1": "51:cc:7c:68:5d:eb:41:43:88:7e:1a:ae:c7:f8:24:72:ee:71:f6:10",
                    "sha224": "b1:19:a6:6c:14:ac:33:1d:ed:18:50:d3:06:5c:b2:32:91:f1:f1:52:8c:cb:d5:75:e9:f5:9b:46",
                    "sha256": "41:ab:c7:cb:d5:5f:30:60:46:99:ac:d4:00:70:cf:a1:76:4f:24:5d:10:24:57:5d:51:6e:09:97:df:2f:de:c7",
                    "sha384": "85:39:50:4e:de:d9:19:33:40:70:ae:10:ab:59:24:19:51:c3:a2:e4:0b:1c:b1:6e:dd:b3:0c:d9:9e:6a:46:af:da:18:f8:ef:ae:2e:c0:9a:75:2c:9b:b3:0f:3a:5f:3d",
                    "sha512": "fd:ed:5e:39:48:5f:9f:fe:7f:25:06:3f:79:08:cd:ee:a5:e7:b3:3d:13:82:87:1f:84:e1:f5:c7:28:77:53:94:86:56:38:69:f0:d9:35:22:01:1e:a6:60:...:0f:9b"
                },
                "type": "dict"
            },
            "privatekey": {
                "description": [
                    "The generated private key's content.",
                    "Please note that if the result is not changed, the current private key will only be returned if the I(return_current_key) option is set to C(true).",
                    "Will be Base64-encoded if the key is in raw format."
                ],
                "returned": "changed, or I(return_current_key) is C(true)",
                "type": "str"
            },
            "size": {
                "description": "Size (in bits) of the TLS/SSL private key.",
                "returned": "changed or success",
                "sample": 4096,
                "type": "int"
            },
            "type": {
                "description": "Algorithm used to generate the TLS/SSL private key.",
                "returned": "changed or success",
                "sample": "RSA",
                "type": "str"
            }
        }
    }
}
