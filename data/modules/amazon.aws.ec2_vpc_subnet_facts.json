{
    "amazon.aws.ec2_vpc_subnet_facts": {
        "doc": {
            "author": "Rob White (@wimnat)",
            "collection": "amazon.aws",
            "description": [
                "Gather information about ec2 VPC subnets in AWS",
                "This module was called C(ec2_vpc_subnet_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/amazon/aws/plugins/modules/ec2_vpc_subnet_facts.py",
            "has_action": false,
            "module": "ec2_vpc_subnet_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "filters": {
                    "description": [
                        "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html) for possible filters."
                    ],
                    "type": "dict"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "subnet_ids": {
                    "aliases": [
                        "subnet_id"
                    ],
                    "description": [
                        "A list of subnet IDs to gather information for."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "python >= 2.6"
            ],
            "short_description": "Gather information about ec2 VPC subnets in AWS"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Gather information about all VPC subnets\n- ec2_vpc_subnet_info:\n\n# Gather information about a particular VPC subnet using ID\n- ec2_vpc_subnet_info:\n    subnet_ids: subnet-00112233\n\n# Gather information about any VPC subnet with a tag key Name and value Example\n- ec2_vpc_subnet_info:\n    filters:\n      \"tag:Name\": Example\n\n# Gather information about any VPC subnet within VPC with ID vpc-abcdef00\n- ec2_vpc_subnet_info:\n    filters:\n      vpc-id: vpc-abcdef00\n\n# Gather information about a set of VPC subnets, publicA, publicB and publicC within a\n# VPC with ID vpc-abcdef00 and then use the jinja map function to return the\n# subnet_ids as a list.\n\n- ec2_vpc_subnet_info:\n    filters:\n      vpc-id: vpc-abcdef00\n      \"tag:Name\": \"{{ item }}\"\n  loop:\n    - publicA\n    - publicB\n    - publicC\n  register: subnet_info\n\n- set_fact:\n    subnet_ids: \"{{ subnet_info.subnets|map(attribute='id')|list }}\"\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "stableinterface"
            ],
            "supported_by": "core"
        },
        "return": {
            "subnets": {
                "contains": {
                    "assign_ipv6_address_on_creation": {
                        "description": "True/False depending on attribute setting for IPv6 address assignment.",
                        "returned": "always",
                        "type": "bool"
                    },
                    "availability_zone": {
                        "description": "The availability zone where the subnet exists.",
                        "returned": "always",
                        "type": "str"
                    },
                    "available_ip_address_count": {
                        "description": "Count of available IPs in subnet.",
                        "returned": "always",
                        "type": "str"
                    },
                    "cidr_block": {
                        "description": "The IPv4 CIDR block assigned to the subnet.",
                        "returned": "always",
                        "type": "str"
                    },
                    "default_for_az": {
                        "description": "True if this is the default subnet for AZ.",
                        "returned": "always",
                        "type": "bool"
                    },
                    "id": {
                        "description": "The ID of the Subnet (for backwards compatibility).",
                        "returned": "always",
                        "type": "str"
                    },
                    "ipv6_cidr_block_association_set": {
                        "contains": {
                            "association_id": {
                                "description": "The association ID",
                                "returned": "always",
                                "type": "str"
                            },
                            "ipv6_cidr_block": {
                                "description": "The IPv6 CIDR block that is associated with the subnet.",
                                "returned": "always",
                                "type": "str"
                            },
                            "ipv6_cidr_block_state": {
                                "contains": {
                                    "state": {
                                        "description": "The CIDR block association state.",
                                        "returned": "always",
                                        "type": "str"
                                    }
                                },
                                "description": "A hash/dict that contains a single item. The state of the cidr block association.",
                                "returned": "always",
                                "type": "dict"
                            }
                        },
                        "description": "An array of IPv6 cidr block association set information.",
                        "returned": "always",
                        "type": "complex"
                    },
                    "map_public_ip_on_launch": {
                        "description": "True/False depending on attribute setting for public IP mapping.",
                        "returned": "always",
                        "type": "bool"
                    },
                    "state": {
                        "description": "The state of the subnet.",
                        "returned": "always",
                        "type": "str"
                    },
                    "subnet_id": {
                        "description": "The ID of the Subnet.",
                        "returned": "always",
                        "type": "str"
                    },
                    "tags": {
                        "description": "A dict of tags associated with the Subnet.",
                        "returned": "always",
                        "type": "dict"
                    },
                    "vpc_id": {
                        "description": "The ID of the VPC .",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "Returns an array of complex objects as described below.",
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
