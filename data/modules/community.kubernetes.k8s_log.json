{
    "community.kubernetes.k8s_log": {
        "doc": {
            "author": [
                "Fabian von Feilitzsch (@fabianvf)"
            ],
            "collection": "community.kubernetes",
            "description": [
                "Use the OpenShift Python client to perform read operations on K8s log endpoints.",
                "Authenticate using either a config file, certificates, password or token.",
                "Supports check mode.",
                "Analogous to `kubectl logs` or `oc logs`"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/kubernetes/plugins/modules/k8s_log.py",
            "has_action": true,
            "module": "k8s_log",
            "notes": [
                "The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on both platforms. For API version details and additional information visit https://github.com/openshift/openshift-restclient-python",
                "To avoid SSL certificate validation errors when C(validate_certs) is I(True), the full certificate chain for the API server must be provided via C(ca_cert) or in the kubeconfig file."
            ],
            "options": {
                "api_key": {
                    "description": [
                        "Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable."
                    ],
                    "type": "str"
                },
                "api_version": {
                    "aliases": [
                        "api",
                        "version"
                    ],
                    "default": "v1",
                    "description": [
                        "Use to specify the API version.",
                        "Use to create, delete, or discover an object without providing a full resource definition.",
                        "Use in conjunction with I(kind), I(name), and I(namespace) to identify a specific object.",
                        "If I(resource definition) is provided, the I(apiVersion) value from the I(resource_definition) will override this option."
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_ca_cert"
                    ],
                    "description": [
                        "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable."
                    ],
                    "type": "path"
                },
                "client_cert": {
                    "aliases": [
                        "cert_file"
                    ],
                    "description": [
                        "Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "key_file"
                    ],
                    "description": [
                        "Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable."
                    ],
                    "type": "path"
                },
                "container": {
                    "description": [
                        "Use to specify the container within a pod to grab the log from.",
                        "If there is only one container, this will default to that container.",
                        "If there is more than one container, this option is required."
                    ],
                    "required": false,
                    "type": "str"
                },
                "context": {
                    "description": [
                        "The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable."
                    ],
                    "type": "str"
                },
                "host": {
                    "description": [
                        "Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable."
                    ],
                    "type": "str"
                },
                "kind": {
                    "default": "Pod",
                    "description": [
                        "Use to specify an object model.",
                        "Use in conjunction with I(api_version), I(name), and I(namespace) to identify a specific object.",
                        "If using I(label_selectors), cannot be overridden."
                    ],
                    "type": "str"
                },
                "kubeconfig": {
                    "description": [
                        "Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default configuration file from I(~/.kube/config.json). Can also be specified via K8S_AUTH_KUBECONFIG environment variable."
                    ],
                    "type": "path"
                },
                "label_selectors": {
                    "description": [
                        "List of label selectors to use to filter results",
                        "Only one of I(name) or I(label_selectors) may be provided."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "name": {
                    "description": [
                        "Use to specify an object name.",
                        "Use in conjunction with I(api_version), I(kind) and I(namespace) to identify a specific object.",
                        "Only one of I(name) or I(label_selectors) may be provided."
                    ],
                    "type": "str"
                },
                "namespace": {
                    "description": [
                        "Use to specify an object namespace.",
                        "Useful when creating, deleting, or discovering an object without providing a full resource definition.",
                        "Use in conjunction with I(api_version), I(kind), and I(name) to identify a specific object.",
                        "If I(resource definition) is provided, the I(metadata.namespace) value from the I(resource_definition) will override this option."
                    ],
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.",
                        "Please read the description of the C(username) option for a discussion of when this option is applicable."
                    ],
                    "type": "str"
                },
                "persist_config": {
                    "description": [
                        "Whether or not to save the kube config refresh tokens. Can also be specified via K8S_AUTH_PERSIST_CONFIG environment variable.",
                        "When the k8s context is using a user credentials with refresh tokens (like oidc or gke/gcloud auth), the token is refreshed by the k8s python client library but not saved by default. So the old refresh token can expire and the next auth might fail. Setting this flag to true will tell the k8s python client to save the new refresh token to the kube config file.",
                        "Default to false.",
                        "Please note that the current version of the k8s python client library does not support setting this flag to True yet.",
                        "The fix for this k8s python library is here: https://github.com/kubernetes-client/python-base/pull/169"
                    ],
                    "type": "bool"
                },
                "proxy": {
                    "description": [
                        "The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.",
                        "Please note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY)."
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.",
                        "Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the C(k8s_auth) module, as that might do what you need."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "description": [
                        "Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.7",
                "openshift >= 0.6",
                "PyYAML >= 3.11"
            ],
            "short_description": "Fetch logs from Kubernetes resources",
            "version_added": "0.10.0",
            "version_added_collection": "community.kubernetes"
        },
        "examples": "\n- name: Get a log from a Pod\n  community.kubernetes.k8s_log:\n    name: example-1\n    namespace: testing\n  register: log\n\n# This will get the log from the first Pod found matching the selector\n- name: Log a Pod matching a label selector\n  community.kubernetes.k8s_log:\n    namespace: testing\n    label_selectors:\n    - app=example\n  register: log\n\n# This will get the log from a single Pod managed by this Deployment\n- name: Get a log from a Deployment\n  community.kubernetes.k8s_log:\n    api_version: apps/v1\n    kind: Deployment\n    namespace: testing\n    name: example\n  register: log\n\n# This will get the log from a single Pod managed by this DeploymentConfig\n- name: Get a log from a DeploymentConfig\n  community.kubernetes.k8s_log:\n    api_version: apps.openshift.io/v1\n    kind: DeploymentConfig\n    namespace: testing\n    name: example\n  register: log\n",
        "metadata": null,
        "return": {
            "log": {
                "description": [
                    "The text log of the object"
                ],
                "returned": "success",
                "type": "str"
            },
            "log_lines": {
                "description": [
                    "The log of the object, split on newlines"
                ],
                "returned": "success",
                "type": "list"
            }
        }
    }
}
