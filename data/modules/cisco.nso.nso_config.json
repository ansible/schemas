{
    "cisco.nso.nso_config": {
        "doc": {
            "author": "Claes N\u00e4st\u00e9n (@cnasten)",
            "collection": "cisco.nso",
            "description": [
                "This module provides support for managing configuration in Cisco NSO and can also ensure services are in sync."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/nso/plugins/modules/nso_config.py",
            "has_action": false,
            "module": "nso_config",
            "options": {
                "commit_flags": {
                    "description": "A list containing commit flags. See the API documentation for supported commit flags. https://developer.cisco.com/docs/nso/guides/#!life-cycle-operations-how-to-manipulate-existing-services-and-devices/commit-flags-and-device-service-actions\n",
                    "elements": "str",
                    "type": "list"
                },
                "data": {
                    "description": "NSO data in format as | display json converted to YAML. List entries can be annotated with a __state entry. Set to in-sync/deep-in-sync for services to verify service is in sync with the network. Set to absent in list entries to ensure they are deleted if they exist in NSO.\n",
                    "required": true,
                    "type": "dict"
                },
                "password": {
                    "description": "NSO password",
                    "required": true,
                    "type": "str"
                },
                "timeout": {
                    "default": 300,
                    "description": "JSON-RPC request timeout in seconds",
                    "type": "int"
                },
                "url": {
                    "description": "NSO JSON-RPC URL, http://localhost:8080/jsonrpc",
                    "required": true,
                    "type": "str"
                },
                "username": {
                    "description": "NSO username",
                    "required": true,
                    "type": "str"
                },
                "validate_certs": {
                    "default": false,
                    "description": "When set to true, validates the SSL certificate of NSO when using SSL",
                    "required": false,
                    "type": "bool"
                }
            },
            "requirements": [
                "Cisco NSO version 3.4.12 or higher, 4.2.7 or higher, 4.3.8 or higher, 4.4.3 or higher, 4.5 or higher."
            ],
            "seealso": [
                {
                    "description": "Provides a reservable pod with NSO, virtual network topology simulated with Cisco CML and a Linux host running Ansible",
                    "link": "https://blogs.cisco.com/developer/nso-learning-lab-and-sandbox",
                    "name": "Cisco DevNet NSO Sandbox"
                },
                {
                    "description": "Documentation for getting started using NSO",
                    "link": "https://developer.cisco.com/docs/nso/",
                    "name": "NSO Developer Resources on DevNet"
                },
                {
                    "description": "Collaboration community portal for NSO developers",
                    "link": "https://community.cisco.com/t5/nso-developer-hub/ct-p/5672j-dev-nso",
                    "name": "NSO Developer Hub"
                },
                {
                    "description": "Code for NSO on Github",
                    "link": "https://github.com/NSO-developer/",
                    "name": "NSO Developer Github"
                }
            ],
            "short_description": "Manage Cisco NSO configuration and service synchronization."
        },
        "examples": "\n- name: CREATE DEVICE IN NSO\n  cisco.nso.nso_config:\n    url: https://10.10.20.49/jsonrpc\n    username: developer\n    password: C1sco12345\n    data:\n      tailf-ncs:devices:\n        device:\n        - address: 10.10.20.175\n          description: CONFIGURED BY ANSIBLE!\n          name: dist-rtr01\n          authgroup: \"labadmin\"\n          device-type:\n            cli:\n              ned-id: \"cisco-ios-cli-6.44\"\n            port: \"22\"\n            state:\n              admin-state: \"unlocked\"\n\n- name: ADD NEW LOOPBACK\n  cisco.nso.nso_config:\n    url: https://10.10.20.49/jsonrpc\n    username: developer\n    password: C1sco12345\n    data:\n        tailf-ncs:devices:\n        device:\n        - name: dist-rtr01\n          config:\n            tailf-ned-cisco-ios:interface:\n                Loopback:\n                - name: \"1\"\n                  description: Created by Ansible!\n\n- name: CONFIGURE IP ADDRESS ON LOOPBACK\n  cisco.nso.nso_config:\n    url: https://10.10.20.49/jsonrpc\n    username: developer\n    password: C1sco12345\n    data:\n      tailf-ncs:devices:\n        device:\n        - name: dist-rtr01\n          config:\n            tailf-ned-cisco-ios:interface:\n              Loopback:\n              - name: \"1\"\n                description: Created by Ansible!\n                ip:\n                  address:\n                    primary:\n                      address: 10.10.10.10\n                      mask: 255.255.255.255\n\n- name: CONFIGURE NTP SERVER ON DEVICE\n  cisco.nso.nso_config:\n    url: https://10.10.20.49/jsonrpc\n    username: developer\n    password: C1sco12345\n    data:\n      tailf-ncs:devices:\n        device:\n        - name: dist-rtr01\n          config:\n            tailf-ned-cisco-ios:ntp:\n              server:\n                peer-list:\n                  - name: 2.2.2.2\n",
        "metadata": null,
        "return": {
            "changes": {
                "contains": {
                    "from": {
                        "description": "Previous value if any, else null",
                        "returned": "When previous value is present on value change",
                        "type": "str"
                    },
                    "path": {
                        "description": "Path to value changed",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "List of changes",
                "returned": "always",
                "sample": [
                    {
                        "from": null,
                        "path": "/ncs:devices/device{dist-rtr01}/config/ios:interface/Loopback{1}/ip/address/primary/address",
                        "to": "10.10.10.10",
                        "type": "set"
                    }
                ],
                "type": "complex"
            },
            "commit_result": {
                "contains": {
                    "commit_queue": {
                        "description": "Commit queue ID and status, if any",
                        "returned": "When commit-queue is set in commit_flags",
                        "type": "dict"
                    }
                },
                "description": "Return values from commit operation",
                "returned": "always",
                "sample": [
                    {
                        "commit_queue": {
                            "id": 1611776004976,
                            "status": "async"
                        }
                    }
                ],
                "type": "complex"
            },
            "diffs": {
                "contains": {
                    "diff": {
                        "description": "configuration difference triggered the re-deploy",
                        "returned": "always",
                        "type": "str"
                    },
                    "path": {
                        "description": "keypath to service changed",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "List of sync changes",
                "returned": "always",
                "type": "complex"
            }
        }
    }
}
