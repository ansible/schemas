{
    "community.aws.ecs_service": {
        "doc": {
            "author": [
                "Mark Chance (@Java1Guy)",
                "Darek Kaczynski (@kaczynskid)",
                "Stephane Maarek (@simplesteph)",
                "Zac Blazic (@zacblazic)"
            ],
            "collection": "community.aws",
            "description": [
                "Creates or terminates ECS. services."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ecs_service.py",
            "has_action": false,
            "module": "ecs_service",
            "notes": [
                "The service role specified must be assumable. (i.e. have a trust relationship for the ecs service, ecs.amazonaws.com)",
                "For details of the parameters and returns see U(https://boto3.readthedocs.io/en/latest/reference/services/ecs.html).",
                "An IAM role must have been previously created.",
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "client_token": {
                    "description": [
                        "Unique, case-sensitive identifier you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed."
                    ],
                    "required": false,
                    "type": "str"
                },
                "cluster": {
                    "description": [
                        "The name of the cluster in which the service exists."
                    ],
                    "required": false,
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "delay": {
                    "default": 10,
                    "description": [
                        "The time to wait before checking that the service is available."
                    ],
                    "required": false,
                    "type": "int"
                },
                "deployment_configuration": {
                    "description": [
                        "Optional parameters that control the deployment_configuration.",
                        "Format is '{\"maximum_percent\":<integer>, \"minimum_healthy_percent\":<integer>}"
                    ],
                    "required": false,
                    "suboptions": {
                        "maximum_percent": {
                            "description": "Upper limit on the number of tasks in a service that are allowed in the RUNNING or PENDING state during a deployment.",
                            "type": "int"
                        },
                        "minimum_healthy_percent": {
                            "description": "A lower limit on the number of tasks in a service that must remain in the RUNNING state during a deployment.",
                            "type": "int"
                        }
                    },
                    "type": "dict"
                },
                "desired_count": {
                    "description": [
                        "The count of how many instances of the service.",
                        "This parameter is required when I(state=present)."
                    ],
                    "required": false,
                    "type": "int"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "force_new_deployment": {
                    "default": false,
                    "description": [
                        "Force deployment of service even if there are no changes."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "health_check_grace_period_seconds": {
                    "description": [
                        "Seconds to wait before health checking the freshly added/updated services.",
                        "This option requires botocore >= 1.8.20."
                    ],
                    "required": false,
                    "type": "int"
                },
                "launch_type": {
                    "choices": [
                        "EC2",
                        "FARGATE"
                    ],
                    "description": [
                        "The launch type on which to run your service."
                    ],
                    "required": false,
                    "type": "str"
                },
                "load_balancers": {
                    "description": [
                        "The list of ELBs defined for this service."
                    ],
                    "elements": "dict",
                    "required": false,
                    "type": "list"
                },
                "name": {
                    "description": [
                        "The name of the service."
                    ],
                    "required": true,
                    "type": "str"
                },
                "network_configuration": {
                    "description": [
                        "Network configuration of the service. Only applicable for task definitions created with I(network_mode=awsvpc).",
                        "I(assign_public_ip) requires botocore >= 1.8.4"
                    ],
                    "suboptions": {
                        "assign_public_ip": {
                            "description": [
                                "Whether the task's elastic network interface receives a public IP address.",
                                "This option requires botocore >= 1.8.4."
                            ],
                            "type": "bool"
                        },
                        "security_groups": {
                            "description": [
                                "A list of security group names or group IDs to associate with the task."
                            ],
                            "elements": "str",
                            "type": "list"
                        },
                        "subnets": {
                            "description": [
                                "A list of subnet IDs to associate with the task."
                            ],
                            "elements": "str",
                            "type": "list"
                        }
                    },
                    "type": "dict"
                },
                "placement_constraints": {
                    "description": [
                        "The placement constraints for the tasks in the service.",
                        "See U(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementConstraint.html) for more details."
                    ],
                    "elements": "dict",
                    "required": false,
                    "suboptions": {
                        "expression": {
                            "description": "A cluster query language expression to apply to the constraint.",
                            "type": "str"
                        },
                        "type": {
                            "description": "The type of constraint.",
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "placement_strategy": {
                    "description": [
                        "The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules per service."
                    ],
                    "elements": "dict",
                    "required": false,
                    "suboptions": {
                        "field": {
                            "description": "The field to apply the placement strategy against.",
                            "type": "str"
                        },
                        "type": {
                            "description": "The type of placement strategy.",
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "platform_version": {
                    "description": [
                        "Numeric part of platform version or LATEST",
                        "See U(https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) for more details."
                    ],
                    "required": false,
                    "type": "str",
                    "version_added": "1.5.0",
                    "version_added_collection": "community.aws"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "repeat": {
                    "default": 10,
                    "description": [
                        "The number of times to check that the service is available."
                    ],
                    "required": false,
                    "type": "int"
                },
                "role": {
                    "description": [
                        "The name or full Amazon Resource Name (ARN) of the IAM role that allows your Amazon ECS container agent to make calls to your load balancer on your behalf.",
                        "This parameter is only required if you are using a load balancer with your service in a network mode other than C(awsvpc)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "scheduling_strategy": {
                    "choices": [
                        "DAEMON",
                        "REPLICA"
                    ],
                    "description": [
                        "The scheduling strategy.",
                        "Defaults to C(REPLICA) if not given to preserve previous behavior."
                    ],
                    "required": false,
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "service_registries": {
                    "description": [
                        "Describes service discovery registries this service will register with."
                    ],
                    "elements": "dict",
                    "required": false,
                    "suboptions": {
                        "arn": {
                            "description": [
                                "Service discovery registry ARN."
                            ],
                            "type": "str"
                        },
                        "container_name": {
                            "description": [
                                "Container name for service discovery registration."
                            ],
                            "type": "str"
                        },
                        "container_port": {
                            "description": [
                                "Container port for service discovery registration."
                            ],
                            "type": "int"
                        }
                    },
                    "type": "list"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent",
                        "deleting"
                    ],
                    "description": [
                        "The desired state of the service."
                    ],
                    "required": true,
                    "type": "str"
                },
                "task_definition": {
                    "description": [
                        "The task definition the service will run.",
                        "This parameter is required when I(state=present)."
                    ],
                    "required": false,
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "json",
                "python >= 2.6"
            ],
            "short_description": "Create, terminate, start or stop a service in ECS",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Basic provisioning example\n- community.aws.ecs_service:\n    state: present\n    name: console-test-service\n    cluster: new_cluster\n    task_definition: 'new_cluster-task:1'\n    desired_count: 0\n\n- name: create ECS service on VPC network\n  community.aws.ecs_service:\n    state: present\n    name: console-test-service\n    cluster: new_cluster\n    task_definition: 'new_cluster-task:1'\n    desired_count: 0\n    network_configuration:\n      subnets:\n      - subnet-abcd1234\n      security_groups:\n      - sg-aaaa1111\n      - my_security_group\n\n# Simple example to delete\n- community.aws.ecs_service:\n    name: default\n    state: absent\n    cluster: new_cluster\n\n# With custom deployment configuration (added in version 2.3), placement constraints and strategy (added in version 2.4)\n- community.aws.ecs_service:\n    state: present\n    name: test-service\n    cluster: test-cluster\n    task_definition: test-task-definition\n    desired_count: 3\n    deployment_configuration:\n      minimum_healthy_percent: 75\n      maximum_percent: 150\n    placement_constraints:\n      - type: memberOf\n        expression: 'attribute:flavor==test'\n    placement_strategy:\n      - type: binpack\n        field: memory\n",
        "metadata": null,
        "return": {
            "ansible_facts": {
                "contains": {
                    "service": {
                        "contains": {
                            "clusterArn": {
                                "description": "The Amazon Resource Name (ARN) of the of the cluster that hosts the service.",
                                "returned": "always",
                                "type": "str"
                            },
                            "deploymentConfiguration": {
                                "contains": {
                                    "maximumPercent": {
                                        "description": "maximumPercent param",
                                        "returned": "always",
                                        "type": "int"
                                    },
                                    "minimumHealthyPercent": {
                                        "description": "minimumHealthyPercent param",
                                        "returned": "always",
                                        "type": "int"
                                    }
                                },
                                "description": "dictionary of deploymentConfiguration",
                                "returned": "always",
                                "type": "complex"
                            },
                            "deployments": {
                                "description": "list of service deployments",
                                "elements": "dict",
                                "returned": "always",
                                "type": "list"
                            },
                            "desiredCount": {
                                "description": "The desired number of instantiations of the task definition to keep running on the service.",
                                "returned": "always",
                                "type": "int"
                            },
                            "events": {
                                "description": "list of service events",
                                "elements": "dict",
                                "returned": "always",
                                "type": "list"
                            },
                            "loadBalancers": {
                                "contains": {
                                    "containerName": {
                                        "description": "The name of the container to associate with the load balancer.",
                                        "returned": "always",
                                        "type": "str"
                                    },
                                    "containerPort": {
                                        "description": "The port on the container to associate with the load balancer.",
                                        "returned": "always",
                                        "type": "int"
                                    },
                                    "loadBalancerName": {
                                        "description": "the name",
                                        "returned": "always",
                                        "type": "str"
                                    }
                                },
                                "description": "A list of load balancer objects",
                                "returned": "always",
                                "type": "complex"
                            },
                            "pendingCount": {
                                "description": "The number of tasks in the cluster that are in the PENDING state.",
                                "returned": "always",
                                "type": "int"
                            },
                            "placementConstraints": {
                                "contains": {
                                    "expression": {
                                        "description": "A cluster query language expression to apply to the constraint. Note you cannot specify an expression if the constraint type is distinctInstance.",
                                        "returned": "always",
                                        "type": "str"
                                    },
                                    "type": {
                                        "description": "The type of constraint. Valid values are distinctInstance and memberOf.",
                                        "returned": "always",
                                        "type": "str"
                                    }
                                },
                                "description": "List of placement constraints objects",
                                "elements": "dict",
                                "returned": "always",
                                "type": "list"
                            },
                            "placementStrategy": {
                                "contains": {
                                    "field": {
                                        "description": "The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are CPU and MEMORY.",
                                        "returned": "always",
                                        "type": "str"
                                    },
                                    "type": {
                                        "description": "The type of placement strategy. Valid values are random, spread and binpack.",
                                        "returned": "always",
                                        "type": "str"
                                    }
                                },
                                "description": "List of placement strategy objects",
                                "elements": "dict",
                                "returned": "always",
                                "type": "list"
                            },
                            "runningCount": {
                                "description": "The number of tasks in the cluster that are in the RUNNING state.",
                                "returned": "always",
                                "type": "int"
                            },
                            "serviceArn": {
                                "description": "The Amazon Resource Name (ARN) that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the region of the service, the AWS account ID of the service owner, the service namespace, and then the service name. For example, arn:aws:ecs:region :012345678910 :service/my-service .",
                                "returned": "always",
                                "type": "str"
                            },
                            "serviceName": {
                                "description": "A user-generated string used to identify the service",
                                "returned": "always",
                                "type": "str"
                            },
                            "status": {
                                "description": "The valid values are ACTIVE, DRAINING, or INACTIVE.",
                                "returned": "always",
                                "type": "str"
                            },
                            "taskDefinition": {
                                "description": "The ARN of a task definition to use for tasks in the service.",
                                "returned": "always",
                                "type": "str"
                            }
                        },
                        "description": "Details of deleted service.",
                        "returned": "when service existed and was deleted",
                        "type": "complex"
                    }
                },
                "description": "Facts about deleted service.",
                "returned": "when deleting a service",
                "type": "complex"
            },
            "service": {
                "contains": {
                    "clusterArn": {
                        "description": "The Amazon Resource Name (ARN) of the of the cluster that hosts the service.",
                        "returned": "always",
                        "type": "str"
                    },
                    "deploymentConfiguration": {
                        "contains": {
                            "maximumPercent": {
                                "description": "maximumPercent param",
                                "returned": "always",
                                "type": "int"
                            },
                            "minimumHealthyPercent": {
                                "description": "minimumHealthyPercent param",
                                "returned": "always",
                                "type": "int"
                            }
                        },
                        "description": "dictionary of deploymentConfiguration",
                        "returned": "always",
                        "type": "complex"
                    },
                    "deployments": {
                        "description": "list of service deployments",
                        "elements": "dict",
                        "returned": "always",
                        "type": "list"
                    },
                    "desiredCount": {
                        "description": "The desired number of instantiations of the task definition to keep running on the service.",
                        "returned": "always",
                        "type": "int"
                    },
                    "events": {
                        "description": "list of service events",
                        "elements": "dict",
                        "returned": "always",
                        "type": "list"
                    },
                    "loadBalancers": {
                        "contains": {
                            "containerName": {
                                "description": "The name of the container to associate with the load balancer.",
                                "returned": "always",
                                "type": "str"
                            },
                            "containerPort": {
                                "description": "The port on the container to associate with the load balancer.",
                                "returned": "always",
                                "type": "int"
                            },
                            "loadBalancerName": {
                                "description": "the name",
                                "returned": "always",
                                "type": "str"
                            }
                        },
                        "description": "A list of load balancer objects",
                        "returned": "always",
                        "type": "complex"
                    },
                    "pendingCount": {
                        "description": "The number of tasks in the cluster that are in the PENDING state.",
                        "returned": "always",
                        "type": "int"
                    },
                    "placementConstraints": {
                        "contains": {
                            "expression": {
                                "description": "A cluster query language expression to apply to the constraint. Note you cannot specify an expression if the constraint type is distinctInstance.",
                                "returned": "always",
                                "type": "str"
                            },
                            "type": {
                                "description": "The type of constraint. Valid values are distinctInstance and memberOf.",
                                "returned": "always",
                                "type": "str"
                            }
                        },
                        "description": "List of placement constraints objects",
                        "elements": "dict",
                        "returned": "always",
                        "type": "list"
                    },
                    "placementStrategy": {
                        "contains": {
                            "field": {
                                "description": "The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are CPU and MEMORY.",
                                "returned": "always",
                                "type": "str"
                            },
                            "type": {
                                "description": "The type of placement strategy. Valid values are random, spread and binpack.",
                                "returned": "always",
                                "type": "str"
                            }
                        },
                        "description": "List of placement strategy objects",
                        "elements": "dict",
                        "returned": "always",
                        "type": "list"
                    },
                    "runningCount": {
                        "description": "The number of tasks in the cluster that are in the RUNNING state.",
                        "returned": "always",
                        "type": "int"
                    },
                    "serviceArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the region of the service, the AWS account ID of the service owner, the service namespace, and then the service name. For example, arn:aws:ecs:region :012345678910 :service/my-service .",
                        "returned": "always",
                        "type": "str"
                    },
                    "serviceName": {
                        "description": "A user-generated string used to identify the service",
                        "returned": "always",
                        "type": "str"
                    },
                    "status": {
                        "description": "The valid values are ACTIVE, DRAINING, or INACTIVE.",
                        "returned": "always",
                        "type": "str"
                    },
                    "taskDefinition": {
                        "description": "The ARN of a task definition to use for tasks in the service.",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "Details of created service.",
                "returned": "when creating a service",
                "type": "complex"
            }
        }
    }
}
