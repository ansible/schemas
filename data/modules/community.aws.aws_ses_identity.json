{
    "community.aws.aws_ses_identity": {
        "doc": {
            "author": "Ed Costello    (@orthanc)",
            "collection": "community.aws",
            "description": [
                "This module allows the user to manage verified email and domain identity for SES.",
                "This covers verifying and removing identities as well as setting up complaint, bounce and delivery notification settings."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/aws_ses_identity.py",
            "has_action": false,
            "module": "aws_ses_identity",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "bounce_notifications": {
                    "description": [
                        "Setup the SNS topic used to report bounce notifications.",
                        "If omitted, bounce notifications will not be delivered to a SNS topic.",
                        "If bounce notifications are not delivered to a SNS topic, I(feedback_forwarding) must be enabled."
                    ],
                    "suboptions": {
                        "include_headers": {
                            "default": false,
                            "description": [
                                "Whether or not to include headers when delivering to the SNS topic.",
                                "If I(topic) is not specified this will have no impact, but the SES setting is updated even if there is no topic."
                            ],
                            "type": "bool"
                        },
                        "topic": {
                            "description": [
                                "The ARN of the topic to send notifications to.",
                                "If omitted, notifications will not be delivered to a SNS topic."
                            ]
                        }
                    },
                    "type": "dict"
                },
                "complaint_notifications": {
                    "description": [
                        "Setup the SNS topic used to report complaint notifications.",
                        "If omitted, complaint notifications will not be delivered to a SNS topic.",
                        "If complaint notifications are not delivered to a SNS topic, I(feedback_forwarding) must be enabled."
                    ],
                    "suboptions": {
                        "include_headers": {
                            "default": false,
                            "description": [
                                "Whether or not to include headers when delivering to the SNS topic.",
                                "If I(topic) is not specified this will have no impact, but the SES setting is updated even if there is no topic."
                            ],
                            "type": "bool"
                        },
                        "topic": {
                            "description": [
                                "The ARN of the topic to send notifications to.",
                                "If omitted, notifications will not be delivered to a SNS topic."
                            ]
                        }
                    },
                    "type": "dict"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "delivery_notifications": {
                    "description": [
                        "Setup the SNS topic used to report delivery notifications.",
                        "If omitted, delivery notifications will not be delivered to a SNS topic."
                    ],
                    "suboptions": {
                        "include_headers": {
                            "default": false,
                            "description": [
                                "Whether or not to include headers when delivering to the SNS topic.",
                                "If I(topic) is not specified this will have no impact, but the SES setting is updated even if there is no topic."
                            ],
                            "type": "bool"
                        },
                        "topic": {
                            "description": [
                                "The ARN of the topic to send notifications to.",
                                "If omitted, notifications will not be delivered to a SNS topic."
                            ]
                        }
                    },
                    "type": "dict"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "feedback_forwarding": {
                    "default": true,
                    "description": [
                        "Whether or not to enable feedback forwarding.",
                        "This can only be false if both I(bounce_notifications) and I(complaint_notifications) specify SNS topics."
                    ],
                    "type": "bool"
                },
                "identity": {
                    "description": [
                        "This is the email address or domain to verify / delete.",
                        "If this contains an '@' then it will be considered an email. Otherwise it will be considered a domain."
                    ],
                    "required": true,
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": "Whether to create(or update) or delete the identity.",
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "python >= 2.6"
            ],
            "short_description": "Manages SES email and domain identity",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n- name: Ensure example@example.com email identity exists\n  community.aws.aws_ses_identity:\n    identity: example@example.com\n    state: present\n\n- name: Delete example@example.com email identity\n  community.aws.aws_ses_identity:\n    email: example@example.com\n    state: absent\n\n- name: Ensure example.com domain identity exists\n  community.aws.aws_ses_identity:\n    identity: example.com\n    state: present\n\n# Create an SNS topic and send bounce and complaint notifications to it\n# instead of emailing the identity owner\n- name: Ensure complaints-topic exists\n  community.aws.sns_topic:\n    name: \"complaints-topic\"\n    state: present\n    purge_subscriptions: False\n  register: topic_info\n\n- name: Deliver feedback to topic instead of owner email\n  community.aws.aws_ses_identity:\n    identity: example@example.com\n    state: present\n    complaint_notifications:\n      topic: \"{{ topic_info.sns_arn }}\"\n      include_headers: True\n    bounce_notifications:\n      topic: \"{{ topic_info.sns_arn }}\"\n      include_headers: False\n    feedback_forwarding: False\n\n# Create an SNS topic for delivery notifications and leave complaints\n# Being forwarded to the identity owner email\n- name: Ensure delivery-notifications-topic exists\n  community.aws.sns_topic:\n    name: \"delivery-notifications-topic\"\n    state: present\n    purge_subscriptions: False\n  register: topic_info\n\n- name: Delivery notifications to topic\n  community.aws.aws_ses_identity:\n    identity: example@example.com\n    state: present\n    delivery_notifications:\n      topic: \"{{ topic_info.sns_arn }}\"\n",
        "metadata": null,
        "return": {
            "identity": {
                "description": "The identity being modified.",
                "returned": "success",
                "sample": "example@example.com",
                "type": "str"
            },
            "identity_arn": {
                "description": "The arn of the identity being modified.",
                "returned": "success",
                "sample": "arn:aws:ses:us-east-1:12345678:identity/example@example.com",
                "type": "str"
            },
            "notification_attributes": {
                "contains": {
                    "bounce_topic": {
                        "description": [
                            "The ARN of the topic bounce notifications are delivered to.",
                            "Omitted if bounce notifications are not delivered to a topic."
                        ],
                        "type": "str"
                    },
                    "complaint_topic": {
                        "description": [
                            "The ARN of the topic complaint notifications are delivered to.",
                            "Omitted if complaint notifications are not delivered to a topic."
                        ],
                        "type": "str"
                    },
                    "delivery_topic": {
                        "description": [
                            "The ARN of the topic delivery notifications are delivered to.",
                            "Omitted if delivery notifications are not delivered to a topic."
                        ],
                        "type": "str"
                    },
                    "forwarding_enabled": {
                        "description": "Whether or not feedback forwarding is enabled.",
                        "type": "bool"
                    },
                    "headers_in_bounce_notifications_enabled": {
                        "description": "Whether or not headers are included in messages delivered to the bounce topic.",
                        "type": "bool"
                    },
                    "headers_in_complaint_notifications_enabled": {
                        "description": "Whether or not headers are included in messages delivered to the complaint topic.",
                        "type": "bool"
                    },
                    "headers_in_delivery_notifications_enabled": {
                        "description": "Whether or not headers are included in messages delivered to the delivery topic.",
                        "type": "bool"
                    }
                },
                "description": "The notification setup for the identity.",
                "returned": "success",
                "sample": {
                    "bounce_topic": "arn:aws:sns:....",
                    "complaint_topic": "arn:aws:sns:....",
                    "delivery_topic": "arn:aws:sns:....",
                    "forwarding_enabled": false,
                    "headers_in_bounce_notifications_enabled": true,
                    "headers_in_complaint_notifications_enabled": true,
                    "headers_in_delivery_notifications_enabled": true
                },
                "type": "complex"
            },
            "verification_attributes": {
                "contains": {
                    "verification_status": {
                        "description": "The verification status of the identity.",
                        "sample": "Pending",
                        "type": "str"
                    },
                    "verification_token": {
                        "description": "The verification token for a domain identity.",
                        "type": "str"
                    }
                },
                "description": "The verification information for the identity.",
                "returned": "success",
                "sample": {
                    "verification_status": "Pending",
                    "verification_token": "...."
                },
                "type": "complex"
            }
        }
    }
}
