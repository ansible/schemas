{
    "community.vmware.vmware_host_acceptance": {
        "doc": {
            "author": [
                "Abhijeet Kasurde (@Akasurde)"
            ],
            "collection": "community.vmware",
            "description": [
                "This module can be used to manage the host acceptance level of an ESXi host.",
                "The host acceptance level controls the acceptance level of each VIB on a ESXi host."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/community/vmware/plugins/modules/vmware_host_acceptance.py",
            "has_action": false,
            "module": "vmware_host_acceptance",
            "notes": [
                "Tested on vSphere 6.5"
            ],
            "options": {
                "acceptance_level": {
                    "choices": [
                        "community",
                        "partner",
                        "vmware_accepted",
                        "vmware_certified"
                    ],
                    "description": [
                        "Name of acceptance level.",
                        "If set to C(partner), then accept only partner and VMware signed and certified VIBs.",
                        "If set to C(vmware_certified), then accept only VIBs that are signed and certified by VMware.",
                        "If set to C(vmware_accepted), then accept VIBs that have been accepted by VMware.",
                        "If set to C(community), then accept all VIBs, even those that are not signed."
                    ],
                    "required": false,
                    "type": "str"
                },
                "cluster_name": {
                    "description": [
                        "Name of the cluster.",
                        "Acceptance level of all ESXi host system in the given cluster will be managed.",
                        "If C(esxi_hostname) is not given, this parameter is required."
                    ],
                    "type": "str"
                },
                "esxi_hostname": {
                    "description": [
                        "ESXi hostname.",
                        "Acceptance level of this ESXi host system will be managed.",
                        "If C(cluster_name) is not given, this parameter is required."
                    ],
                    "type": "str"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "password": {
                    "aliases": [
                        "pass",
                        "pwd"
                    ],
                    "description": [
                        "The password of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "port": {
                    "default": 443,
                    "description": [
                        "The port number of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "int"
                },
                "proxy_host": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them.",
                        "The format is a hostname or a IP.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
                        "This feature depends on a version of pyvmomi greater than v6.7.1.2018.12"
                    ],
                    "required": false,
                    "type": "str"
                },
                "proxy_port": {
                    "description": [
                        "Port of the HTTP proxy that will receive all HTTPS requests and relay them.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead."
                    ],
                    "required": false,
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "list",
                        "present"
                    ],
                    "default": "list",
                    "description": [
                        "Set or list acceptance level of the given ESXi host.",
                        "If set to C(list), then will return current acceptance level of given host system/s.",
                        "If set to C(present), then will set given acceptance level."
                    ],
                    "required": false,
                    "type": "str"
                },
                "username": {
                    "aliases": [
                        "admin",
                        "user"
                    ],
                    "description": [
                        "The username of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
                        "Environment variable support added in Ansible 2.6.",
                        "If set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "PyVmomi"
            ],
            "short_description": "Manage the host acceptance level of an ESXi host"
        },
        "examples": "\n- name: Set acceptance level to community for all ESXi Host in given Cluster\n  community.vmware.vmware_host_acceptance:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n    acceptance_level: 'community'\n    state: present\n  delegate_to: localhost\n  register: cluster_acceptance_level\n\n- name: Set acceptance level to vmware_accepted for the given ESXi Host\n  community.vmware.vmware_host_acceptance:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    acceptance_level: 'vmware_accepted'\n    state: present\n  delegate_to: localhost\n  register: host_acceptance_level\n\n- name: Get acceptance level from the given ESXi Host\n  community.vmware.vmware_host_acceptance:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: list\n  delegate_to: localhost\n  register: host_acceptance_level\n",
        "metadata": null,
        "return": {
            "facts": {
                "description": [
                    "dict with hostname as key and dict with acceptance level facts, error as value"
                ],
                "returned": "facts",
                "sample": {
                    "facts": {
                        "localhost.localdomain": {
                            "error": "NA",
                            "level": "vmware_certified"
                        }
                    }
                },
                "type": "dict"
            }
        }
    }
}
