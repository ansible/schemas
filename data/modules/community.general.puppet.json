{
    "community.general.puppet": {
        "doc": {
            "author": [
                "Monty Taylor (@emonty)"
            ],
            "collection": "community.general",
            "description": [
                "Runs I(puppet) agent or apply in a reliable manner."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/puppet.py",
            "has_action": false,
            "module": "puppet",
            "options": {
                "certname": {
                    "description": [
                        "The name to use when handling certificates."
                    ],
                    "type": "str"
                },
                "debug": {
                    "default": false,
                    "description": [
                        "Enable full debugging."
                    ],
                    "type": "bool"
                },
                "environment": {
                    "description": [
                        "Puppet environment to be used."
                    ],
                    "type": "str"
                },
                "execute": {
                    "description": [
                        "Execute a specific piece of Puppet code.",
                        "It has no effect with a puppetmaster."
                    ],
                    "type": "str"
                },
                "facter_basename": {
                    "default": "ansible",
                    "description": [
                        "Basename of the facter output file."
                    ],
                    "type": "str"
                },
                "facts": {
                    "description": [
                        "A dict of values to pass in as persistent external facter facts."
                    ],
                    "type": "dict"
                },
                "logdest": {
                    "choices": [
                        "all",
                        "stdout",
                        "syslog"
                    ],
                    "default": "stdout",
                    "description": [
                        "Where the puppet logs should go, if puppet apply is being used.",
                        "C(all) will go to both C(console) and C(syslog).",
                        "C(stdout) will be deprecated and replaced by C(console)."
                    ],
                    "type": "str"
                },
                "manifest": {
                    "description": [
                        "Path to the manifest file to run puppet apply on."
                    ],
                    "type": "str"
                },
                "modulepath": {
                    "description": [
                        "Path to an alternate location for puppet modules."
                    ],
                    "type": "str"
                },
                "noop": {
                    "description": [
                        "Override puppet.conf noop mode.",
                        "When C(yes), run Puppet agent with C(--noop) switch set.",
                        "When C(no), run Puppet agent with C(--no-noop) switch set.",
                        "When unset (default), use default or puppet.conf value if defined."
                    ],
                    "type": "bool"
                },
                "puppetmaster": {
                    "description": [
                        "The hostname of the puppetmaster to contact."
                    ],
                    "type": "str"
                },
                "summarize": {
                    "default": false,
                    "description": [
                        "Whether to print a transaction summary."
                    ],
                    "type": "bool"
                },
                "tags": {
                    "description": [
                        "A list of puppet tags to be used."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "timeout": {
                    "default": "30m",
                    "description": [
                        "How long to wait for I(puppet) to finish."
                    ],
                    "type": "str"
                },
                "use_srv_records": {
                    "description": [
                        "Toggles use_srv_records flag"
                    ],
                    "type": "bool"
                },
                "verbose": {
                    "default": false,
                    "description": [
                        "Print extra information."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "puppet"
            ],
            "short_description": "Runs puppet"
        },
        "examples": "\n- name: Run puppet agent and fail if anything goes wrong\n  community.general.puppet:\n\n- name: Run puppet and timeout in 5 minutes\n  community.general.puppet:\n    timeout: 5m\n\n- name: Run puppet using a different environment\n  community.general.puppet:\n    environment: testing\n\n- name: Run puppet using a specific certname\n  community.general.puppet:\n    certname: agent01.example.com\n\n- name: Run puppet using a specific piece of Puppet code. Has no effect with a puppetmaster\n  community.general.puppet:\n    execute: include ::mymodule\n\n- name: Run puppet using a specific tags\n  community.general.puppet:\n    tags:\n    - update\n    - nginx\n\n- name: Run puppet agent in noop mode\n  community.general.puppet:\n    noop: yes\n\n- name: Run a manifest with debug, log to both syslog and console, specify module path\n  community.general.puppet:\n    modulepath: /etc/puppet/modules:/opt/stack/puppet-modules:/usr/share/openstack-puppet/modules\n    logdest: all\n    manifest: /var/lib/example/puppet_step_config.pp\n",
        "metadata": null,
        "return": null
    }
}
