{
    "ansible.utils.cli_parse": {
        "doc": {
            "author": "Bradley Thornton (@cidrblock)",
            "collection": "ansible.utils",
            "description": [
                "Parse cli output or text using a variety of parsers"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ansible/utils/plugins/modules/cli_parse.py",
            "has_action": true,
            "module": "cli_parse",
            "notes": [
                "The default search path for a parser template is templates/{{ short_os }}_{{ command }}.{{ extension }}",
                "=> short_os derived from ansible_network_os or ansible_distribution and set to lower case",
                "=> command is the command passed to the module with spaces replaced with _",
                "=> extension is specific to the parser used (native=yaml, textfsm=textfsm, ttp=ttp)",
                "The default Ansible search path for the templates directory is used for parser templates as well",
                "Some parsers may have additional configuration options available. See the parsers/vars key and the parser's documentation",
                "Some parsers require third-party python libraries be installed on the Ansible control node and a specific python version",
                "example Pyats requires pyats and genie and requires Python 3",
                "example ntc_templates requires ntc_templates",
                "example textfsm requires textfsm",
                "example ttp requires ttp",
                "example xml requires xml_to_dict",
                "Support of 3rd party python libraries is limited to the use of their public APIs as documented",
                "Additional information and examples can be found in the parsing user guide:",
                "https://docs.ansible.com/ansible/latest/network/user_guide/cli_parsing.html"
            ],
            "options": {
                "command": {
                    "description": [
                        "The command to run on the host"
                    ],
                    "type": "str"
                },
                "parser": {
                    "description": [
                        "Parser specific parameters"
                    ],
                    "required": true,
                    "suboptions": {
                        "command": {
                            "description": [
                                "The command used to locate the parser's template"
                            ],
                            "type": "str"
                        },
                        "name": {
                            "description": [
                                "The name of the parser to use"
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "os": {
                            "description": [
                                "Provide an operating system value to the parser",
                                "For `ntc_templates` parser, this should be in the supported `<vendor>_<os>` format."
                            ],
                            "type": "str"
                        },
                        "template_path": {
                            "description": [
                                "Path of the parser template on the Ansible controller",
                                "This can be a relative or an absolute path"
                            ],
                            "type": "str"
                        },
                        "vars": {
                            "description": [
                                "Additional parser specific parameters",
                                "See the cli_parse user guide for examples of parser specific variables",
                                "U(https://docs.ansible.com/ansible/latest/network/user_guide/cli_parsing.html)"
                            ],
                            "type": "dict"
                        }
                    },
                    "type": "dict"
                },
                "set_fact": {
                    "description": [
                        "Set the resulting parsed data as a fact"
                    ],
                    "type": "str"
                },
                "text": {
                    "description": [
                        "Text to be parsed"
                    ],
                    "type": "str"
                }
            },
            "short_description": "Parse cli output or text using a variety of parsers",
            "version_added": "1.0.0",
            "version_added_collection": "ansible.utils"
        },
        "examples": "\n\n# Using the native parser\n\n# -------------\n# templates/nxos_show_interface.yaml\n# - example: Ethernet1/1 is up\n#   getval: '(?P<name>\\S+) is (?P<oper_state>\\S+)'\n#   result:\n#     \"{{ name }}\":\n#         name: \"{{ name }}\"\n#         state:\n#         operating: \"{{ oper_state }}\"\n#   shared: True\n#\n# - example: admin state is up, Dedicated Interface\n#   getval: 'admin state is (?P<admin_state>\\S+)'\n#   result:\n#     \"{{ name }}\":\n#         name: \"{{ name }}\"\n#         state:\n#         admin: \"{{ admin_state }}\"\n#\n# - example: \"  Hardware: Ethernet, address: 0000.5E00.5301 (bia 0000.5E00.5301)\"\n#   getval: '\\s+Hardware: (?P<hardware>.*), address: (?P<mac>\\S+)'\n#   result:\n#     \"{{ name }}\":\n#         hardware: \"{{ hardware }}\"\n#         mac_address: \"{{ mac }}\"\n\n- name: Run command and parse with native\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n      name: ansible.netcommon.native\n    set_fact: interfaces_fact\n\n\n- name: Pass text and template_path\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.netcommon.native\n      template_path: \"{{ role_path }}/templates/nxos_show_interface.yaml\"\n\n\n# Using the ntc_templates parser\n\n# -------------\n# The ntc_templates use 'vendor_platform' for the file name\n# it will be derived from ansible_network_os if not provided\n# example cisco.ios.ios => cisco_ios\n\n- name: Run command and parse with ntc_templates\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n      name: ansible.netcommon.ntc_templates\n  register: parser_output\n\n- name: Pass text and command\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.netcommon.ntc_templates\n      command: show interface\n  register: parser_output\n\n\n# Using the pyats parser\n\n# -------------\n# The pyats parser uses 'os' to locate the appropriate parser\n# it will be derived from ansible_network_os if not provided\n# in the case of pyats: cisco.ios.ios => iosxe\n\n- name: Run command and parse with pyats\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n        name: ansible.netcommon.pyats\n  register: parser_output\n\n- name: Pass text and command\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n        name: ansible.netcommon.pyats\n        command: show interface\n  register: parser_output\n\n- name: Provide an OS to pyats to use an ios parser\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n        name: ansible.netcommon.pyats\n        command: show interface\n        os: ios\n  register: parser_output\n\n\n# Using the textfsm parser\n\n# -------------\n# templates/nxos_show_version.textfsm\n#\n# Value UPTIME ((\\d+\\s\\w+.s.,?\\s?){4})\n# Value LAST_REBOOT_REASON (.+)\n# Value OS (\\d+.\\d+(.+)?)\n# Value BOOT_IMAGE (.*)\n# Value PLATFORM (\\w+)\n#\n# Start\n#   ^\\s+(NXOS: version|system:\\s+version)\\s+${OS}\\s*$$\n#   ^\\s+(NXOS|kickstart)\\s+image\\s+file\\s+is:\\s+${BOOT_IMAGE}\\s*$$\n#   ^\\s+cisco\\s+${PLATFORM}\\s+[cC]hassis\n#   ^\\s+cisco\\s+Nexus\\d+\\s+${PLATFORM}\n#   # Cisco N5K platform\n#   ^\\s+cisco\\s+Nexus\\s+${PLATFORM}\\s+[cC]hassis\n#   ^\\s+cisco\\s+.+-${PLATFORM}\\s*\n#   ^Kernel\\s+uptime\\s+is\\s+${UPTIME}\n#   ^\\s+Reason:\\s${LAST_REBOOT_REASON} -> Record\n\n- name: Run command and parse with textfsm\n  ansible.utils.cli_parse:\n    command: \"show version\"\n    parser:\n      name: ansible.utils.textfsm\n  register: parser_output\n\n- name: Pass text and command\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.utils.textfsm\n      command: show version\n  register: parser_output\n\n# Using the ttp parser\n\n# -------------\n# templates/nxos_show_interface.ttp\n#\n# {{ interface }} is {{ state }}\n# admin state is {{ admin_state }}{{ ignore(\".*\") }}\n\n- name: Run command and parse with ttp\n  ansible.utils.cli_parse:\n    command: \"show interface\"\n    parser:\n      name: ansible.utils.ttp\n    set_fact: new_fact_key\n\n- name: Pass text and template_path\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.utils.ttp\n      template_path: \"{{ role_path }}/templates/nxos_show_interface.ttp\"\n  register: parser_output\n\n# Using the XML parser\n\n# -------------\n- name: Run command and parse with xml\n  ansible.utils.cli_parse:\n    command: \"show interface | xml\"\n    parser:\n      name: ansible.utils.xml\n  register: parser_output\n\n- name: Pass text and parse with xml\n  ansible.utils.cli_parse:\n    text: \"{{ previous_command['stdout'] }}\"\n    parser:\n      name: ansible.utils.xml\n  register: parser_output\n",
        "metadata": null,
        "return": {
            "parsed": {
                "description": "The structured data resulting from the parsing of the text",
                "returned": "always",
                "sample": null,
                "type": "dict"
            },
            "stdout": {
                "description": "The output from the command run",
                "returned": "when provided a command",
                "sample": null,
                "type": "str"
            },
            "stdout_lines": {
                "description": "The output of the command run split into lines",
                "elements": "str",
                "returned": "when provided a command",
                "sample": null,
                "type": "list"
            }
        }
    }
}
