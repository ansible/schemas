{
    "community.general.one_image": {
        "doc": {
            "author": [
                "Milan Ilic (@ilicmilan)"
            ],
            "collection": "community.general",
            "description": [
                "Manages OpenNebula images"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/one_image.py",
            "has_action": false,
            "module": "one_image",
            "options": {
                "api_password": {
                    "description": [
                        "Password of the user to login into OpenNebula RPC server. If not set",
                        "then the value of the C(ONE_PASSWORD) environment variable is used."
                    ],
                    "type": "str"
                },
                "api_url": {
                    "description": [
                        "URL of the OpenNebula RPC server.",
                        "It is recommended to use HTTPS so that the username/password are not",
                        "transferred over the network unencrypted.",
                        "If not set then the value of the C(ONE_URL) environment variable is used."
                    ],
                    "type": "str"
                },
                "api_username": {
                    "description": [
                        "Name of the user to login into the OpenNebula RPC server. If not set",
                        "then the value of the C(ONE_USERNAME) environment variable is used."
                    ],
                    "type": "str"
                },
                "enabled": {
                    "description": [
                        "Whether the image should be enabled or disabled."
                    ],
                    "type": "bool"
                },
                "id": {
                    "description": [
                        "A C(id) of the image you would like to manage."
                    ],
                    "type": "int"
                },
                "name": {
                    "description": [
                        "A C(name) of the image you would like to manage."
                    ],
                    "type": "str"
                },
                "new_name": {
                    "description": [
                        "A name that will be assigned to the existing or new image.",
                        "In the case of cloning, by default C(new_name) will take the name of the origin image with the prefix 'Copy of'."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent",
                        "cloned",
                        "renamed"
                    ],
                    "default": "present",
                    "description": [
                        "C(present) - state that is used to manage the image",
                        "C(absent) - delete the image",
                        "C(cloned) - clone the image",
                        "C(renamed) - rename the image to the C(new_name)"
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "python-oca"
            ],
            "short_description": "Manages OpenNebula images"
        },
        "examples": "\n- name: Fetch the IMAGE by id\n  community.general.one_image:\n    id: 45\n  register: result\n\n- name: Print the IMAGE properties\n  ansible.builtin.debug:\n    msg: result\n\n- name: Rename existing IMAGE\n  community.general.one_image:\n    id: 34\n    state: renamed\n    new_name: bar-image\n\n- name: Disable the IMAGE by id\n  community.general.one_image:\n    id: 37\n    enabled: no\n\n- name: Enable the IMAGE by name\n  community.general.one_image:\n    name: bar-image\n    enabled: yes\n\n- name: Clone the IMAGE by name\n  community.general.one_image:\n    name: bar-image\n    state: cloned\n    new_name: bar-image-clone\n  register: result\n\n- name: Delete the IMAGE by id\n  community.general.one_image:\n    id: '{{ result.id }}'\n    state: absent\n",
        "metadata": null,
        "return": {
            "group_id": {
                "description": "image's group id",
                "returned": "success",
                "sample": 1,
                "type": "int"
            },
            "group_name": {
                "description": "image's group name",
                "returned": "success",
                "sample": "one-users",
                "type": "str"
            },
            "id": {
                "description": "image id",
                "returned": "success",
                "sample": 153,
                "type": "int"
            },
            "name": {
                "description": "image name",
                "returned": "success",
                "sample": "app1",
                "type": "str"
            },
            "owner_id": {
                "description": "image's owner id",
                "returned": "success",
                "sample": 143,
                "type": "int"
            },
            "owner_name": {
                "description": "image's owner name",
                "returned": "success",
                "sample": "ansible-test",
                "type": "str"
            },
            "running_vms": {
                "description": "count of running vms that use this image",
                "returned": "success",
                "sample": 7,
                "type": "int"
            },
            "state": {
                "description": "state of image instance",
                "returned": "success",
                "sample": "READY",
                "type": "str"
            },
            "used": {
                "description": "is image in use",
                "returned": "success",
                "sample": true,
                "type": "bool"
            }
        }
    }
}
