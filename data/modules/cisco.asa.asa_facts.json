{
    "cisco.asa.asa_facts": {
        "doc": {
            "author": [
                "Sumit Jaiswal (@justjais)"
            ],
            "collection": "cisco.asa",
            "description": [
                "Collects a base set of device facts from a remote device that is running ASA.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.",
                "Note, to collects facts from ASA device properly user should elevate the privilege to become."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/asa/plugins/modules/asa_facts.py",
            "has_action": true,
            "module": "asa_facts",
            "notes": [
                "Tested against asa 9.10(1)11",
                "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`"
            ],
            "options": {
                "authorize": {
                    "default": false,
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli) and C(become: yes).",
                        "For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-protocols).",
                        "HORIZONTALLINE",
                        "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead."
                    ],
                    "type": "bool"
                },
                "context": {
                    "description": [
                        "Specifies which context to target if you are running in the ASA in multiple context mode. Defaults to the current context you login to."
                    ],
                    "type": "str"
                },
                "gather_network_resources": {
                    "description": [
                        "When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all and the resources like interfaces, vlans etc. Can specify a list of values to include a larger subset. Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected. Valid subsets are 'all', 'acls', 'ogs'."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "gather_subset": {
                    "default": "!config",
                    "description": [
                        "When supplied, this argument restricts the facts collected to a given subset.",
                        "Possible values for this argument include C(all), C(min), C(hardware), C(config).",
                        "Specify a list of values to include a larger subset.",
                        "Use a value with an initial C(!) to collect all facts except that subset."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "passwords": {
                    "description": [
                        "Specifies which context to target if you are running in the ASA in multiple context mode. Defaults to the current context you login to."
                    ],
                    "type": "bool"
                },
                "provider": {
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli).",
                        "For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-protocols).",
                        "HORIZONTALLINE",
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "auth_pass": {
                            "description": [
                                "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead."
                            ],
                            "type": "str"
                        },
                        "authorize": {
                            "default": false,
                            "description": [
                                "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead."
                            ],
                            "type": "bool"
                        },
                        "host": {
                            "description": [
                                "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport."
                            ],
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead."
                            ],
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Specifies the port to use when building the connection to the remote device."
                            ],
                            "type": "int"
                        },
                        "ssh_keyfile": {
                            "description": [
                                "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead."
                            ],
                            "type": "path"
                        },
                        "timeout": {
                            "description": [
                                "Specifies idle timeout in seconds for the connection, in seconds. Useful if the console freezes before continuing. For example when saving configurations."
                            ],
                            "type": "int"
                        },
                        "username": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                }
            },
            "short_description": "Collect facts from remote devices running Cisco ASA",
            "version_added": "1.0.0",
            "version_added_collection": "cisco.asa"
        },
        "examples": "\n- name: Gather all legacy facts\n  cisco.asa.asa_facts:\n    gather_subset: all\n\n- name: Gather only the config and default facts\n  cisco.asa.asa_facts:\n    gather_subset:\n    - config\n\n- name: Do not gather hardware facts\n  cisco.asa.asa_facts:\n    gather_subset:\n    - '!hardware'\n\n- name: Gather legacy and resource facts\n  cisco.asa.asa_facts:\n    gather_subset: all\n",
        "metadata": null,
        "return": {
            "ansible_net_api": {
                "description": "The name of the transport",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_asatype": {
                "description": "The operating system type (Cisco ASA) running on the remote device.",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_config": {
                "description": "The current active config from the device",
                "returned": "when config is configured",
                "type": "str"
            },
            "ansible_net_device_mgr_version": {
                "description": "The Device manager version running on the remote device.",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_filesystems": {
                "description": "All file system names available on the device",
                "returned": "when hardware is configured",
                "type": "list"
            },
            "ansible_net_filesystems_info": {
                "description": "A hash of all file systems containing info about each file system (e.g. free and total space)",
                "returned": "when hardware is configured",
                "type": "dict"
            },
            "ansible_net_firepower_version": {
                "description": "The Firepower operating system version running on the remote device.",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_gather_subset": {
                "description": "The list of fact subsets collected from the device",
                "returned": "always",
                "type": "list"
            },
            "ansible_net_hostname": {
                "description": "The configured hostname of the device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_image": {
                "description": "The image file the device is running",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_memfree_mb": {
                "description": "The available free memory on the remote device in Mb",
                "returned": "when hardware is configured",
                "type": "int"
            },
            "ansible_net_memtotal_mb": {
                "description": "The total memory on the remote device in Mb",
                "returned": "when hardware is configured",
                "type": "int"
            },
            "ansible_net_memused_mb": {
                "description": "The used memory on the remote device in Mb",
                "returned": "when hardware is configured",
                "type": "int"
            },
            "ansible_net_model": {
                "description": "The model name returned from the device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_python_version": {
                "description": "The Python version Ansible controller is using",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_serialnum": {
                "description": "The serial number of the remote device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_stacked_models": {
                "description": "The model names of each device in the stack",
                "returned": "when multiple devices are configured in a stack",
                "type": "list"
            },
            "ansible_net_stacked_serialnums": {
                "description": "The serial numbers of each device in the stack",
                "returned": "when multiple devices are configured in a stack",
                "type": "list"
            },
            "ansible_net_version": {
                "description": "The operating system version running on the remote device",
                "returned": "always",
                "type": "str"
            }
        }
    }
}
