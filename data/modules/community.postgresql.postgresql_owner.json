{
    "community.postgresql.postgresql_owner": {
        "doc": {
            "author": [
                "Andrew Klychkov (@Andersson007)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Change an owner of PostgreSQL database object.",
                "Also allows to reassign the ownership of database objects owned by a database role to another role."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_owner.py",
            "has_action": false,
            "module": "postgresql_owner",
            "notes": [
                "Supports C(check_mode).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of database to connect to."
                    ],
                    "type": "str"
                },
                "fail_on_role": {
                    "default": true,
                    "description": [
                        "If C(yes), fail when I(reassign_owned_by) role does not exist. Otherwise just warn and continue.",
                        "Mutually exclusive with I(obj_name) and I(obj_type)."
                    ],
                    "type": "bool"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "new_owner": {
                    "description": [
                        "Role (user/group) to set as an I(obj_name) owner."
                    ],
                    "required": true,
                    "type": "str"
                },
                "obj_name": {
                    "description": [
                        "Name of a database object to change ownership.",
                        "Mutually exclusive with I(reassign_owned_by)."
                    ],
                    "type": "str"
                },
                "obj_type": {
                    "aliases": [
                        "type"
                    ],
                    "choices": [
                        "database",
                        "function",
                        "matview",
                        "sequence",
                        "schema",
                        "table",
                        "tablespace",
                        "view"
                    ],
                    "description": [
                        "Type of a database object.",
                        "Mutually exclusive with I(reassign_owned_by)."
                    ],
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "reassign_owned_by": {
                    "description": [
                        "The list of role names. The ownership of all the objects within the current database, and of all shared objects (databases, tablespaces), owned by this role(s) will be reassigned to I(owner).",
                        "Pay attention - it reassigns all objects owned by this role(s) in the I(db)!",
                        "If role(s) exists, always returns changed True.",
                        "Cannot reassign ownership of objects that are required by the database system.",
                        "Mutually exclusive with C(obj_type)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters I(new_owner), I(obj_name), I(reassign_owned_by), I(session_role) are potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections via the parameters are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "module": "community.postgresql.postgresql_user"
                },
                {
                    "module": "community.postgresql.postgresql_privs"
                },
                {
                    "module": "community.postgresql.postgresql_membership"
                },
                {
                    "description": "Complete reference of the PostgreSQL REASSIGN OWNED command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-reassign-owned.html",
                    "name": "PostgreSQL REASSIGN OWNED command reference"
                }
            ],
            "short_description": "Change an owner of PostgreSQL database object"
        },
        "examples": "\n# Set owner as alice for function myfunc in database bar by ansible ad-hoc command:\n# ansible -m postgresql_owner -a \"db=bar new_owner=alice obj_name=myfunc obj_type=function\"\n\n- name: The same as above by playbook\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    obj_name: myfunc\n    obj_type: function\n\n- name: Set owner as bob for table acme in database bar\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: bob\n    obj_name: acme\n    obj_type: table\n\n- name: Set owner as alice for view test_view in database bar\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    obj_name: test_view\n    obj_type: view\n\n- name: Set owner as bob for tablespace ssd in database foo\n  community.postgresql.postgresql_owner:\n    db: foo\n    new_owner: bob\n    obj_name: ssd\n    obj_type: tablespace\n\n- name: Reassign all object in database bar owned by bob to alice\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    reassign_owned_by: bob\n\n- name: Reassign all object in database bar owned by bob and bill to alice\n  community.postgresql.postgresql_owner:\n    db: bar\n    new_owner: alice\n    reassign_owned_by:\n    - bob\n    - bill\n",
        "metadata": null,
        "return": {
            "queries": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "REASSIGN OWNED BY \"bob\" TO \"alice\""
                ],
                "type": "str"
            }
        }
    }
}
