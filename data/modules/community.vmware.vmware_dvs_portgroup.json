{
    "community.vmware.vmware_dvs_portgroup": {
        "doc": {
            "author": [
                "Joseph Callen (@jcpowermac)",
                "Philippe Dellaert (@pdellaert) <philippe@dellaert.org>"
            ],
            "collection": "community.vmware",
            "description": [
                "Create or remove a Distributed vSwitch portgroup."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/community/vmware/plugins/modules/vmware_dvs_portgroup.py",
            "has_action": false,
            "module": "vmware_dvs_portgroup",
            "notes": [
                "Tested on vSphere 5.5",
                "Tested on vSphere 6.5"
            ],
            "options": {
                "hostname": {
                    "description": [
                        "The hostname or IP address of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "network_policy": {
                    "default": {
                        "forged_transmits": false,
                        "mac_changes": false,
                        "promiscuous": false
                    },
                    "description": [
                        "Dictionary which configures the different security values for portgroup.",
                        "Valid attributes are:",
                        "- C(promiscuous) (bool): indicates whether promiscuous mode is allowed. (default: false)",
                        "- C(forged_transmits) (bool): indicates whether forged transmits are allowed. (default: false)",
                        "- C(mac_changes) (bool): indicates whether mac changes are allowed. (default: false)"
                    ],
                    "required": false,
                    "type": "dict"
                },
                "num_ports": {
                    "description": [
                        "The number of ports the portgroup should contain."
                    ],
                    "required": true,
                    "type": "int"
                },
                "password": {
                    "aliases": [
                        "pass",
                        "pwd"
                    ],
                    "description": [
                        "The password of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "port": {
                    "default": 443,
                    "description": [
                        "The port number of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "int"
                },
                "port_policy": {
                    "default": {
                        "block_override": true,
                        "ipfix_override": false,
                        "live_port_move": false,
                        "network_rp_override": false,
                        "port_config_reset_at_disconnect": true,
                        "security_override": false,
                        "shaping_override": false,
                        "traffic_filter_override": false,
                        "uplink_teaming_override": false,
                        "vendor_config_override": false,
                        "vlan_override": false
                    },
                    "description": [
                        "Dictionary which configures the advanced policy settings for the portgroup.",
                        "Valid attributes are:",
                        "- C(block_override) (bool): indicates if the block policy can be changed per port. (default: true)",
                        "- C(ipfix_override) (bool): indicates if the ipfix policy can be changed per port. (default: false)",
                        "- C(live_port_move) (bool): indicates if a live port can be moved in or out of the portgroup. (default: false)",
                        "- C(network_rp_override) (bool): indicates if the network resource pool can be changed per port. (default: false)",
                        "- C(port_config_reset_at_disconnect) (bool): indicates if the configuration of a port is reset automatically after disconnect. (default: true)",
                        "- C(security_override) (bool): indicates if the security policy can be changed per port. (default: false)",
                        "- C(shaping_override) (bool): indicates if the shaping policy can be changed per port. (default: false)",
                        "- C(traffic_filter_override) (bool): indicates if the traffic filter can be changed per port. (default: false)",
                        "- C(uplink_teaming_override) (bool): indicates if the uplink teaming policy can be changed per port. (default: false)",
                        "- C(vendor_config_override) (bool): indicates if the vendor config can be changed per port. (default: false)",
                        "- C(vlan_override) (bool): indicates if the vlan can be changed per port. (default: false)"
                    ],
                    "required": false,
                    "type": "dict"
                },
                "portgroup_name": {
                    "description": [
                        "The name of the portgroup that is to be created or deleted."
                    ],
                    "required": true,
                    "type": "str"
                },
                "portgroup_type": {
                    "choices": [
                        "earlyBinding",
                        "lateBinding",
                        "ephemeral"
                    ],
                    "description": [
                        "See VMware KB 1022312 regarding portgroup types."
                    ],
                    "required": true,
                    "type": "str"
                },
                "proxy_host": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them.",
                        "The format is a hostname or a IP.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
                        "This feature depends on a version of pyvmomi greater than v6.7.1.2018.12"
                    ],
                    "required": false,
                    "type": "str"
                },
                "proxy_port": {
                    "description": [
                        "Port of the HTTP proxy that will receive all HTTPS requests and relay them.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead."
                    ],
                    "required": false,
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": [
                        "Determines if the portgroup should be present or not."
                    ],
                    "required": true,
                    "type": "str"
                },
                "switch_name": {
                    "description": [
                        "The name of the distributed vSwitch the port group should be created on."
                    ],
                    "required": true,
                    "type": "str"
                },
                "teaming_policy": {
                    "default": {
                        "inbound_policy": false,
                        "load_balance_policy": "loadbalance_srcid",
                        "notify_switches": true,
                        "rolling_order": false
                    },
                    "description": [
                        "Dictionary which configures the different teaming values for portgroup.",
                        "Valid attributes are:",
                        "- C(load_balance_policy) (string): Network adapter teaming policy. (default: loadbalance_srcid)",
                        "   - choices: [ loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, loadbalance_loadbased, failover_explicit]",
                        "   - \"loadbalance_loadbased\" is available from version 2.6 and onwards",
                        "- C(inbound_policy) (bool): Indicate whether or not the teaming policy is applied to inbound frames as well. (default: False)",
                        "- C(notify_switches) (bool): Indicate whether or not to notify the physical switch if a link fails. (default: True)",
                        "- C(rolling_order) (bool): Indicate whether or not to use a rolling policy when restoring links. (default: False)"
                    ],
                    "required": false,
                    "type": "dict"
                },
                "username": {
                    "aliases": [
                        "admin",
                        "user"
                    ],
                    "description": [
                        "The username of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
                        "Environment variable support added in Ansible 2.6.",
                        "If set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine."
                    ],
                    "type": "bool"
                },
                "vlan_id": {
                    "description": [
                        "The VLAN ID that should be configured with the portgroup, use 0 for no VLAN.",
                        "If C(vlan_trunk) is configured to be I(true), this can be a combination of multiple ranges and numbers, example: 1-200, 205, 400-4094.",
                        "The valid C(vlan_id) range is from 0 to 4094. Overlapping ranges are allowed."
                    ],
                    "required": true,
                    "type": "str"
                },
                "vlan_trunk": {
                    "default": false,
                    "description": [
                        "Indicates whether this is a VLAN trunk or not."
                    ],
                    "required": false,
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "PyVmomi"
            ],
            "short_description": "Create or remove a Distributed vSwitch portgroup."
        },
        "examples": "\n- name: Create vlan portgroup\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: vlan-123-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 123\n    num_ports: 120\n    portgroup_type: earlyBinding\n    state: present\n  delegate_to: localhost\n\n- name: Create vlan trunk portgroup\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: vlan-trunk-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 1-1000, 1005, 1100-1200\n    vlan_trunk: True\n    num_ports: 120\n    portgroup_type: earlyBinding\n    state: present\n  delegate_to: localhost\n\n- name: Create no-vlan portgroup\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: no-vlan-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 0\n    num_ports: 120\n    portgroup_type: earlyBinding\n    state: present\n  delegate_to: localhost\n\n- name: Create vlan portgroup with all security and port policies\n  community.vmware.vmware_dvs_portgroup:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    portgroup_name: vlan-123-portrgoup\n    switch_name: dvSwitch\n    vlan_id: 123\n    num_ports: 120\n    portgroup_type: earlyBinding\n    state: present\n    network_policy:\n      promiscuous: yes\n      forged_transmits: yes\n      mac_changes: yes\n    port_policy:\n      block_override: yes\n      ipfix_override: yes\n      live_port_move: yes\n      network_rp_override: yes\n      port_config_reset_at_disconnect: yes\n      security_override: yes\n      shaping_override: yes\n      traffic_filter_override: yes\n      uplink_teaming_override: yes\n      vendor_config_override: yes\n      vlan_override: yes\n  delegate_to: localhost\n",
        "metadata": null,
        "return": null
    }
}
