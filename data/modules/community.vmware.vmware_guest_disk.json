{
    "community.vmware.vmware_guest_disk": {
        "doc": {
            "author": [
                "Abhijeet Kasurde (@Akasurde) <akasurde@redhat.com>"
            ],
            "collection": "community.vmware",
            "description": [
                "This module can be used to add, remove and update disks belonging to given virtual machine.",
                "All parameters and VMware object names are case sensitive.",
                "This module is destructive in nature, please read documentation carefully before proceeding.",
                "Be careful while removing disk specified as this may lead to data loss."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/community/vmware/plugins/modules/vmware_guest_disk.py",
            "has_action": false,
            "module": "vmware_guest_disk",
            "notes": [
                "Tested on vSphere 6.0 and 6.5"
            ],
            "options": {
                "datacenter": {
                    "description": [
                        "The datacenter name to which virtual machine belongs to."
                    ],
                    "required": true,
                    "type": "str"
                },
                "disk": {
                    "default": [],
                    "description": [
                        "A list of disks to add.",
                        "The virtual disk related information is provided using this list.",
                        "All values and parameters are case sensitive.",
                        "Valid attributes are:",
                        " - C(size[_tb,_gb,_mb,_kb]) (integer): Disk storage size in specified unit.",
                        "   If C(size) specified then unit must be specified. There is no space allowed in between size number and unit.",
                        "   Only first occurrence in disk element will be considered, even if there are multiple size* parameters available.",
                        " - C(type) (string): Valid values are:",
                        "     - C(thin) thin disk",
                        "     - C(eagerzeroedthick) eagerzeroedthick disk",
                        "     - C(thick) thick disk",
                        "     Default: C(thick) thick disk, no eagerzero.",
                        " - C(disk_mode) (string): Type of disk mode. Valid values are:",
                        "     - C(persistent) Changes are immediately and permanently written to the virtual disk. This is default.",
                        "     - C(independent_persistent) Same as persistent, but not affected by snapshots.",
                        "     - C(independent_nonpersistent) Changes to virtual disk are made to a redo log and discarded at power off, but not affected by snapshots.",
                        " - C(sharing) (bool): The sharing mode of the virtual disk. The default value is no sharing.",
                        "   Setting C(sharing) means that multiple virtual machines can write to the virtual disk.",
                        "   Sharing can only be set if C(type) is C(eagerzeroedthick).",
                        " - C(datastore) (string): Name of datastore or datastore cluster to be used for the disk.",
                        " - C(autoselect_datastore) (bool): Select the less used datastore. Specify only if C(datastore) is not specified.",
                        " - C(scsi_controller) (integer): SCSI controller number. Valid value range from 0 to 3.",
                        "   Only 4 SCSI controllers are allowed per VM.",
                        "   Care should be taken while specifying C(scsi_controller) is 0 and C(unit_number) as 0 as this disk may contain OS.",
                        " - C(unit_number) (integer): Disk Unit Number. Valid value range from 0 to 15. Only 15 disks are allowed per SCSI Controller.",
                        " - C(scsi_type) (string): Type of SCSI controller. This value is required only for the first occurrence of SCSI Controller.",
                        "   This value is ignored, if SCSI Controller is already present or C(state) is C(absent).",
                        "   Valid values are C(buslogic), C(lsilogic), C(lsilogicsas) and C(paravirtual).",
                        "   C(paravirtual) is default value for this parameter.",
                        " - C(destroy) (bool): If C(state) is C(absent), make sure the disk file is deleted from the datastore (default C(yes)).",
                        "   Added in version 2.10.",
                        " - C(filename) (string): Existing disk image to be used. Filename must already exist on the datastore.",
                        "   Specify filename string in C([datastore_name] path/to/file.vmdk) format. Added in version 2.10.",
                        " - C(state) (string): State of disk. This is either \"absent\" or \"present\".",
                        "   If C(state) is set to C(absent), disk will be removed permanently from virtual machine configuration and from VMware storage.",
                        "   If C(state) is set to C(present), disk will be added if not present at given SCSI Controller and Unit Number.",
                        "   If C(state) is set to C(present) and disk exists with different size, disk size is increased.",
                        "   Reducing disk size is not allowed."
                    ],
                    "suboptions": {
                        "iolimit": {
                            "description": [
                                "Section specifies the shares and limit for storage I/O resource."
                            ],
                            "suboptions": {
                                "limit": {
                                    "description": [
                                        "Section specifies values for limit where the utilization of a virtual machine will not exceed, even if there are available resources."
                                    ]
                                },
                                "shares": {
                                    "description": [
                                        "Specifies different types of shares user can add for the given disk."
                                    ],
                                    "elements": "dict",
                                    "suboptions": {
                                        "level": {
                                            "description": [
                                                "Specifies different level for the shares section.",
                                                "Valid values are low, normal, high, custom."
                                            ]
                                        },
                                        "level_value": {
                                            "description": [
                                                "Custom value when C(level) is set as C(custom)."
                                            ],
                                            "type": "int"
                                        }
                                    },
                                    "type": "list"
                                }
                            }
                        },
                        "shares": {
                            "description": [
                                "section for iolimit section tells about what are all different types of shares user can add for disk."
                            ],
                            "elements": "dict",
                            "suboptions": {
                                "level": {
                                    "description": [
                                        "tells about different level for the shares section, valid values are low,normal,high,custom."
                                    ],
                                    "type": "str"
                                },
                                "level_value": {
                                    "description": [
                                        "custom value when level is set as custom."
                                    ],
                                    "type": "int"
                                }
                            },
                            "type": "list"
                        }
                    },
                    "type": "list"
                },
                "folder": {
                    "description": [
                        "Destination folder, absolute or relative path to find an existing guest.",
                        "This is a required parameter, only if multiple VMs are found with same name.",
                        "The folder should include the datacenter. ESX's datacenter is ha-datacenter",
                        "Examples:",
                        "   folder: /ha-datacenter/vm",
                        "   folder: ha-datacenter/vm",
                        "   folder: /datacenter1/vm",
                        "   folder: datacenter1/vm",
                        "   folder: /datacenter1/vm/folder1",
                        "   folder: datacenter1/vm/folder1",
                        "   folder: /folder1/datacenter1/vm",
                        "   folder: folder1/datacenter1/vm",
                        "   folder: /folder1/datacenter1/vm/folder2"
                    ],
                    "type": "str"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "moid": {
                    "description": [
                        "Managed Object ID of the instance to manage if known, this is a unique identifier only within a single vCenter instance.",
                        "This is required if C(name) or C(uuid) is not supplied."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name of the virtual machine.",
                        "This is a required parameter, if parameter C(uuid) or C(moid) is not supplied."
                    ],
                    "type": "str"
                },
                "password": {
                    "aliases": [
                        "pass",
                        "pwd"
                    ],
                    "description": [
                        "The password of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "port": {
                    "default": 443,
                    "description": [
                        "The port number of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "int"
                },
                "proxy_host": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them.",
                        "The format is a hostname or a IP.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
                        "This feature depends on a version of pyvmomi greater than v6.7.1.2018.12"
                    ],
                    "required": false,
                    "type": "str"
                },
                "proxy_port": {
                    "description": [
                        "Port of the HTTP proxy that will receive all HTTPS requests and relay them.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead."
                    ],
                    "required": false,
                    "type": "int"
                },
                "use_instance_uuid": {
                    "default": false,
                    "description": [
                        "Whether to use the VMware instance UUID rather than the BIOS UUID."
                    ],
                    "type": "bool"
                },
                "username": {
                    "aliases": [
                        "admin",
                        "user"
                    ],
                    "description": [
                        "The username of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "uuid": {
                    "description": [
                        "UUID of the instance to gather facts if known, this is VMware's unique identifier.",
                        "This is a required parameter, if parameter C(name) or C(moid) is not supplied."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
                        "Environment variable support added in Ansible 2.6.",
                        "If set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "PyVmomi"
            ],
            "short_description": "Manage disks related to virtual machine in given vCenter infrastructure"
        },
        "examples": "\n- name: Add disks to virtual machine using UUID\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    uuid: 421e4592-c069-924d-ce20-7e7533fab926\n    disk:\n      - size_mb: 10\n        type: thin\n        datastore: datacluster0\n        state: present\n        scsi_controller: 1\n        unit_number: 1\n        scsi_type: 'paravirtual'\n        disk_mode: 'persistent'\n      - size_gb: 10\n        type: eagerzeroedthick\n        state: present\n        autoselect_datastore: True\n        scsi_controller: 2\n        scsi_type: 'buslogic'\n        unit_number: 12\n        disk_mode: 'independent_persistent'\n      - size: 10Gb\n        type: eagerzeroedthick\n        state: present\n        autoselect_datastore: True\n        scsi_controller: 2\n        scsi_type: 'buslogic'\n        unit_number: 1\n        disk_mode: 'independent_nonpersistent'\n      - filename: \"[datastore1] path/to/existing/disk.vmdk\"\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Add disks with specified shares to the virtual machine\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    disk:\n      - size_gb: 1\n        type: thin\n        datastore: datacluster0\n        state: present\n        scsi_controller: 1\n        unit_number: 1\n        disk_mode: 'independent_persistent'\n        shares:\n          level: custom\n          level_value: 1300\n  delegate_to: localhost\n  register: test_custom_shares\n\n- name: create new disk with custom IO limits and shares in IO Limits\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    disk:\n      - size_gb: 1\n        type: thin\n        datastore: datacluster0\n        state: present\n        scsi_controller: 1\n        unit_number: 1\n        disk_mode: 'independent_persistent'\n        iolimit:\n            limit: 1506\n            shares:\n              level: custom\n              level_value: 1305\n  delegate_to: localhost\n  register: test_custom_IoLimit_shares\n\n- name: Remove disks from virtual machine using name\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    name: VM_225\n    disk:\n      - state: absent\n        scsi_controller: 1\n        unit_number: 1\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Remove disk from virtual machine using moid\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    moid: vm-42\n    disk:\n      - state: absent\n        scsi_controller: 1\n        unit_number: 1\n  delegate_to: localhost\n  register: disk_facts\n\n- name: Remove disk from virtual machine but keep the VMDK file on the datastore\n  community.vmware.vmware_guest_disk:\n    hostname: \"{{ vcenter_hostname }}\"\n    username: \"{{ vcenter_username }}\"\n    password: \"{{ vcenter_password }}\"\n    datacenter: \"{{ datacenter_name }}\"\n    validate_certs: no\n    name: VM_225\n    disk:\n      - state: absent\n        scsi_controller: 1\n        unit_number: 2\n        destroy: no\n  delegate_to: localhost\n  register: disk_facts\n",
        "metadata": null,
        "return": {
            "disk_status": {
                "description": "metadata about the virtual machine's disks after managing them",
                "returned": "always",
                "sample": {
                    "0": {
                        "backing_datastore": "datastore2",
                        "backing_disk_mode": "persistent",
                        "backing_eagerlyscrub": false,
                        "backing_filename": "[datastore2] VM_225/VM_225.vmdk",
                        "backing_thinprovisioned": false,
                        "backing_writethrough": false,
                        "capacity_in_bytes": 10485760,
                        "capacity_in_kb": 10240,
                        "controller_key": 1000,
                        "key": 2000,
                        "label": "Hard disk 1",
                        "summary": "10,240 KB",
                        "unit_number": 0
                    }
                },
                "type": "dict"
            }
        }
    }
}
