{
    "community.aws.ec2_vpc_peering_info": {
        "doc": {
            "author": "Karen Cheng (@Etherdaemon)",
            "collection": "community.aws",
            "description": [
                "Gets various details related to AWS VPC Peers",
                "This module was called C(ec2_vpc_peering_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ec2_vpc_peering_info.py",
            "has_action": false,
            "module": "ec2_vpc_peering_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "filters": {
                    "description": [
                        "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcPeeringConnections.html) for possible filters."
                    ],
                    "type": "dict"
                },
                "peer_connection_ids": {
                    "description": [
                        "List of specific VPC peer IDs to get details for."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Retrieves AWS VPC Peering details using AWS methods.",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Simple example of listing all VPC Peers\n- name: List all vpc peers\n  community.aws.ec2_vpc_peering_info:\n    region: ap-southeast-2\n  register: all_vpc_peers\n\n- name: Debugging the result\n  ansible.builtin.debug:\n    msg: \"{{ all_vpc_peers.result }}\"\n\n- name: Get details on specific VPC peer\n  community.aws.ec2_vpc_peering_info:\n    peer_connection_ids:\n      - pcx-12345678\n      - pcx-87654321\n    region: ap-southeast-2\n  register: all_vpc_peers\n\n- name: Get all vpc peers with specific filters\n  community.aws.ec2_vpc_peering_info:\n    region: ap-southeast-2\n    filters:\n      status-code: ['pending-acceptance']\n  register: pending_vpc_peers\n",
        "metadata": null,
        "return": {
            "result": {
                "description": "The result of the describe.",
                "returned": "success",
                "type": "list"
            },
            "vpc_peering_connections": {
                "contains": {
                    "accepter_vpc_info": {
                        "contains": {
                            "cidr_block": {
                                "description": "The primary CIDR for the VPC.",
                                "example": "10.10.10.0/23",
                                "returned": "when connection is in the accepted state.",
                                "type": "str"
                            },
                            "cidr_block_set": {
                                "contains": {
                                    "cidr_block": {
                                        "description": "A CIDR block used by the VPC.",
                                        "example": "10.10.10.0/23",
                                        "returned": "success",
                                        "type": "str"
                                    }
                                },
                                "description": "A list of all CIDRs for the VPC.",
                                "returned": "when connection is in the accepted state.",
                                "type": "complex"
                            },
                            "owner_id": {
                                "description": "The AWS account that owns the VPC.",
                                "example": "012345678901",
                                "returned": "success",
                                "type": "str"
                            },
                            "peering_options": {
                                "contains": {
                                    "allow_dns_resolution_from_remote_vpc": {
                                        "description": "Indicates whether a VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.",
                                        "returned": "success",
                                        "type": "bool"
                                    },
                                    "allow_egress_from_local_classic_link_to_remote_vpc": {
                                        "description": "Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.",
                                        "returned": "success",
                                        "type": "bool"
                                    },
                                    "allow_egress_from_local_vpc_to_remote_classic_link": {
                                        "description": "Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.",
                                        "returned": "success",
                                        "type": "bool"
                                    }
                                },
                                "description": "Additional peering configuration.",
                                "returned": "when connection is in the accepted state.",
                                "type": "dict"
                            },
                            "region": {
                                "description": "The AWS region that the VPC is in.",
                                "example": "us-east-1",
                                "returned": "success",
                                "type": "str"
                            },
                            "vpc_id": {
                                "description": "The ID of the VPC",
                                "example": "vpc-0123456789abcdef0",
                                "returned": "success",
                                "type": "str"
                            }
                        },
                        "description": "Information about the VPC which accepted the connection.",
                        "returned": "success",
                        "type": "complex"
                    },
                    "requester_vpc_info": {
                        "contains": {
                            "cidr_block": {
                                "description": "The primary CIDR for the VPC.",
                                "example": "10.10.10.0/23",
                                "returned": "when connection is not in the deleted state.",
                                "type": "str"
                            },
                            "cidr_block_set": {
                                "contains": {
                                    "cidr_block": {
                                        "description": "A CIDR block used by the VPC",
                                        "example": "10.10.10.0/23",
                                        "returned": "success",
                                        "type": "str"
                                    }
                                },
                                "description": "A list of all CIDRs for the VPC.",
                                "returned": "when connection is not in the deleted state.",
                                "type": "complex"
                            },
                            "owner_id": {
                                "description": "The AWS account that owns the VPC.",
                                "example": "012345678901",
                                "returned": "success",
                                "type": "str"
                            },
                            "peering_options": {
                                "contains": {
                                    "allow_dns_resolution_from_remote_vpc": {
                                        "description": "Indicates whether a VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.",
                                        "returned": "success",
                                        "type": "bool"
                                    },
                                    "allow_egress_from_local_classic_link_to_remote_vpc": {
                                        "description": "Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.",
                                        "returned": "success",
                                        "type": "bool"
                                    },
                                    "allow_egress_from_local_vpc_to_remote_classic_link": {
                                        "description": "Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.",
                                        "returned": "success",
                                        "type": "bool"
                                    }
                                },
                                "description": "Additional peering configuration.",
                                "returned": "when connection is not in the deleted state.",
                                "type": "dict"
                            },
                            "region": {
                                "description": "The AWS region that the VPC is in.",
                                "example": "us-east-1",
                                "returned": "success",
                                "type": "str"
                            },
                            "vpc_id": {
                                "description": "The ID of the VPC",
                                "example": "vpc-0123456789abcdef0",
                                "returned": "success",
                                "type": "str"
                            }
                        },
                        "description": "Information about the VPC which requested the connection.",
                        "returned": "success",
                        "type": "complex"
                    },
                    "status": {
                        "contains": {
                            "code": {
                                "description": "A short code describing the status of the connection.",
                                "example": "active",
                                "returned": "success",
                                "type": "str"
                            },
                            "message": {
                                "description": "Additional information about the status of the connection.",
                                "example": "Pending Acceptance by 012345678901",
                                "returned": "success",
                                "type": "str"
                            }
                        },
                        "description": "Details of the current status of the connection.",
                        "returned": "success",
                        "type": "complex"
                    },
                    "tags": {
                        "description": "Tags applied to the connection.",
                        "returned": "success",
                        "type": "dict"
                    },
                    "vpc_peering_connection_id": {
                        "description": "The ID of the VPC peering connection.",
                        "example": "pcx-0123456789abcdef0",
                        "returned": "success",
                        "type": "str"
                    }
                },
                "description": "Details of the matching VPC peering connections.",
                "returned": "success",
                "type": "list"
            }
        }
    }
}
