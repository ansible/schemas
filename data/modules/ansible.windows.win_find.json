{
    "ansible.windows.win_find": {
        "doc": {
            "author": [
                "Jordan Borean (@jborean93)"
            ],
            "collection": "ansible.windows",
            "description": [
                "Return a list of files based on specified criteria.",
                "Multiple criteria are AND'd together.",
                "For non-Windows targets, use the M(ansible.builtin.find) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ansible/windows/plugins/modules/win_find.py",
            "has_action": false,
            "module": "win_find",
            "options": {
                "age": {
                    "description": [
                        "Select files or folders whose age is equal to or greater than the specified time.",
                        "Use a negative age to find files equal to or less than the specified time.",
                        "You can choose seconds, minutes, hours, days or weeks by specifying the first letter of an of those words (e.g., \"2s\", \"10d\", 1w\")."
                    ],
                    "type": "str"
                },
                "age_stamp": {
                    "choices": [
                        "atime",
                        "ctime",
                        "mtime"
                    ],
                    "default": "mtime",
                    "description": [
                        "Choose the file property against which we compare C(age).",
                        "The default attribute we compare with is the last modification time."
                    ],
                    "type": "str"
                },
                "checksum_algorithm": {
                    "choices": [
                        "md5",
                        "sha1",
                        "sha256",
                        "sha384",
                        "sha512"
                    ],
                    "default": "sha1",
                    "description": [
                        "Algorithm to determine the checksum of a file.",
                        "Will throw an error if the host is unable to use specified algorithm."
                    ],
                    "type": "str"
                },
                "file_type": {
                    "choices": [
                        "directory",
                        "file"
                    ],
                    "default": "file",
                    "description": "Type of file to search for.",
                    "type": "str"
                },
                "follow": {
                    "default": false,
                    "description": [
                        "Set this to C(yes) to follow symlinks in the path.",
                        "This needs to be used in conjunction with C(recurse)."
                    ],
                    "type": "bool"
                },
                "get_checksum": {
                    "default": true,
                    "description": [
                        "Whether to return a checksum of the file in the return info (default sha1), use C(checksum_algorithm) to change from the default."
                    ],
                    "type": "bool"
                },
                "hidden": {
                    "default": false,
                    "description": "Set this to include hidden files or folders.",
                    "type": "bool"
                },
                "paths": {
                    "description": [
                        "List of paths of directories to search for files or folders in.",
                        "This can be supplied as a single path or a list of paths."
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "patterns": {
                    "aliases": [
                        "regex",
                        "regexp"
                    ],
                    "description": [
                        "One or more (powershell or regex) patterns to compare filenames with.",
                        "The type of pattern matching is controlled by C(use_regex) option.",
                        "The patterns restrict the list of files or folders to be returned based on the filenames.",
                        "For a file to be matched it only has to match with one pattern in a list provided."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "recurse": {
                    "default": false,
                    "description": [
                        "Will recursively descend into the directory looking for files or folders."
                    ],
                    "type": "bool"
                },
                "size": {
                    "description": [
                        "Select files or folders whose size is equal to or greater than the specified size.",
                        "Use a negative value to find files equal to or less than the specified size.",
                        "You can specify the size with a suffix of the byte type i.e. kilo = k, mega = m...",
                        "Size is not evaluated for symbolic links."
                    ],
                    "type": "str"
                },
                "use_regex": {
                    "default": false,
                    "description": [
                        "Will set patterns to run as a regex check if set to C(yes)."
                    ],
                    "type": "bool"
                }
            },
            "short_description": "Return a list of files based on specific criteria"
        },
        "examples": "\n- name: Find files in path\n  ansible.windows.win_find:\n    paths: D:\\Temp\n\n- name: Find hidden files in path\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    hidden: yes\n\n- name: Find files in multiple paths\n  ansible.windows.win_find:\n    paths:\n    - C:\\Temp\n    - D:\\Temp\n\n- name: Find files in directory while searching recursively\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    recurse: yes\n\n- name: Find files in directory while following symlinks\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    recurse: yes\n    follow: yes\n\n- name: Find files with .log and .out extension using powershell wildcards\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    patterns: [ '*.log', '*.out' ]\n\n- name: Find files in path based on regex pattern\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    patterns: out_\\d{8}-\\d{6}.log\n\n- name: Find files older than 1 day\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    age: 86400\n\n- name: Find files older than 1 day based on create time\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    age: 86400\n    age_stamp: ctime\n\n- name: Find files older than 1 day with unit syntax\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    age: 1d\n\n- name: Find files newer than 1 hour\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    age: -3600\n\n- name: Find files newer than 1 hour with unit syntax\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    age: -1h\n\n- name: Find files larger than 1MB\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    size: 1048576\n\n- name: Find files larger than 1GB with unit syntax\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    size: 1g\n\n- name: Find files smaller than 1MB\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    size: -1048576\n\n- name: Find files smaller than 1GB with unit syntax\n  ansible.windows.win_find:\n    paths: D:\\Temp\n    size: -1g\n\n- name: Find folders/symlinks in multiple paths\n  ansible.windows.win_find:\n    paths:\n    - C:\\Temp\n    - D:\\Temp\n    file_type: directory\n\n- name: Find files and return SHA256 checksum of files found\n  ansible.windows.win_find:\n    paths: C:\\Temp\n    get_checksum: yes\n    checksum_algorithm: sha256\n\n- name: Find files and do not return the checksum\n  ansible.windows.win_find:\n    paths: C:\\Temp\n    get_checksum: no\n",
        "metadata": null,
        "return": {
            "examined": {
                "description": "The number of files/folders that was checked.",
                "returned": "always",
                "sample": 10,
                "type": "int"
            },
            "files": {
                "contains": {
                    "attributes": {
                        "description": "attributes of the file at path in raw form.",
                        "returned": "success, path exists",
                        "sample": "Archive, Hidden",
                        "type": "str"
                    },
                    "checksum": {
                        "description": "The checksum of a file based on checksum_algorithm specified.",
                        "returned": "success, path exists, path is a file, get_checksum == True",
                        "sample": "09cb79e8fc7453c84a07f644e441fd81623b7f98",
                        "type": "str"
                    },
                    "creationtime": {
                        "description": "The create time of the file represented in seconds since epoch.",
                        "returned": "success, path exists",
                        "sample": 1477984205.15,
                        "type": "float"
                    },
                    "exists": {
                        "description": "Whether the file exists, will always be true for M(ansible.windows.win_find).",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "extension": {
                        "description": "The extension of the file at path.",
                        "returned": "success, path exists, path is a file",
                        "sample": ".ps1",
                        "type": "str"
                    },
                    "filename": {
                        "description": "The name of the file.",
                        "returned": "success, path exists",
                        "sample": "temp",
                        "type": "str"
                    },
                    "hlnk_targets": {
                        "description": "List of other files pointing to the same file (hard links), excludes the current file.",
                        "returned": "success, path exists",
                        "sample": [
                            "C:\\temp\\file.txt",
                            "C:\\Windows\\update.log"
                        ],
                        "type": "list"
                    },
                    "isarchive": {
                        "description": "If the path is ready for archiving or not.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "isdir": {
                        "description": "If the path is a directory or not.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "ishidden": {
                        "description": "If the path is hidden or not.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "isjunction": {
                        "description": "If the path is a junction point.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "islnk": {
                        "description": "If the path is a symbolic link.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "isreadonly": {
                        "description": "If the path is read only or not.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "isreg": {
                        "description": "If the path is a regular file or not.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "isshared": {
                        "description": "If the path is shared or not.",
                        "returned": "success, path exists",
                        "sample": true,
                        "type": "bool"
                    },
                    "lastaccesstime": {
                        "description": "The last access time of the file represented in seconds since epoch.",
                        "returned": "success, path exists",
                        "sample": 1477984205.15,
                        "type": "float"
                    },
                    "lastwritetime": {
                        "description": "The last modification time of the file represented in seconds since epoch.",
                        "returned": "success, path exists",
                        "sample": 1477984205.15,
                        "type": "float"
                    },
                    "lnk_source": {
                        "description": "The target of the symlink normalized for the remote filesystem.",
                        "returned": "success, path exists, path is a symbolic link or junction point",
                        "sample": "C:\\temp",
                        "type": "str"
                    },
                    "lnk_target": {
                        "description": "The target of the symlink. Note that relative paths remain relative, will return null if not a link.",
                        "returned": "success, path exists, path is a symbolic link or junction point",
                        "sample": "temp",
                        "type": "str"
                    },
                    "nlink": {
                        "description": "Number of links to the file (hard links)",
                        "returned": "success, path exists",
                        "sample": 1,
                        "type": "int"
                    },
                    "owner": {
                        "description": "The owner of the file.",
                        "returned": "success, path exists",
                        "sample": "BUILTIN\\Administrators",
                        "type": "str"
                    },
                    "path": {
                        "description": "The full absolute path to the file.",
                        "returned": "success, path exists",
                        "sample": "BUILTIN\\Administrators",
                        "type": "str"
                    },
                    "sharename": {
                        "description": "The name of share if folder is shared.",
                        "returned": "success, path exists, path is a directory and isshared == True",
                        "sample": "file-share",
                        "type": "str"
                    },
                    "size": {
                        "description": "The size in bytes of the file.",
                        "returned": "success, path exists, path is a file",
                        "sample": 1024,
                        "type": "int"
                    }
                },
                "description": "Information on the files/folders that match the criteria returned as a list of dictionary elements for each file matched. The entries are sorted by the path value alphabetically.",
                "returned": "success",
                "type": "complex"
            },
            "matched": {
                "description": "The number of files/folders that match the criteria.",
                "returned": "always",
                "sample": 2,
                "type": "int"
            }
        }
    }
}
