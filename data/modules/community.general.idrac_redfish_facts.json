{
    "community.general.idrac_redfish_facts": {
        "doc": {
            "author": "Jose Delarosa (@jose-delarosa)",
            "collection": "community.general",
            "description": [
                "Builds Redfish URIs locally and sends them to remote iDRAC controllers to get information back.",
                "For use with Dell EMC iDRAC operations that require Redfish OEM extensions",
                "This module was called C(idrac_redfish_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(community.general.idrac_redfish_info) module no longer returns C(ansible_facts)!"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/idrac_redfish_facts.py",
            "has_action": false,
            "module": "idrac_redfish_info",
            "options": {
                "auth_token": {
                    "description": [
                        "Security token for authentication with OOB controller"
                    ],
                    "type": "str",
                    "version_added": "2.3.0",
                    "version_added_collection": "community.general"
                },
                "baseuri": {
                    "description": [
                        "Base URI of iDRAC controller"
                    ],
                    "required": true,
                    "type": "str"
                },
                "category": {
                    "description": [
                        "Category to execute on iDRAC controller"
                    ],
                    "required": true,
                    "type": "str"
                },
                "command": {
                    "description": [
                        "List of commands to execute on iDRAC controller",
                        "C(GetManagerAttributes) returns the list of dicts containing iDRAC, LifecycleController and System attributes"
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "password": {
                    "description": [
                        "Password for authentication with iDRAC controller"
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 10,
                    "description": [
                        "Timeout in seconds for URL requests to OOB controller"
                    ],
                    "type": "int"
                },
                "username": {
                    "description": [
                        "User for authentication with iDRAC controller"
                    ],
                    "type": "str"
                }
            },
            "short_description": "Gather PowerEdge server information through iDRAC using Redfish APIs"
        },
        "examples": "\n  - name: Get Manager attributes with a default of 20 seconds\n    community.general.idrac_redfish_info:\n      category: Manager\n      command: GetManagerAttributes\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      timeout: 20\n    register: result\n\n  # Examples to display the value of all or a single iDRAC attribute\n  - name: Store iDRAC attributes as a fact variable\n    ansible.builtin.set_fact:\n      idrac_attributes: \"{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'iDRACAttributes') | list | first }}\"\n\n  - name: Display all iDRAC attributes\n    ansible.builtin.debug:\n      var: idrac_attributes\n\n  - name: Display the value of 'Syslog.1.SysLogEnable' iDRAC attribute\n    ansible.builtin.debug:\n      var: idrac_attributes['Syslog.1.SysLogEnable']\n\n  # Examples to display the value of all or a single LifecycleController attribute\n  - name: Store LifecycleController attributes as a fact variable\n    ansible.builtin.set_fact:\n      lc_attributes: \"{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'LCAttributes') | list | first }}\"\n\n  - name: Display LifecycleController attributes\n    ansible.builtin.debug:\n      var: lc_attributes\n\n  - name: Display the value of 'CollectSystemInventoryOnRestart' attribute\n    ansible.builtin.debug:\n      var: lc_attributes['LCAttributes.1.CollectSystemInventoryOnRestart']\n\n  # Examples to display the value of all or a single System attribute\n  - name: Store System attributes as a fact variable\n    ansible.builtin.set_fact:\n      system_attributes: \"{{ result.redfish_facts.entries | selectattr('Id', 'defined') | selectattr('Id', 'equalto', 'SystemAttributes') | list | first }}\"\n\n  - name: Display System attributes\n    ansible.builtin.debug:\n      var: system_attributes\n\n  - name: Display the value of 'PSRedPolicy'\n    ansible.builtin.debug:\n      var: system_attributes['ServerPwr.1.PSRedPolicy']\n\n",
        "metadata": null,
        "return": {
            "msg": {
                "description": "different results depending on task",
                "returned": "always",
                "sample": "List of Manager attributes",
                "type": "dict"
            }
        }
    }
}
