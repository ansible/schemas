{
    "community.postgresql.postgresql_table": {
        "doc": {
            "author": [
                "Andrei Klychkov (@Andersson007)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Allows to create, drop, rename, truncate a table, or change some table attributes."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_table.py",
            "has_action": false,
            "module": "postgresql_table",
            "notes": [
                "Supports C(check_mode).",
                "If you do not pass db parameter, tables will be created in the database named postgres.",
                "PostgreSQL allows to create columnless table, so columns param is optional.",
                "Unlogged tables are available from PostgreSQL server version 9.1.",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "cascade": {
                    "default": false,
                    "description": [
                        "Automatically drop objects that depend on the table (such as views). Used with I(state=absent) only."
                    ],
                    "type": "bool"
                },
                "columns": {
                    "description": [
                        "Columns that are needed."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of database to connect and where the table will be created."
                    ],
                    "type": "str"
                },
                "including": {
                    "description": [
                        "Keywords that are used with like parameter, may be DEFAULTS, CONSTRAINTS, INDEXES, STORAGE, COMMENTS or ALL. Needs I(like) specified. Mutually exclusive with I(columns), I(rename), and I(truncate)."
                    ],
                    "type": "str"
                },
                "like": {
                    "description": [
                        "Create a table like another table (with similar DDL). Mutually exclusive with I(columns), I(rename), and I(truncate)."
                    ],
                    "type": "str"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "owner": {
                    "description": [
                        "Set a table owner."
                    ],
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "rename": {
                    "description": [
                        "New table name. Mutually exclusive with I(tablespace), I(owner), I(unlogged), I(like), I(including), I(columns), I(truncate), and I(storage_params)."
                    ],
                    "type": "str"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "The table state. I(state=absent) is mutually exclusive with I(tablespace), I(owner), I(unlogged), I(like), I(including), I(columns), I(truncate), I(storage_params) and, I(rename)."
                    ],
                    "type": "str"
                },
                "storage_params": {
                    "description": [
                        "Storage parameters like fillfactor, autovacuum_vacuum_treshold, etc. Mutually exclusive with I(rename) and I(truncate)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "table": {
                    "aliases": [
                        "name"
                    ],
                    "description": [
                        "Table name."
                    ],
                    "required": true,
                    "type": "str"
                },
                "tablespace": {
                    "description": [
                        "Set a tablespace for the table."
                    ],
                    "type": "str"
                },
                "truncate": {
                    "default": false,
                    "description": [
                        "Truncate a table. Mutually exclusive with I(tablespace), I(owner), I(unlogged), I(like), I(including), I(columns), I(rename), and I(storage_params)."
                    ],
                    "type": "bool"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters are potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                },
                "unlogged": {
                    "default": false,
                    "description": [
                        "Create an unlogged table."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "module": "community.postgresql.postgresql_sequence"
                },
                {
                    "module": "community.postgresql.postgresql_idx"
                },
                {
                    "module": "community.postgresql.postgresql_info"
                },
                {
                    "module": "community.postgresql.postgresql_tablespace"
                },
                {
                    "module": "community.postgresql.postgresql_owner"
                },
                {
                    "module": "community.postgresql.postgresql_privs"
                },
                {
                    "module": "community.postgresql.postgresql_copy"
                },
                {
                    "description": "Complete reference of the CREATE TABLE command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-createtable.html",
                    "name": "CREATE TABLE reference"
                },
                {
                    "description": "Complete reference of the ALTER TABLE  command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-altertable.html",
                    "name": "ALTER TABLE reference"
                },
                {
                    "description": "Complete reference of the DROP TABLE command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-droptable.html",
                    "name": "DROP TABLE reference"
                },
                {
                    "description": "Complete reference of the PostgreSQL data types documentation.",
                    "link": "https://www.postgresql.org/docs/current/datatype.html",
                    "name": "PostgreSQL data types"
                }
            ],
            "short_description": "Create, drop, or modify a PostgreSQL table"
        },
        "examples": "\n- name: Create tbl2 in the acme database with the DDL like tbl1 with testuser as an owner\n  community.postgresql.postgresql_table:\n    db: acme\n    name: tbl2\n    like: tbl1\n    owner: testuser\n\n- name: Create tbl2 in the acme database and tablespace ssd with the DDL like tbl1 including comments and indexes\n  community.postgresql.postgresql_table:\n    db: acme\n    table: tbl2\n    like: tbl1\n    including: comments, indexes\n    tablespace: ssd\n\n- name: Create test_table with several columns in ssd tablespace with fillfactor=10 and autovacuum_analyze_threshold=1\n  community.postgresql.postgresql_table:\n    name: test_table\n    columns:\n    - id bigserial primary key\n    - num bigint\n    - stories text\n    tablespace: ssd\n    storage_params:\n    - fillfactor=10\n    - autovacuum_analyze_threshold=1\n\n- name: Create an unlogged table in schema acme\n  community.postgresql.postgresql_table:\n    name: acme.useless_data\n    columns: waste_id int\n    unlogged: true\n\n- name: Rename table foo to bar\n  community.postgresql.postgresql_table:\n    table: foo\n    rename: bar\n\n- name: Rename table foo from schema acme to bar\n  community.postgresql.postgresql_table:\n    name: acme.foo\n    rename: bar\n\n- name: Set owner to someuser\n  community.postgresql.postgresql_table:\n    name: foo\n    owner: someuser\n\n- name: Change tablespace of foo table to new_tablespace and set owner to new_user\n  community.postgresql.postgresql_table:\n    name: foo\n    tablespace: new_tablespace\n    owner: new_user\n\n- name: Truncate table foo\n  community.postgresql.postgresql_table:\n    name: foo\n    truncate: yes\n\n- name: Drop table foo from schema acme\n  community.postgresql.postgresql_table:\n    name: acme.foo\n    state: absent\n\n- name: Drop table bar cascade\n  community.postgresql.postgresql_table:\n    name: bar\n    state: absent\n    cascade: yes\n",
        "metadata": null,
        "return": {
            "owner": {
                "description": "Table owner.",
                "returned": "always",
                "sample": "postgres",
                "type": "str"
            },
            "queries": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "CREATE TABLE \"test_table\" (id bigint)"
                ],
                "type": "str"
            },
            "state": {
                "description": "Table state.",
                "returned": "always",
                "sample": "present",
                "type": "str"
            },
            "storage_params": {
                "description": "Storage parameters.",
                "returned": "always",
                "sample": [
                    "fillfactor=100",
                    "autovacuum_analyze_threshold=1"
                ],
                "type": "list"
            },
            "table": {
                "description": "Name of a table.",
                "returned": "always",
                "sample": "foo",
                "type": "str"
            },
            "tablespace": {
                "description": "Tablespace.",
                "returned": "always",
                "sample": "ssd_tablespace",
                "type": "str"
            }
        }
    }
}
