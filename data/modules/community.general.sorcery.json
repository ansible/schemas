{
    "community.general.sorcery": {
        "doc": {
            "author": "Vlad Glagolev (@vaygr)",
            "collection": "community.general",
            "description": [
                "Manages \"spells\" on Source Mage GNU/Linux using I(sorcery) toolchain"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/sorcery.py",
            "has_action": false,
            "module": "sorcery",
            "notes": [
                "When all three components are selected, the update goes by the sequence -- Sorcery -> Grimoire(s) -> Spell(s); you cannot override it.",
                "grimoire handling (i.e. add/remove, including SCM/rsync versions) is not yet supported."
            ],
            "options": {
                "cache_valid_time": {
                    "description": [
                        "Time in seconds to invalidate grimoire collection on update",
                        "especially useful for SCM and rsync grimoires",
                        "makes sense only in pair with C(update_cache)"
                    ],
                    "type": "int"
                },
                "depends": {
                    "description": [
                        "Comma-separated list of _optional_ dependencies to build a spell (or make sure it is built) with; use +/- in front of dependency to turn it on/off ('+' is optional though)",
                        "this option is ignored if C(name) parameter is equal to '*' or contains more than one spell",
                        "providers must be supplied in the form recognized by Sorcery, e.g. 'openssl(SSL)'"
                    ],
                    "type": "str"
                },
                "name": {
                    "aliases": [
                        "spell"
                    ],
                    "description": [
                        "Name of the spell",
                        "multiple names can be given, separated by commas",
                        "special value '*' in conjunction with states C(latest) or C(rebuild) will update or rebuild the whole system respectively"
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "state": {
                    "choices": [
                        "present",
                        "latest",
                        "absent",
                        "cast",
                        "dispelled",
                        "rebuild"
                    ],
                    "default": "present",
                    "description": [
                        "Whether to cast, dispel or rebuild a package",
                        "state C(cast) is an equivalent of C(present), not C(latest)",
                        "state C(latest) always triggers C(update_cache=yes)",
                        "state C(rebuild) implies cast of all specified spells, not only those existed before"
                    ],
                    "type": "str"
                },
                "update": {
                    "default": false,
                    "description": [
                        "Whether or not to update sorcery scripts at the very first stage"
                    ],
                    "type": "bool"
                },
                "update_cache": {
                    "aliases": [
                        "update_codex"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not to update grimoire collection before casting spells"
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "bash"
            ],
            "short_description": "Package manager for Source Mage GNU/Linux"
        },
        "examples": "\n- name: Make sure spell foo is installed\n  community.general.sorcery:\n    spell: foo\n    state: present\n\n- name: Make sure spells foo, bar and baz are removed\n  community.general.sorcery:\n    spell: foo,bar,baz\n    state: absent\n\n- name: Make sure spell foo with dependencies bar and baz is installed\n  community.general.sorcery:\n    spell: foo\n    depends: bar,baz\n    state: present\n\n- name: Make sure spell foo with bar and without baz dependencies is installed\n  community.general.sorcery:\n    spell: foo\n    depends: +bar,-baz\n    state: present\n\n- name: Make sure spell foo with libressl (providing SSL) dependency is installed\n  community.general.sorcery:\n    spell: foo\n    depends: libressl(SSL)\n    state: present\n\n- name: Make sure spells with/without required dependencies (if any) are installed\n  community.general.sorcery:\n    name: \"{{ item.spell }}\"\n    depends: \"{{ item.depends | default(None) }}\"\n    state: present\n  loop:\n    - { spell: 'vifm', depends: '+file,-gtk+2' }\n    - { spell: 'fwknop', depends: 'gpgme' }\n    - { spell: 'pv,tnftp,tor' }\n\n- name: Install the latest version of spell foo using regular glossary\n  community.general.sorcery:\n    name: foo\n    state: latest\n\n- name: Rebuild spell foo\n  community.general.sorcery:\n    spell: foo\n    state: rebuild\n\n- name: Rebuild the whole system, but update Sorcery and Codex first\n  community.general.sorcery:\n    spell: '*'\n    state: rebuild\n    update: yes\n    update_cache: yes\n\n- name: Refresh the grimoire collection if it is 1 day old using native sorcerous alias\n  community.general.sorcery:\n    update_codex: yes\n    cache_valid_time: 86400\n\n- name: Update only Sorcery itself\n  community.general.sorcery:\n    update: yes\n",
        "metadata": null,
        "return": null
    }
}
