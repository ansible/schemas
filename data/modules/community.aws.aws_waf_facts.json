{
    "community.aws.aws_waf_facts": {
        "doc": {
            "author": [
                "Mike Mochan (@mmochan)",
                "Will Thames (@willthames)"
            ],
            "collection": "community.aws",
            "description": [
                "Retrieve information for WAF ACLs, Rule , Conditions and Filters.",
                "This module was called C(aws_waf_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/aws_waf_facts.py",
            "has_action": false,
            "module": "aws_waf_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "The name of a Web Application Firewall."
                    ],
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "waf_regional": {
                    "default": false,
                    "description": "Whether to use the waf-regional module.",
                    "required": false,
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Retrieve information for WAF ACLs, Rule , Conditions and Filters.",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n- name: obtain all WAF information\n  community.aws.aws_waf_info:\n\n- name: obtain all information for a single WAF\n  community.aws.aws_waf_info:\n    name: test_waf\n\n- name: obtain all information for a single WAF Regional\n  community.aws.aws_waf_info:\n    name: test_waf\n    waf_regional: true\n",
        "metadata": null,
        "return": {
            "wafs": {
                "contains": {
                    "default_action": {
                        "description": "The action to perform if none of the Rules contained in the WebACL match.",
                        "returned": "always",
                        "sample": "BLOCK",
                        "type": "int"
                    },
                    "metric_name": {
                        "description": "A friendly name or description for the metrics for this WebACL.",
                        "returned": "always",
                        "sample": "test_waf_metric",
                        "type": "str"
                    },
                    "name": {
                        "description": "A friendly name or description of the WebACL.",
                        "returned": "always",
                        "sample": "test_waf",
                        "type": "str"
                    },
                    "rules": {
                        "contains": {
                            "action": {
                                "description": "The action to perform if the Rule matches.",
                                "returned": "always",
                                "sample": "BLOCK",
                                "type": "str"
                            },
                            "metric_name": {
                                "description": "A friendly name or description for the metrics for this Rule.",
                                "returned": "always",
                                "sample": "ipblockrule",
                                "type": "str"
                            },
                            "name": {
                                "description": "A friendly name or description of the Rule.",
                                "returned": "always",
                                "sample": "ip_block_rule",
                                "type": "str"
                            },
                            "predicates": {
                                "description": "The Predicates list contains a Predicate for each ByteMatchSet, IPSet, SizeConstraintSet, SqlInjectionMatchSet or XssMatchSet object in a Rule.",
                                "returned": "always",
                                "sample": [
                                    {
                                        "byte_match_set_id": "47b822b5-abcd-1234-faaf-1234567890",
                                        "byte_match_tuples": [
                                            {
                                                "field_to_match": {
                                                    "type": "QUERY_STRING"
                                                },
                                                "positional_constraint": "STARTS_WITH",
                                                "target_string": "bobbins",
                                                "text_transformation": "NONE"
                                            }
                                        ],
                                        "name": "bobbins",
                                        "negated": false,
                                        "type": "ByteMatch"
                                    }
                                ],
                                "type": "list"
                            }
                        },
                        "description": "An array that contains the action for each Rule in a WebACL , the priority of the Rule.",
                        "returned": "always",
                        "type": "complex"
                    }
                },
                "description": "The WAFs that match the passed arguments.",
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
