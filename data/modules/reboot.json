{
    "reboot": {
        "doc": {
            "author": [
                "Matt Davis (@nitzmahone)",
                "Sam Doran (@samdoran)"
            ],
            "collection": "ansible.builtin",
            "description": [
                "Reboot a machine, wait for it to go down, come back up, and respond to commands.",
                "For Windows targets, use the M(ansible.windows.win_reboot) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/reboot.py",
            "has_action": true,
            "module": "reboot",
            "notes": [
                "C(PATH) is ignored on the remote node when searching for the C(shutdown) command. Use C(search_paths) to specify locations to search if the default paths do not work."
            ],
            "options": {
                "boot_time_command": {
                    "default": "cat /proc/sys/kernel/random/boot_id",
                    "description": [
                        "Command to run that returns a unique string indicating the last time the system was booted.",
                        "Setting this to a command that has different output each time it is run will cause the task to fail."
                    ],
                    "type": "str",
                    "version_added": "2.10",
                    "version_added_collection": "ansible.builtin"
                },
                "connect_timeout": {
                    "description": [
                        "Maximum seconds to wait for a successful connection to the managed hosts before trying again.",
                        "If unspecified, the default setting for the underlying connection plugin is used."
                    ],
                    "type": "int"
                },
                "msg": {
                    "default": "Reboot initiated by Ansible",
                    "description": [
                        "Message to display to users before reboot."
                    ],
                    "type": "str"
                },
                "post_reboot_delay": {
                    "default": 0,
                    "description": [
                        "Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.",
                        "This is useful if you want wait for something to settle despite your connection already working."
                    ],
                    "type": "int"
                },
                "pre_reboot_delay": {
                    "default": 0,
                    "description": [
                        "Seconds to wait before reboot. Passed as a parameter to the reboot command.",
                        "On Linux, macOS and OpenBSD, this is converted to minutes and rounded down. If less than 60, it will be set to 0.",
                        "On Solaris and FreeBSD, this will be seconds."
                    ],
                    "type": "int"
                },
                "reboot_timeout": {
                    "default": 600,
                    "description": [
                        "Maximum seconds to wait for machine to reboot and respond to a test command.",
                        "This timeout is evaluated separately for both reboot verification and test command success so the maximum execution time for the module is twice this amount."
                    ],
                    "type": "int"
                },
                "search_paths": {
                    "default": [
                        "/sbin",
                        "/usr/sbin",
                        "/usr/local/sbin"
                    ],
                    "description": [
                        "Paths to search on the remote machine for the C(shutdown) command.",
                        "I(Only) these paths will be searched for the C(shutdown) command. C(PATH) is ignored in the remote node when searching for the C(shutdown) command."
                    ],
                    "type": "list",
                    "version_added": "2.8",
                    "version_added_collection": "ansible.builtin"
                },
                "test_command": {
                    "default": "whoami",
                    "description": [
                        "Command to run on the rebooted host and expect success from to determine the machine is ready for further tasks."
                    ],
                    "type": "str"
                }
            },
            "seealso": [
                {
                    "module": "ansible.windows.win_reboot"
                }
            ],
            "short_description": "Reboot a machine",
            "version_added": "2.7",
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n- name: Unconditionally reboot the machine with all defaults\n  reboot:\n\n- name: Reboot a slow machine that might have lots of updates to apply\n  reboot:\n    reboot_timeout: 3600\n\n- name: Reboot a machine with shutdown command in unusual place\n  reboot:\n    search_paths:\n     - '/lib/molly-guard'\n",
        "metadata": null,
        "return": {
            "elapsed": {
                "description": "The number of seconds that elapsed waiting for the system to be rebooted.",
                "returned": "always",
                "sample": 23,
                "type": "int"
            },
            "rebooted": {
                "description": "true if the machine was rebooted",
                "returned": "always",
                "sample": true,
                "type": "bool"
            }
        }
    }
}
