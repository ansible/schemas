{
    "community.network.icx_command": {
        "doc": {
            "author": "Ruckus Wireless (@Commscope)",
            "collection": "community.network",
            "description": [
                "Sends arbitrary commands to an ICX node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/network/plugins/modules/icx_command.py",
            "has_action": false,
            "module": "icx_command",
            "notes": [
                "Tested against ICX 10.1"
            ],
            "options": {
                "commands": {
                    "description": [
                        "List of commands to send to the remote ICX device over the configured provider. The resulting output from the command is returned. If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retries has expired. If a command sent to the device requires answering a prompt, checkall and newline if multiple prompts, it is possible to pass a dict containing I(command), I(answer), I(prompt), I(check_all) and I(newline).Common answers are 'y' or \"\\r\" (carriage return, must be double quotes). See examples."
                    ],
                    "required": true,
                    "type": "list"
                },
                "interval": {
                    "default": 1,
                    "description": [
                        "Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions, the interval indicates how long to wait before trying the command again."
                    ],
                    "type": "int"
                },
                "match": {
                    "choices": [
                        "any",
                        "all"
                    ],
                    "default": "all",
                    "description": [
                        "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the wait_for must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied."
                    ],
                    "type": "str"
                },
                "retries": {
                    "default": 10,
                    "description": [
                        "Specifies the number of times a command should by tried before it is considered failed. The command is run on the target device every retry and evaluated against the I(wait_for) conditions."
                    ],
                    "type": "int"
                },
                "wait_for": {
                    "aliases": [
                        "waitfor"
                    ],
                    "description": [
                        "List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving forward. If the conditional is not true within the configured number of retries, the task fails. See examples."
                    ],
                    "type": "list"
                }
            },
            "short_description": "Run arbitrary commands on remote Ruckus ICX 7000 series switches"
        },
        "examples": "\ntasks:\n  - name: Run show version on remote devices\n    community.network.icx_command:\n      commands: show version\n\n  - name: Run show version and check to see if output contains ICX\n    community.network.icx_command:\n      commands: show version\n      wait_for: result[0] contains ICX\n\n  - name: Run multiple commands on remote nodes\n    community.network.icx_command:\n      commands:\n        - show version\n        - show interfaces\n\n  - name: Run multiple commands and evaluate the output\n    community.network.icx_command:\n      commands:\n        - show version\n        - show interfaces\n      wait_for:\n        - result[0] contains ICX\n        - result[1] contains GigabitEthernet1/1/1\n  - name: Run commands that require answering a prompt\n    community.network.icx_command:\n      commands:\n        - command: 'service password-encryption sha1'\n          prompt: 'Warning: Moving to higher password-encryption type,.*'\n          answer: 'y'\n  - name: Run commands that require answering multiple prompt\n    community.network.icx_command:\n      commands:\n        - command: 'username qqq password qqq'\n          prompt:\n            - 'User already exists. Do you want to modify:.*'\n            - 'To modify or remove user, enter current password:'\n          answer:\n            - 'y'\n            - 'qqq\\\r'\n          check_all: True\n          newline: False\n",
        "metadata": null,
        "return": {
            "failed_conditions": {
                "description": "The list of conditionals that have failed",
                "returned": "failed",
                "sample": [
                    "...",
                    "..."
                ],
                "type": "list"
            },
            "stdout": {
                "description": "The set of responses from the commands",
                "returned": "always apart from low level errors",
                "sample": [
                    "...",
                    "..."
                ],
                "type": "list"
            },
            "stdout_lines": {
                "description": "The value of stdout split into a list",
                "returned": "always apart from low level errors",
                "sample": [
                    [
                        "...",
                        "..."
                    ],
                    [
                        "..."
                    ],
                    [
                        "..."
                    ]
                ],
                "type": "list"
            }
        }
    }
}
