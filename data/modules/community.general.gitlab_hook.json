{
    "community.general.gitlab_hook": {
        "doc": {
            "author": [
                "Marcus Watkins (@marwatk)",
                "Guillaume Martinez (@Lunik)"
            ],
            "collection": "community.general",
            "description": [
                "Adds, updates and removes project hook"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/gitlab_hook.py",
            "has_action": false,
            "module": "gitlab_hook",
            "options": {
                "api_password": {
                    "description": [
                        "The password to use for authentication against the API"
                    ],
                    "type": "str"
                },
                "api_token": {
                    "description": [
                        "GitLab token for logging in."
                    ],
                    "type": "str"
                },
                "api_url": {
                    "description": [
                        "The resolvable endpoint for the API"
                    ],
                    "type": "str"
                },
                "api_username": {
                    "description": [
                        "The username to use for authentication against the API"
                    ],
                    "type": "str"
                },
                "hook_url": {
                    "description": [
                        "The url that you want GitLab to post to, this is used as the primary key for updates and deletion."
                    ],
                    "required": true,
                    "type": "str"
                },
                "hook_validate_certs": {
                    "aliases": [
                        "enable_ssl_verification"
                    ],
                    "default": false,
                    "description": [
                        "Whether GitLab will do SSL verification when triggering the hook."
                    ],
                    "type": "bool"
                },
                "issues_events": {
                    "default": false,
                    "description": [
                        "Trigger hook on issues events."
                    ],
                    "type": "bool"
                },
                "job_events": {
                    "default": false,
                    "description": [
                        "Trigger hook on job events."
                    ],
                    "type": "bool"
                },
                "merge_requests_events": {
                    "default": false,
                    "description": [
                        "Trigger hook on merge requests events."
                    ],
                    "type": "bool"
                },
                "note_events": {
                    "default": false,
                    "description": [
                        "Trigger hook on note events or when someone adds a comment."
                    ],
                    "type": "bool"
                },
                "pipeline_events": {
                    "default": false,
                    "description": [
                        "Trigger hook on pipeline events."
                    ],
                    "type": "bool"
                },
                "project": {
                    "description": [
                        "Id or Full path of the project in the form of group/name."
                    ],
                    "required": true,
                    "type": "str"
                },
                "push_events": {
                    "default": true,
                    "description": [
                        "Trigger hook on push events."
                    ],
                    "type": "bool"
                },
                "push_events_branch_filter": {
                    "description": [
                        "Branch name of wildcard to trigger hook on push events"
                    ],
                    "type": "str",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.general"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "When C(present) the hook will be updated to match the input or created if it doesn't exist.",
                        "When C(absent) hook will be deleted if it exists."
                    ],
                    "type": "str"
                },
                "tag_push_events": {
                    "default": false,
                    "description": [
                        "Trigger hook on tag push events."
                    ],
                    "type": "bool"
                },
                "token": {
                    "description": [
                        "Secret token to validate hook messages at the receiver.",
                        "If this is present it will always result in a change as it cannot be retrieved from GitLab.",
                        "Will show up in the X-GitLab-Token HTTP request header."
                    ],
                    "required": false,
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Whether or not to validate SSL certs when supplying a https endpoint."
                    ],
                    "type": "bool"
                },
                "wiki_page_events": {
                    "default": false,
                    "description": [
                        "Trigger hook on wiki events."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.7",
                "python-gitlab python module"
            ],
            "short_description": "Manages GitLab project hooks."
        },
        "examples": "\n- name: \"Adding a project hook\"\n  community.general.gitlab_hook:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    project: \"my_group/my_project\"\n    hook_url: \"https://my-ci-server.example.com/gitlab-hook\"\n    state: present\n    push_events: yes\n    tag_push_events: yes\n    hook_validate_certs: no\n    token: \"my-super-secret-token-that-my-ci-server-will-check\"\n\n- name: \"Delete the previous hook\"\n  community.general.gitlab_hook:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    project: \"my_group/my_project\"\n    hook_url: \"https://my-ci-server.example.com/gitlab-hook\"\n    state: absent\n\n- name: \"Delete a hook by numeric project id\"\n  community.general.gitlab_hook:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    project: 10\n    hook_url: \"https://my-ci-server.example.com/gitlab-hook\"\n    state: absent\n",
        "metadata": null,
        "return": {
            "error": {
                "description": "the error message returned by the GitLab API",
                "returned": "failed",
                "sample": "400: path is already in use",
                "type": "str"
            },
            "hook": {
                "description": "API object",
                "returned": "always",
                "type": "dict"
            },
            "msg": {
                "description": "Success or failure message",
                "returned": "always",
                "sample": "Success",
                "type": "str"
            },
            "result": {
                "description": "json parsed response from the server",
                "returned": "always",
                "type": "dict"
            }
        }
    }
}
