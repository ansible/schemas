{
    "community.sops.sops_encrypt": {
        "doc": {
            "author": "Felix Fontein (@felixfontein)",
            "collection": "community.sops",
            "description": [
                "Allows to encrypt binary data (Base64 encoded), text data, JSON or YAML data with sops."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/sops/plugins/modules/sops_encrypt.py",
            "has_action": false,
            "module": "sops_encrypt",
            "notes": [
                "Supports C(check_mode)."
            ],
            "options": {
                "attributes": {
                    "aliases": [
                        "attr"
                    ],
                    "description": [
                        "The attributes the resulting file or directory should have.",
                        "To get supported flags look at the man page for I(chattr) on the target system.",
                        "This string should contain the attributes in the same order as the one displayed by I(lsattr).",
                        "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."
                    ],
                    "type": "str",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "aws_access_key_id": {
                    "description": [
                        "The AWS access key ID to use for requests to AWS.",
                        "Sets the environment variable C(AWS_ACCESS_KEY_ID) for the sops call."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "aws_profile": {
                    "description": [
                        "The AWS profile to use for requests to AWS.",
                        "This corresponds to the sops C(--aws-profile) option."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "aws_secret_access_key": {
                    "description": [
                        "The AWS secret access key to use for requests to AWS.",
                        "Sets the environment variable C(AWS_SECRET_ACCESS_KEY) for the sops call."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "aws_session_token": {
                    "description": [
                        "The AWS session token to use for requests to AWS.",
                        "Sets the environment variable C(AWS_SESSION_TOKEN) for the sops call."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "azure_kv": {
                    "description": [
                        "Azure Key Vault URLs to use.",
                        "This corresponds to the sops C(--azure-kv) option."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "config_path": {
                    "description": [
                        "Path to the sops configuration file.",
                        "If not set, sops will recursively search for the config file starting at the file that is encrypted or decrypted.",
                        "This corresponds to the sops C(--config) option."
                    ],
                    "type": "path",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "content_binary": {
                    "description": [
                        "The data to encrypt. Must be L(Base64 encoded,https://en.wikipedia.org/wiki/Base64) binary data.",
                        "Please note that the module might not be idempotent if the data can be parsed as JSON or YAML.",
                        "Exactly one of I(content_text), I(content_binary), I(content_json) and I(content_yaml) must be specified."
                    ],
                    "type": "str"
                },
                "content_json": {
                    "description": [
                        "The data to encrypt. Must be a JSON dictionary.",
                        "Exactly one of I(content_text), I(content_binary), I(content_json) and I(content_yaml) must be specified."
                    ],
                    "type": "dict"
                },
                "content_text": {
                    "description": [
                        "The data to encrypt. Must be a Unicode text.",
                        "Please note that the module might not be idempotent if the text can be parsed as JSON or YAML.",
                        "Exactly one of I(content_text), I(content_binary), I(content_json) and I(content_yaml) must be specified."
                    ],
                    "type": "str"
                },
                "content_yaml": {
                    "description": [
                        "The data to encrypt. Must be a YAML dictionary.",
                        "Please note that Ansible only allows to pass data that can be represented as a JSON dictionary.",
                        "Exactly one of I(content_text), I(content_binary), I(content_json) and I(content_yaml) must be specified."
                    ],
                    "type": "dict"
                },
                "enable_local_keyservice": {
                    "default": false,
                    "description": [
                        "Tell sops to use local key service.",
                        "This corresponds to the sops C(--enable-local-keyservice) option."
                    ],
                    "type": "bool",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "encrypted_regex": {
                    "description": [
                        "Set the encrypted key suffix.",
                        "When specified, only keys matching the regular expression will be encrypted.",
                        "This corresponds to the sops C(--encrypted-regex) option."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "encrypted_suffix": {
                    "description": [
                        "Override the encrypted key suffix.",
                        "When set to an empty string, all keys will be encrypted that are not explicitly marked by I(unencrypted_suffix).",
                        "This corresponds to the sops C(--encrypted-suffix) option."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "encryption_context": {
                    "description": [
                        "List of KMS encryption context pairs of format C(key:value).",
                        "This corresponds to the sops C(--encryption-context) option."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Force rewriting the encrypted file."
                    ],
                    "type": "bool"
                },
                "gcp_kms": {
                    "description": [
                        "GCP KMS resource IDs to use.",
                        "This corresponds to the sops C(--gcp-kms) option."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "group": {
                    "description": [
                        "Name of the group that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "hc_vault_transit": {
                    "description": [
                        "HashiCorp Vault key URIs to use.",
                        "For example, C(https://vault.example.org:8200/v1/transit/keys/dev).",
                        "This corresponds to the sops C(--hc-vault-transit) option."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "keyservice": {
                    "description": [
                        "Specify key services to use next to the local one.",
                        "A key service must be specified in the form C(protocol://address), for example C(tcp://myserver.com:5000).",
                        "This corresponds to the sops C(--keyservice) option."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "kms": {
                    "description": [
                        "List of KMS ARNs to use.",
                        "This corresponds to the sops C(--kms) option."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "mode": {
                    "description": [
                        "The permissions the resulting file or directory should have.",
                        "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.",
                        "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.",
                        "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
                    ],
                    "type": "raw"
                },
                "owner": {
                    "description": [
                        "Name of the user that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "path": {
                    "description": [
                        "The sops encrypt file."
                    ],
                    "required": true,
                    "type": "path"
                },
                "pgp": {
                    "description": [
                        "PGP fingerprints to use.",
                        "This corresponds to the sops C(--pgp) option."
                    ],
                    "elements": "str",
                    "type": "list",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "selevel": {
                    "description": [
                        "The level part of the SELinux file context.",
                        "This is the MLS/MCS attribute, sometimes known as the C(range).",
                        "When set to C(_default), it will use the C(level) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "serole": {
                    "description": [
                        "The role part of the SELinux file context.",
                        "When set to C(_default), it will use the C(role) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "setype": {
                    "description": [
                        "The type part of the SELinux file context.",
                        "When set to C(_default), it will use the C(type) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "seuser": {
                    "description": [
                        "The user part of the SELinux file context.",
                        "By default it uses the C(system) policy, where applicable.",
                        "When set to C(_default), it will use the C(user) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "shamir_secret_sharing_threshold": {
                    "description": [
                        "The number of distinct keys required to retrieve the data key with L(Shamir's Secret Sharing, https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing).",
                        "If not set here and in the sops config file, will default to C(0).",
                        "This corresponds to the sops C(--shamir-secret-sharing-threshold) option."
                    ],
                    "type": "int",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "sops_binary": {
                    "description": [
                        "Path to the sops binary.",
                        "By default uses C(sops)."
                    ],
                    "type": "path",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "unencrypted_regex": {
                    "description": [
                        "Set the unencrypted key suffix.",
                        "When specified, only keys matching the regular expression will be left unencrypted.",
                        "This corresponds to the sops C(--unencrypted-regex) option."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "unencrypted_suffix": {
                    "description": [
                        "Override the unencrypted key suffix.",
                        "This corresponds to the sops C(--unencrypted-suffix) option."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.sops"
                },
                "unsafe_writes": {
                    "default": false,
                    "description": [
                        "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.",
                        "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.",
                        "This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).",
                        "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."
                    ],
                    "type": "bool",
                    "version_added": "2.2",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "seealso": [
                {
                    "description": "The sops lookup can be used decrypt sops-encrypted files.",
                    "ref": "community.sops.sops lookup <ansible_collections.community.sops.sops_lookup>"
                }
            ],
            "short_description": "Encrypt data with sops",
            "version_added": "0.1.0",
            "version_added_collection": "community.sops"
        },
        "examples": "\n- name: Encrypt a secret text\n  community.sops.sops_encrypt:\n    path: text-data.sops\n    content_text: This is a secret text.\n\n- name: Encrypt the contents of a file\n  community.sops.sops_encrypt:\n    path: binary-data.sops\n    content_binary: \"{{ lookup('ansible.builtin.file', '/path/to/file', rstrip=false) | b64encode }}\"\n\n- name: Encrypt some datastructure as YAML\n  community.sops.sops_encrypt:\n    path: stuff.sops.yaml\n    content_yaml: \"{{ result }}\"\n",
        "metadata": null,
        "return": null
    }
}
