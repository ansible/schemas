{
    "community.postgresql.postgresql_ext": {
        "doc": {
            "author": [
                "Daniel Schep (@dschep)",
                "Thomas O'Donnell (@andytom)",
                "Sandro Santilli (@strk)",
                "Andrew Klychkov (@Andersson007)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Add or remove PostgreSQL extensions from a database."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_ext.py",
            "has_action": false,
            "module": "postgresql_ext",
            "notes": [
                "Supports C(check_mode).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "This module uses I(psycopg2), a Python PostgreSQL database adapter.",
                "You must ensure that C(psycopg2) is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the C(postgresql), C(libpq-dev), and C(python-psycopg2) packages on the remote host before using this module.",
                "Incomparable versions, for example PostGIS ``unpackaged``, cannot be installed.",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "cascade": {
                    "default": false,
                    "description": [
                        "Automatically install/remove any extensions that this extension depends on that are not already installed/removed (supported since PostgreSQL 9.6)."
                    ],
                    "type": "bool"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of the database to add or remove the extension to/from."
                    ],
                    "required": true,
                    "type": "str"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "name": {
                    "aliases": [
                        "ext"
                    ],
                    "description": [
                        "Name of the extension to add or remove."
                    ],
                    "required": true,
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "schema": {
                    "description": [
                        "Name of the schema to add the extension to."
                    ],
                    "type": "str"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting.",
                        "The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "The database extension state."
                    ],
                    "type": "str"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters I(ext), I(schema), I(version), I(session_role) are potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections via the parameters are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                },
                "version": {
                    "description": [
                        "Extension version to add or update to. Has effect with I(state=present) only.",
                        "If not specified, the latest extension version will be created.",
                        "It can't downgrade an extension version. When version downgrade is needed, remove the extension and create new one with appropriate version.",
                        "Set I(version=latest) to update the extension to the latest available version."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "description": "General information about PostgreSQL extensions.",
                    "link": "https://www.postgresql.org/docs/current/external-extensions.html",
                    "name": "PostgreSQL extensions"
                },
                {
                    "description": "Complete reference of the CREATE EXTENSION command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-createextension.html",
                    "name": "CREATE EXTENSION reference"
                },
                {
                    "description": "Complete reference of the ALTER EXTENSION command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-alterextension.html",
                    "name": "ALTER EXTENSION reference"
                },
                {
                    "description": "Complete reference of the DROP EXTENSION command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-droppublication.html",
                    "name": "DROP EXTENSION reference"
                }
            ],
            "short_description": "Add or remove PostgreSQL extensions from a database"
        },
        "examples": "\n- name: Adds postgis extension to the database acme in the schema foo\n  community.postgresql.postgresql_ext:\n    name: postgis\n    db: acme\n    schema: foo\n\n- name: Removes postgis extension to the database acme\n  community.postgresql.postgresql_ext:\n    name: postgis\n    db: acme\n    state: absent\n\n- name: Adds earthdistance extension to the database template1 cascade\n  community.postgresql.postgresql_ext:\n    name: earthdistance\n    db: template1\n    cascade: true\n\n# In the example below, if earthdistance extension is installed,\n# it will be removed too because it depends on cube:\n- name: Removes cube extension from the database acme cascade\n  community.postgresql.postgresql_ext:\n    name: cube\n    db: acme\n    cascade: yes\n    state: absent\n\n- name: Create extension foo of version 1.2 or update it if it's already created\n  community.postgresql.postgresql_ext:\n    db: acme\n    name: foo\n    version: 1.2\n\n- name: Assuming extension foo is created, update it to the latest version\n  community.postgresql.postgresql_ext:\n    db: acme\n    name: foo\n    version: latest\n",
        "metadata": null,
        "return": {
            "query": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "DROP EXTENSION \"acme\""
                ],
                "type": "list"
            }
        }
    }
}
