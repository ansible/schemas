{
    "community.aws.ec2_vpc_route_table_facts": {
        "doc": {
            "author": [
                "Rob White (@wimnat)",
                "Mark Chappell (@tremble)"
            ],
            "collection": "community.aws",
            "description": [
                "Gather information about ec2 VPC route tables in AWS",
                "This module was called C(ec2_vpc_route_table_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ec2_vpc_route_table_facts.py",
            "has_action": false,
            "module": "ec2_vpc_route_table_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "filters": {
                    "description": [
                        "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html) for possible filters."
                    ],
                    "type": "dict"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "boto"
            ],
            "short_description": "Gather information about ec2 VPC route tables in AWS",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n- name: Gather information about all VPC route tables\n  community.aws.ec2_vpc_route_table_info:\n\n- name: Gather information about a particular VPC route table using route table ID\n  community.aws.ec2_vpc_route_table_info:\n    filters:\n      route-table-id: rtb-00112233\n\n- name: Gather information about any VPC route table with a tag key Name and value Example\n  community.aws.ec2_vpc_route_table_info:\n    filters:\n      \"tag:Name\": Example\n\n- name: Gather information about any VPC route table within VPC with ID vpc-abcdef00\n  community.aws.ec2_vpc_route_table_info:\n    filters:\n      vpc-id: vpc-abcdef00\n",
        "metadata": null,
        "return": {
            "route_tables": {
                "contains": {
                    "associations": {
                        "contains": {
                            "association_state": {
                                "contains": {
                                    "state": {
                                        "description": "The state of the association",
                                        "returned": "always",
                                        "sample": "associated",
                                        "type": "str"
                                    },
                                    "state_message": {
                                        "description": "Additional information about the state of the association",
                                        "returned": "when available",
                                        "sample": "Creating association",
                                        "type": "str"
                                    }
                                },
                                "description": "The state of the association",
                                "returned": "always",
                                "type": "complex"
                            },
                            "id": {
                                "description": "ID of association between route table and subnet",
                                "returned": "always",
                                "sample": "rtbassoc-ab47cfc3",
                                "type": "str"
                            },
                            "main": {
                                "description": "Whether this is the main route table",
                                "returned": "always",
                                "sample": false,
                                "type": "bool"
                            },
                            "route_table_association_id": {
                                "description": "ID of association between route table and subnet",
                                "returned": "always",
                                "sample": "rtbassoc-ab47cfc3",
                                "type": "str"
                            },
                            "route_table_id": {
                                "description": "ID of the route table",
                                "returned": "always",
                                "sample": "rtb-bf779ed7",
                                "type": "str"
                            },
                            "subnet_id": {
                                "description": "ID of the subnet",
                                "returned": "always",
                                "sample": "subnet-82055af9",
                                "type": "str"
                            }
                        },
                        "description": "List of subnets associated with the route table",
                        "returned": "always",
                        "type": "complex"
                    },
                    "id": {
                        "description": "ID of the route table (same as route_table_id for backwards compatibility)",
                        "returned": "always",
                        "sample": "rtb-bf779ed7",
                        "type": "str"
                    },
                    "owner_id": {
                        "description": "ID of the account which owns the route table",
                        "returned": "always",
                        "sample": "012345678912",
                        "type": "str"
                    },
                    "propagating_vgws": {
                        "description": "List of Virtual Private Gateways propagating routes",
                        "returned": "always",
                        "sample": [],
                        "type": "list"
                    },
                    "route_table_id": {
                        "description": "ID of the route table",
                        "returned": "always",
                        "sample": "rtb-bf779ed7",
                        "type": "str"
                    },
                    "routes": {
                        "contains": {
                            "destination_cidr_block": {
                                "description": "CIDR block of destination",
                                "returned": "always",
                                "sample": "10.228.228.0/22",
                                "type": "str"
                            },
                            "gateway_id": {
                                "description": "ID of the gateway",
                                "returned": "when gateway is local or internet gateway",
                                "sample": "local",
                                "type": "str"
                            },
                            "instance_id": {
                                "description": [
                                    "ID of a NAT instance.",
                                    "Empty unless the route is via an EC2 instance"
                                ],
                                "returned": "always",
                                "sample": "i-abcd123456789",
                                "type": "str"
                            },
                            "instance_owner_id": {
                                "description": [
                                    "AWS account owning the NAT instance",
                                    "Empty unless the route is via an EC2 instance"
                                ],
                                "returned": "always",
                                "sample": 123456789012,
                                "type": "str"
                            },
                            "nat_gateway_id": {
                                "description": "ID of the NAT gateway",
                                "returned": "when the route is via a NAT gateway",
                                "sample": "local",
                                "type": "str"
                            },
                            "network_interface_id": {
                                "description": [
                                    "The ID of the network interface",
                                    "Empty unless the route is via an EC2 instance"
                                ],
                                "returned": "always",
                                "sample": 123456789012,
                                "type": "str"
                            },
                            "origin": {
                                "description": "mechanism through which the route is in the table",
                                "returned": "always",
                                "sample": "CreateRouteTable",
                                "type": "str"
                            },
                            "state": {
                                "description": "state of the route",
                                "returned": "always",
                                "sample": "active",
                                "type": "str"
                            }
                        },
                        "description": "List of routes in the route table",
                        "returned": "always",
                        "type": "complex"
                    },
                    "tags": {
                        "description": "Tags applied to the route table",
                        "returned": "always",
                        "sample": {
                            "Name": "Public route table",
                            "Public": "true"
                        },
                        "type": "dict"
                    },
                    "vpc_id": {
                        "description": "ID for the VPC in which the route lives",
                        "returned": "always",
                        "sample": "vpc-6e2d2407",
                        "type": "str"
                    }
                },
                "description": [
                    "A list of dictionarys describing route tables",
                    "See also U(https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_route_tables)"
                ],
                "returned": "always",
                "type": "complex"
            }
        }
    }
}
