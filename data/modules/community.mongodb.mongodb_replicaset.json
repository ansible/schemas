{
    "community.mongodb.mongodb_replicaset": {
        "doc": {
            "author": "Rhys Campbell (@rhysmeister)",
            "collection": "community.mongodb",
            "description": [
                "Initialises a MongoDB replicaset in a new deployment.",
                "Validates the replicaset name for existing deployments.",
                "Advanced replicaset member configuration possible (see examples)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mongodb/plugins/modules/mongodb_replicaset.py",
            "has_action": false,
            "module": "mongodb_replicaset",
            "notes": [
                "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. @see U(http://api.mongodb.org/python/current/installation.html)"
            ],
            "options": {
                "arbiter_at_index": {
                    "description": [
                        "Identifies the position of the member in the array that is an arbiter."
                    ],
                    "type": "int"
                },
                "auth_mechanism": {
                    "choices": [
                        "SCRAM-SHA-256",
                        "SCRAM-SHA-1",
                        "MONGODB-X509",
                        "GSSAPI",
                        "PLAIN"
                    ],
                    "description": [
                        "Authentication type."
                    ],
                    "required": false,
                    "type": "str"
                },
                "chaining_allowed": {
                    "default": true,
                    "description": [
                        "When I(settings.chaining_allowed=true), the replicaset allows secondary members to replicate from other secondary members.",
                        "When I(settings.chaining_allowed=false), secondaries can replicate only from the primary."
                    ],
                    "type": "bool"
                },
                "connection_options": {
                    "description": [
                        "Additional connection options.",
                        "Supply as a list of dicts or strings containing key value pairs seperated with '='."
                    ],
                    "elements": "raw",
                    "required": false,
                    "type": "list"
                },
                "election_timeout_millis": {
                    "default": 10000,
                    "description": [
                        "The time limit in milliseconds for detecting when a replicaset's primary is unreachable."
                    ],
                    "type": "int"
                },
                "heartbeat_timeout_secs": {
                    "default": 10,
                    "description": [
                        "Number of seconds that the replicaset members wait for a successful heartbeat from each other.",
                        "If a member does not respond in time, other members mark the delinquent member as inaccessible.",
                        "The setting only applies when using I(protocol_version=0). When using I(protocol_version=1) the relevant setting is I(settings.election_timeout_millis)."
                    ],
                    "type": "int"
                },
                "login_database": {
                    "default": "admin",
                    "description": [
                        "The database where login credentials are stored."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "The host running MongoDB instance to login to."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with.",
                        "Required when I(login_user) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_port": {
                    "default": 27017,
                    "description": [
                        "The MongoDB server port to login to."
                    ],
                    "required": false,
                    "type": "int"
                },
                "login_user": {
                    "description": [
                        "The MongoDB user to login with.",
                        "Required when I(login_password) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "members": {
                    "description": [
                        "Yaml list consisting of the replicaset members.",
                        "Csv string will also be accepted i.e. mongodb1:27017,mongodb2:27017,mongodb3:27017.",
                        "A dictionary can also be used to specify advanced replicaset member options.",
                        "If a port number is not provided then 27017 is assumed."
                    ],
                    "elements": "raw",
                    "type": "list"
                },
                "protocol_version": {
                    "choices": [
                        0,
                        1
                    ],
                    "default": 1,
                    "description": "Version of the replicaset election protocol.",
                    "type": "int"
                },
                "replica_set": {
                    "default": "rs0",
                    "description": [
                        "Replicaset name."
                    ],
                    "type": "str"
                },
                "ssl": {
                    "default": false,
                    "description": [
                        "Whether to use an SSL connection when connecting to the database."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "ssl_ca_certs": {
                    "description": [
                        "The ssl_ca_certs option takes a path to a CA file."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_cert_reqs": {
                    "choices": [
                        "CERT_NONE",
                        "CERT_OPTIONAL",
                        "CERT_REQUIRED"
                    ],
                    "default": "CERT_REQUIRED",
                    "description": [
                        "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_certfile": {
                    "description": [
                        "Present a client certificate using the ssl_certfile option."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_crlfile": {
                    "description": [
                        "The ssl_crlfile option takes a path to a CRL file."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_keyfile": {
                    "description": [
                        "Private key for the client certificate."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_pem_passphrase": {
                    "description": [
                        "Passphrase to decrypt encrypted private keys."
                    ],
                    "required": false,
                    "type": "str"
                },
                "validate": {
                    "default": true,
                    "description": [
                        "Performs some basic validation on the provided replicaset config."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "pymongo"
            ],
            "short_description": "Initialises a MongoDB replicaset.",
            "version_added": "1.0.0",
            "version_added_collection": "community.mongodb"
        },
        "examples": "\n# Create a replicaset called 'rs0' with the 3 provided members\n- name: Ensure replicaset rs0 exists\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_user: admin\n    login_password: admin\n    replica_set: rs0\n    members:\n    - mongodb1:27017\n    - mongodb2:27017\n    - mongodb3:27017\n  when: groups.mongod.index(inventory_hostname) == 0\n\n# Create two single-node replicasets on the localhost for testing\n- name: Ensure replicaset rs0 exists\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_port: 3001\n    login_user: admin\n    login_password: secret\n    login_database: admin\n    replica_set: rs0\n    members: localhost:3001\n    validate: no\n\n- name: Ensure replicaset rs1 exists\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_port: 3002\n    login_user: admin\n    login_password: secret\n    login_database: admin\n    replica_set: rs1\n    members: localhost:3002\n    validate: no\n\n- name: Create a replicaset and use a custom priority for each member\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_user: admin\n    login_password: admin\n    replica_set: rs0\n    members:\n    - host: \"localhost:3001\"\n      priority: 1\n    - host: \"localhost:3002\"\n      priority: 0.5\n    - host: \"localhost:3003\"\n      priority: 0.5\n  when: groups.mongod.index(inventory_hostname) == 0\n\n- name: Create replicaset rs1 with options and member tags\n  community.mongodb.mongodb_replicaset:\n    login_host: localhost\n    login_port: 3001\n    login_database: admin\n    replica_set: rs1\n    members:\n    - host: \"localhost:3001\"\n      priority: 1\n      tags:\n        dc: \"east\"\n        usage: \"production\"\n    - host: \"localhost:3002\"\n      priority: 1\n      tags:\n        dc: \"east\"\n        usage: \"production\"\n    - host: \"localhost:3003\"\n      priority: 0\n      hidden: true\n      slaveDelay: 3600\n      tags:\n        dc: \"west\"\n        usage: \"reporting\"\n",
        "metadata": null,
        "return": {
            "mongodb_replicaset": {
                "description": "The name of the replicaset that has been created.",
                "returned": "success",
                "type": "str"
            }
        }
    }
}
