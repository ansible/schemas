{
    "community.aws.elb_target_info": {
        "doc": {
            "author": "Yaakov Kuperman (@yaakov-github)",
            "collection": "community.aws",
            "description": [
                "This module will search through every target group in a region to find which ones have registered a given instance ID or IP.",
                "This module was called C(elb_target_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/elb_target_info.py",
            "has_action": false,
            "module": "elb_target_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "get_unused_target_groups": {
                    "default": true,
                    "description": [
                        "Whether or not to get target groups not used by any load balancers."
                    ],
                    "type": "bool"
                },
                "instance_id": {
                    "description": [
                        "What instance ID to get information for."
                    ],
                    "required": true,
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "python >= 2.6"
            ],
            "short_description": "Gathers which target groups a target is associated with.",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# practical use case - dynamically de-registering and re-registering nodes\n\n  - name: Get EC2 Metadata\n    amazon.aws.ec2_metadata_facts:\n\n  - name: Get initial list of target groups\n    delegate_to: localhost\n    community.aws.elb_target_info:\n      instance_id: \"{{ ansible_ec2_instance_id }}\"\n      region: \"{{ ansible_ec2_placement_region }}\"\n    register: target_info\n\n  - name: save fact for later\n    ansible.builtin.set_fact:\n      original_tgs: \"{{ target_info.instance_target_groups }}\"\n\n  - name: Deregister instance from all target groups\n    delegate_to: localhost\n    community.aws.elb_target:\n        target_group_arn: \"{{ item.0.target_group_arn }}\"\n        target_port: \"{{ item.1.target_port }}\"\n        target_az: \"{{ item.1.target_az }}\"\n        target_id: \"{{ item.1.target_id }}\"\n        state: absent\n        target_status: \"draining\"\n        region: \"{{ ansible_ec2_placement_region }}\"\n    with_subelements:\n      - \"{{ original_tgs }}\"\n      - \"targets\"\n\n    # This avoids having to wait for 'elb_target' to serially deregister each\n    # target group.  An alternative would be to run all of the 'elb_target'\n    # tasks async and wait for them to finish.\n\n  - name: wait for all targets to deregister simultaneously\n    delegate_to: localhost\n    community.aws.elb_target_info:\n      get_unused_target_groups: false\n      instance_id: \"{{ ansible_ec2_instance_id }}\"\n      region: \"{{ ansible_ec2_placement_region }}\"\n    register: target_info\n    until: (target_info.instance_target_groups | length) == 0\n    retries: 60\n    delay: 10\n\n  - name: reregister in elbv2s\n    community.aws.elb_target:\n      region: \"{{ ansible_ec2_placement_region }}\"\n      target_group_arn: \"{{ item.0.target_group_arn }}\"\n      target_port: \"{{ item.1.target_port }}\"\n      target_az: \"{{ item.1.target_az }}\"\n      target_id: \"{{ item.1.target_id }}\"\n      state: present\n      target_status: \"initial\"\n    with_subelements:\n      - \"{{ original_tgs }}\"\n      - \"targets\"\n\n  # wait until all groups associated with this instance are 'healthy' or\n  # 'unused'\n  - name: wait for registration\n    community.aws.elb_target_info:\n      get_unused_target_groups: false\n      instance_id: \"{{ ansible_ec2_instance_id }}\"\n      region: \"{{ ansible_ec2_placement_region }}\"\n    register: target_info\n    until: (target_info.instance_target_groups |\n            map(attribute='targets') |\n            flatten |\n            map(attribute='target_health') |\n            rejectattr('state', 'equalto', 'healthy') |\n            rejectattr('state', 'equalto', 'unused') |\n            list |\n            length) == 0\n    retries: 61\n    delay: 10\n\n# using the target groups to generate AWS CLI commands to reregister the\n# instance - useful in case the playbook fails mid-run and manual\n#            rollback is required\n  - name: \"reregistration commands: ELBv2s\"\n    ansible.builtin.debug:\n      msg: >\n             aws --region {{ansible_ec2_placement_region}} elbv2\n             register-targets --target-group-arn {{item.target_group_arn}}\n             --targets{%for target in item.targets%}\n             Id={{target.target_id}},\n             Port={{target.target_port}}{%if target.target_az%},AvailabilityZone={{target.target_az}}\n             {%endif%}\n             {%endfor%}\n    loop: \"{{target_info.instance_target_groups}}\"\n\n",
        "metadata": null,
        "return": {
            "instance_target_groups": {
                "contains": {
                    "target_group_arn": {
                        "description": "The ARN of the target group",
                        "returned": "always",
                        "sample": [
                            "arn:aws:elasticloadbalancing:eu-west-1:111111111111:targetgroup/target-group/deadbeefdeadbeef"
                        ],
                        "type": "str"
                    },
                    "target_group_type": {
                        "description": "Which target type is used for this group",
                        "returned": "always",
                        "sample": [
                            "ip",
                            "instance"
                        ],
                        "type": "str"
                    },
                    "targets": {
                        "contains": {
                            "target_az": {
                                "description": "which availability zone is explicitly associated with this target",
                                "returned": "when an AZ is associated with this instance",
                                "sample": [
                                    "us-west-2a"
                                ],
                                "type": "str"
                            },
                            "target_health": {
                                "contains": {
                                    "description": {
                                        "description": "description of target health",
                                        "returned": "if I(state!=present)",
                                        "sample": [
                                            "Target desregistration is in progress"
                                        ],
                                        "type": "str"
                                    },
                                    "reason": {
                                        "description": "reason code for target health",
                                        "returned": "if I(state!=healthy)",
                                        "sample": [
                                            "Target.Deregistration in progress"
                                        ],
                                        "type": "str"
                                    },
                                    "state": {
                                        "description": "health state",
                                        "returned": "always",
                                        "sample": [
                                            "healthy",
                                            "draining",
                                            "initial",
                                            "unhealthy",
                                            "unused",
                                            "unavailable"
                                        ],
                                        "type": "str"
                                    }
                                },
                                "description": [
                                    "The target health description.",
                                    "See following link for all the possible values U(https://boto3.readthedocs.io/en/latest/reference/services/elbv2.html#ElasticLoadBalancingv2.Client.describe_target_health)"
                                ],
                                "returned": "always",
                                "type": "complex"
                            },
                            "target_id": {
                                "description": "the target ID referring to this instance",
                                "returned": "always",
                                "sample": [
                                    "i-deadbeef",
                                    "1.2.3.4"
                                ],
                                "type": "str"
                            },
                            "target_port": {
                                "description": "which port this target is listening on",
                                "returned": "always",
                                "sample": [
                                    80
                                ],
                                "type": "str"
                            }
                        },
                        "description": "A list of targets that point to this instance ID",
                        "returned": "always",
                        "type": "complex"
                    }
                },
                "description": "a list of target groups to which the instance is registered to",
                "returned": "always",
                "type": "complex"
            }
        }
    }
}
