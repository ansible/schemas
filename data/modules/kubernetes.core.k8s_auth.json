{
    "kubernetes.core.k8s_auth": {
        "doc": {
            "author": "KubeVirt Team (@kubevirt)",
            "collection": "kubernetes.core",
            "description": [
                "This module handles authenticating to Kubernetes clusters requiring I(explicit) authentication procedures, meaning ones where a client logs in (obtains an authentication token), performs API operations using said token and then logs out (revokes the token). An example of a Kubernetes distribution requiring this module is OpenShift.",
                "On the other hand a popular configuration for username+password authentication is one utilizing HTTP Basic Auth, which does not involve any additional login/logout steps (instead login credentials can be attached to each and every API call performed) and as such is handled directly by the C(k8s) module (and other resource\u2013specific modules) by utilizing the C(host), C(username) and C(password) parameters. Please consult your preferred module's documentation for more details."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/kubernetes/core/plugins/modules/k8s_auth.py",
            "has_action": true,
            "module": "k8s_auth",
            "options": {
                "api_key": {
                    "description": [
                        "When C(state) is set to I(absent), this specifies the token to revoke."
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_ca_cert"
                    ],
                    "description": [
                        "Path to a CA certificate file used to verify connection to the API server. The full certificate chain must be provided to avoid certificate validation errors."
                    ],
                    "type": "path"
                },
                "host": {
                    "description": [
                        "Provide a URL for accessing the API server."
                    ],
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Provide a password for authenticating with the API server."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "If set to I(present) connect to the API server using the URL specified in C(host) and attempt to log in.",
                        "If set to I(absent) attempt to log out by revoking the authentication token specified in C(api_key)."
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Provide a username for authenticating with the API server."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "default": true,
                    "description": [
                        "Whether or not to verify the API server's SSL certificates."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.7",
                "urllib3",
                "requests",
                "requests-oauthlib"
            ],
            "short_description": "Authenticate to Kubernetes clusters which require an explicit login step"
        },
        "examples": "\n- hosts: localhost\n  module_defaults:\n    group/k8s:\n      host: https://k8s.example.com/\n      ca_cert: ca.pem\n  tasks:\n  - block:\n    # It's good practice to store login credentials in a secure vault and not\n    # directly in playbooks.\n    - include_vars: k8s_passwords.yml\n\n    - name: Log in (obtain access token)\n      kubernetes.core.k8s_auth:\n        username: admin\n        password: \"{{ k8s_admin_password }}\"\n      register: k8s_auth_results\n\n    # Previous task provides the token/api_key, while all other parameters\n    # are taken from module_defaults\n    - name: Get a list of all pods from any namespace\n      kubernetes.core.k8s_info:\n        api_key: \"{{ k8s_auth_results.k8s_auth.api_key }}\"\n        kind: Pod\n      register: pod_list\n\n    always:\n    - name: If login succeeded, try to log out (revoke access token)\n      when: k8s_auth_results.k8s_auth.api_key is defined\n      kubernetes.core.k8s_auth:\n        state: absent\n        api_key: \"{{ k8s_auth_results.k8s_auth.api_key }}\"\n",
        "metadata": null,
        "return": {
            "k8s_auth": {
                "contains": {
                    "api_key": {
                        "description": "Authentication token.",
                        "returned": "success",
                        "type": "str"
                    },
                    "ca_cert": {
                        "description": "Path to a CA certificate file used to verify connection to the API server.",
                        "returned": "success",
                        "type": "str"
                    },
                    "host": {
                        "description": "URL for accessing the API server.",
                        "returned": "success",
                        "type": "str"
                    },
                    "username": {
                        "description": "Username for authenticating with the API server.",
                        "returned": "success",
                        "type": "str"
                    },
                    "validate_certs": {
                        "description": "Whether or not to verify the API server's SSL certificates.",
                        "returned": "success",
                        "type": "bool"
                    }
                },
                "description": "Kubernetes authentication facts.",
                "returned": "success",
                "type": "complex"
            }
        }
    }
}
