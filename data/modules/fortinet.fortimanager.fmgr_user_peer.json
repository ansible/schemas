{
    "fortinet.fortimanager.fmgr_user_peer": {
        "doc": {
            "author": [
                "Link Zheng (@chillancezen)",
                "Jie Xue (@JieX19)",
                "Frank Shen (@fshen01)",
                "Hongbin Lu (@fgtdev-hblu)"
            ],
            "collection": "fortinet.fortimanager",
            "description": [
                "This module is able to configure a FortiManager device.",
                "Examples include all parameters and values which need to be adjusted to data sources before usage."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/fortinet/fortimanager/plugins/modules/fmgr_user_peer.py",
            "has_action": false,
            "module": "fmgr_user_peer",
            "notes": [
                "Running in workspace locking mode is supported in this FortiManager module, the top level parameters workspace_locking_adom and workspace_locking_timeout help do the work.",
                "To create or update an object, use state present directive.",
                "To delete an object, use state absent directive.",
                "Normally, running one module can fail when a non-zero rc is returned. you can also override the conditions to fail or succeed with parameters rc_failed and rc_succeeded"
            ],
            "options": {
                "adom": {
                    "description": "the parameter (adom) in requested url",
                    "required": true,
                    "type": "str"
                },
                "bypass_validation": {
                    "default": false,
                    "description": "only set to True when module schema diffs with FortiManager API structure, module continues to execute without validating parameters",
                    "required": false,
                    "type": "bool"
                },
                "rc_failed": {
                    "description": "the rc codes list with which the conditions to fail will be overriden",
                    "required": false,
                    "type": "list"
                },
                "rc_succeeded": {
                    "description": "the rc codes list with which the conditions to succeed will be overriden",
                    "required": false,
                    "type": "list"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": "the directive to create, update or delete an object",
                    "required": true,
                    "type": "str"
                },
                "user_peer": {
                    "description": "the top level parameters set",
                    "required": false,
                    "suboptions": {
                        "ca": {
                            "description": "Name of the CA certificate as returned by the execute vpn certificate ca list command.",
                            "type": "str"
                        },
                        "cn": {
                            "description": "Peer certificate common name.",
                            "type": "str"
                        },
                        "cn-type": {
                            "choices": [
                                "string",
                                "email",
                                "FQDN",
                                "ipv4",
                                "ipv6"
                            ],
                            "description": "Peer certificate common name type.",
                            "type": "str"
                        },
                        "ldap-mode": {
                            "choices": [
                                "password",
                                "principal-name"
                            ],
                            "description": "Mode for LDAP peer authentication.",
                            "type": "str"
                        },
                        "ldap-password": {
                            "description": "no description",
                            "type": "str"
                        },
                        "ldap-server": {
                            "description": "Name of an LDAP server defined under the user ldap command. Performs client access rights check.",
                            "type": "str"
                        },
                        "ldap-username": {
                            "description": "Username for LDAP server bind.",
                            "type": "str"
                        },
                        "mandatory-ca-verify": {
                            "choices": [
                                "disable",
                                "enable"
                            ],
                            "description": "Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certific...",
                            "type": "str"
                        },
                        "name": {
                            "description": "Peer name.",
                            "type": "str"
                        },
                        "ocsp-override-server": {
                            "description": "Online Certificate Status Protocol (OCSP) server for certificate retrieval.",
                            "type": "str"
                        },
                        "passwd": {
                            "description": "no description",
                            "type": "str"
                        },
                        "subject": {
                            "description": "Peer certificate name constraints.",
                            "type": "str"
                        },
                        "two-factor": {
                            "choices": [
                                "disable",
                                "enable"
                            ],
                            "description": "Enable/disable two-factor authentication, applying certificate and password-based authentication.",
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "workspace_locking_adom": {
                    "description": "the adom to lock for FortiManager running in workspace mode, the value can be global and others including root",
                    "required": false,
                    "type": "str"
                },
                "workspace_locking_timeout": {
                    "default": 300,
                    "description": "the maximum time in seconds to wait for other user to release the workspace lock",
                    "required": false,
                    "type": "int"
                }
            },
            "short_description": "Configure peer users.",
            "version_added": "2.10",
            "version_added_collection": "fortinet.fortimanager"
        },
        "examples": "\n - hosts: fortimanager-inventory\n   collections:\n     - fortinet.fortimanager\n   connection: httpapi\n   vars:\n      ansible_httpapi_use_ssl: True\n      ansible_httpapi_validate_certs: False\n      ansible_httpapi_port: 443\n   tasks:\n    - name: Configure peer users.\n      fmgr_user_peer:\n         bypass_validation: False\n         workspace_locking_adom: <value in [global, custom adom including root]>\n         workspace_locking_timeout: 300\n         rc_succeeded: [0, -2, -3, ...]\n         rc_failed: [-2, -3, ...]\n         adom: <your own value>\n         state: <value in [present, absent]>\n         user_peer:\n            ca: <value of string>\n            cn: <value of string>\n            cn-type: <value in [string, email, FQDN, ...]>\n            ldap-mode: <value in [password, principal-name]>\n            ldap-password: <value of string>\n            ldap-server: <value of string>\n            ldap-username: <value of string>\n            mandatory-ca-verify: <value in [disable, enable]>\n            name: <value of string>\n            ocsp-override-server: <value of string>\n            passwd: <value of string>\n            subject: <value of string>\n            two-factor: <value in [disable, enable]>\n\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": {
            "request_url": {
                "description": "The full url requested",
                "returned": "always",
                "sample": "/sys/login/user",
                "type": "str"
            },
            "response_code": {
                "description": "The status of api request",
                "returned": "always",
                "sample": 0,
                "type": "int"
            },
            "response_message": {
                "description": "The descriptive message of the api response",
                "returned": "always",
                "sample": "OK.",
                "type": "str"
            }
        }
    }
}
