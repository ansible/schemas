{
    "openstack.cloud.os_nova_flavor": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Add or remove flavors from OpenStack."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/compute_flavor.py",
            "has_action": false,
            "module": "compute_flavor",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "disk": {
                    "default": 0,
                    "description": [
                        "Size of local disk, in GB."
                    ],
                    "type": "int"
                },
                "ephemeral": {
                    "default": 0,
                    "description": [
                        "Ephemeral space size, in GB."
                    ],
                    "type": "int"
                },
                "extra_specs": {
                    "description": [
                        "Metadata dictionary"
                    ],
                    "type": "dict"
                },
                "flavorid": {
                    "default": "auto",
                    "description": [
                        "ID for the flavor. This is optional as a unique UUID will be assigned if a value is not specified."
                    ],
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "is_public": {
                    "default": "yes",
                    "description": [
                        "Make flavor accessible to the public."
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "Flavor name."
                    ],
                    "required": true,
                    "type": "str"
                },
                "ram": {
                    "description": [
                        "Amount of memory, in MB."
                    ],
                    "type": "int"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "rxtx_factor": {
                    "default": 1.0,
                    "description": [
                        "RX/TX factor."
                    ],
                    "type": "float"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Indicate desired state of the resource. When I(state) is 'present', then I(ram), I(vcpus), and I(disk) are all required. There are no default values for those parameters."
                    ],
                    "type": "str"
                },
                "swap": {
                    "default": 0,
                    "description": [
                        "Swap space size, in MB."
                    ],
                    "type": "int"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "How long should ansible wait for the requested resource."
                    ],
                    "type": "int"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "vcpus": {
                    "description": [
                        "Number of virtual CPUs."
                    ],
                    "type": "int"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Manage OpenStack compute flavors"
        },
        "examples": "\n- name: \"Create 'tiny' flavor with 1024MB of RAM, 1 virtual CPU, and 10GB of local disk, and 10GB of ephemeral.\"\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: present\n    name: tiny\n    ram: 1024\n    vcpus: 1\n    disk: 10\n    ephemeral: 10\n\n- name: \"Delete 'tiny' flavor\"\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: absent\n    name: tiny\n\n- name: Create flavor with metadata\n  openstack.cloud.compute_flavor:\n    cloud: mycloud\n    state: present\n    name: tiny\n    ram: 1024\n    vcpus: 1\n    disk: 10\n    extra_specs:\n      \"quota:disk_read_iops_sec\": 5000\n      \"aggregate_instance_extra_specs:pinned\": false\n",
        "metadata": null,
        "return": {
            "flavor": {
                "contains": {
                    "disk": {
                        "description": "Size of local disk, in GB.",
                        "returned": "success",
                        "sample": 10,
                        "type": "int"
                    },
                    "ephemeral": {
                        "description": "Ephemeral space size, in GB.",
                        "returned": "success",
                        "sample": 10,
                        "type": "int"
                    },
                    "extra_specs": {
                        "description": "Flavor metadata",
                        "returned": "success",
                        "sample": {
                            "aggregate_instance_extra_specs:pinned": false,
                            "quota:disk_read_iops_sec": 5000
                        },
                        "type": "dict"
                    },
                    "id": {
                        "description": "Flavor ID.",
                        "returned": "success",
                        "sample": "515256b8-7027-4d73-aa54-4e30a4a4a339",
                        "type": "str"
                    },
                    "is_public": {
                        "description": "Make flavor accessible to the public.",
                        "returned": "success",
                        "sample": true,
                        "type": "bool"
                    },
                    "name": {
                        "description": "Flavor name.",
                        "returned": "success",
                        "sample": "tiny",
                        "type": "str"
                    },
                    "ram": {
                        "description": "Amount of memory, in MB.",
                        "returned": "success",
                        "sample": 1024,
                        "type": "int"
                    },
                    "swap": {
                        "description": "Swap space size, in MB.",
                        "returned": "success",
                        "sample": 100,
                        "type": "int"
                    },
                    "vcpus": {
                        "description": "Number of virtual CPUs.",
                        "returned": "success",
                        "sample": 2,
                        "type": "int"
                    }
                },
                "description": "Dictionary describing the flavor.",
                "returned": "On success when I(state) is 'present'",
                "type": "complex"
            }
        }
    }
}
