{
    "community.crypto.acme_challenge_cert_helper": {
        "doc": {
            "author": "Felix Fontein (@felixfontein)",
            "collection": "community.crypto",
            "description": [
                "Prepares certificates for ACME challenges such as C(tls-alpn-01).",
                "The raw data is provided by the M(community.crypto.acme_certificate) module, and needs to be converted to a certificate to be used for challenge validation. This module provides a simple way to generate the required certificates."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/crypto/plugins/modules/acme_challenge_cert_helper.py",
            "has_action": false,
            "module": "acme_challenge_cert_helper",
            "notes": [
                "Does not support C(check_mode)."
            ],
            "options": {
                "challenge": {
                    "choices": [
                        "tls-alpn-01"
                    ],
                    "description": [
                        "The challenge type."
                    ],
                    "required": true,
                    "type": "str"
                },
                "challenge_data": {
                    "description": [
                        "The C(challenge_data) entry provided by M(community.crypto.acme_certificate) for the challenge."
                    ],
                    "required": true,
                    "type": "dict"
                },
                "private_key_content": {
                    "description": [
                        "Content of the private key to use for this challenge certificate.",
                        "Mutually exclusive with C(private_key_src)."
                    ],
                    "type": "str"
                },
                "private_key_passphrase": {
                    "description": [
                        "Phassphrase to use to decode the private key."
                    ],
                    "type": "str",
                    "version_added": "1.6.0",
                    "version_added_collection": "community.crypto"
                },
                "private_key_src": {
                    "description": [
                        "Path to a file containing the private key file to use for this challenge certificate.",
                        "Mutually exclusive with C(private_key_content)."
                    ],
                    "type": "path"
                }
            },
            "requirements": [
                "cryptography >= 1.3"
            ],
            "seealso": [
                {
                    "description": "The specification of the ACME protocol (RFC 8555).",
                    "link": "https://tools.ietf.org/html/rfc8555",
                    "name": "Automatic Certificate Management Environment (ACME)"
                },
                {
                    "description": "The specification of the C(tls-alpn-01) challenge (RFC 8737).",
                    "link": "https://www.rfc-editor.org/rfc/rfc8737.html",
                    "name": "ACME TLS ALPN Challenge Extension"
                }
            ],
            "short_description": "Prepare certificates required for ACME challenges such as C(tls-alpn-01)"
        },
        "examples": "\n- name: Create challenges for a given CRT for sample.com\n  community.crypto.acme_certificate:\n    account_key_src: /etc/pki/cert/private/account.key\n    challenge: tls-alpn-01\n    csr: /etc/pki/cert/csr/sample.com.csr\n    dest: /etc/httpd/ssl/sample.com.crt\n  register: sample_com_challenge\n\n- name: Create certificates for challenges\n  community.crypto.acme_challenge_cert_helper:\n    challenge: tls-alpn-01\n    challenge_data: \"{{ item.value['tls-alpn-01'] }}\"\n    private_key_src: /etc/pki/cert/key/sample.com.key\n  loop: \"{{ sample_com_challenge.challenge_data | dictsort }}\"\n  register: sample_com_challenge_certs\n\n- name: Install challenge certificates\n  # We need to set up HTTPS such that for the domain,\n  # regular_certificate is delivered for regular connections,\n  # except if ALPN selects the \"acme-tls/1\"; then, the\n  # challenge_certificate must be delivered.\n  # This can for example be achieved with very new versions\n  # of NGINX; search for ssl_preread and\n  # ssl_preread_alpn_protocols for information on how to\n  # route by ALPN protocol.\n  ...:\n    domain: \"{{ item.domain }}\"\n    challenge_certificate: \"{{ item.challenge_certificate }}\"\n    regular_certificate: \"{{ item.regular_certificate }}\"\n    private_key: /etc/pki/cert/key/sample.com.key\n  loop: \"{{ sample_com_challenge_certs.results }}\"\n\n- name: Create certificate for a given CSR for sample.com\n  community.crypto.acme_certificate:\n    account_key_src: /etc/pki/cert/private/account.key\n    challenge: tls-alpn-01\n    csr: /etc/pki/cert/csr/sample.com.csr\n    dest: /etc/httpd/ssl/sample.com.crt\n    data: \"{{ sample_com_challenge }}\"\n",
        "metadata": null,
        "return": {
            "challenge_certificate": {
                "description": [
                    "The challenge certificate in PEM format."
                ],
                "returned": "always",
                "type": "str"
            },
            "domain": {
                "description": [
                    "The domain the challenge is for. The certificate should be provided if this is specified in the request's the C(Host) header."
                ],
                "returned": "always",
                "type": "str"
            },
            "identifier": {
                "description": [
                    "The identifier for the actual resource. Will be a domain name if the type is C(dns), or an IP address if the type is C(ip)."
                ],
                "returned": "always",
                "type": "str"
            },
            "identifier_type": {
                "description": [
                    "The identifier type for the actual resource identifier. Will be C(dns) or C(ip)."
                ],
                "returned": "always",
                "type": "str"
            },
            "regular_certificate": {
                "description": [
                    "A self-signed certificate for the challenge domain.",
                    "If no existing certificate exists, can be used to set-up https in the first place if that is needed for providing the challenge."
                ],
                "returned": "always",
                "type": "str"
            }
        }
    }
}
