{
    "community.kubernetes.helm_info": {
        "doc": {
            "author": [
                "Lucas Boisserie (@LucasBoisserie)"
            ],
            "collection": "community.kubernetes",
            "description": [
                "Get information (values, states, ...) from Helm package deployed inside the cluster."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/kubernetes/plugins/modules/helm_info.py",
            "has_action": true,
            "module": "helm_info",
            "options": {
                "api_key": {
                    "description": [
                        "Token used to authenticate with the API. Can also be specified via C(K8S_AUTH_API_KEY) environment variable."
                    ],
                    "type": "str",
                    "version_added": "1.2.0",
                    "version_added_collection": "community.kubernetes"
                },
                "binary_path": {
                    "description": [
                        "The path of a helm binary to use."
                    ],
                    "required": false,
                    "type": "path"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_ca_cert"
                    ],
                    "description": [
                        "Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be specified via C(K8S_AUTH_SSL_CA_CERT) environment variable."
                    ],
                    "type": "path",
                    "version_added": "1.2.0",
                    "version_added_collection": "community.kubernetes"
                },
                "context": {
                    "aliases": [
                        "kube_context"
                    ],
                    "description": [
                        "Helm option to specify which kubeconfig context to use.",
                        "If the value is not specified in the task, the value of environment variable C(K8S_AUTH_CONTEXT) will be used instead."
                    ],
                    "type": "str"
                },
                "host": {
                    "description": [
                        "Provide a URL for accessing the API. Can also be specified via C(K8S_AUTH_HOST) environment variable."
                    ],
                    "type": "str",
                    "version_added": "1.2.0",
                    "version_added_collection": "community.kubernetes"
                },
                "kubeconfig": {
                    "aliases": [
                        "kubeconfig_path"
                    ],
                    "description": [
                        "Helm option to specify kubeconfig path to use.",
                        "If the value is not specified in the task, the value of environment variable C(K8S_AUTH_KUBECONFIG) will be used instead."
                    ],
                    "type": "path"
                },
                "release_name": {
                    "aliases": [
                        "name"
                    ],
                    "description": [
                        "Release name to manage."
                    ],
                    "required": true,
                    "type": "str"
                },
                "release_namespace": {
                    "aliases": [
                        "namespace"
                    ],
                    "description": [
                        "Kubernetes namespace where the chart should be installed."
                    ],
                    "required": true,
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "default": true,
                    "description": [
                        "Whether or not to verify the API server's SSL certificates. Can also be specified via C(K8S_AUTH_VERIFY_SSL) environment variable."
                    ],
                    "type": "bool",
                    "version_added": "1.2.0",
                    "version_added_collection": "community.kubernetes"
                }
            },
            "requirements": [
                "helm (https://github.com/helm/helm/releases)",
                "yaml (https://pypi.org/project/PyYAML/)"
            ],
            "short_description": "Get information from Helm package deployed inside the cluster",
            "version_added": "0.11.0",
            "version_added_collection": "community.kubernetes"
        },
        "examples": "\n- name: Deploy latest version of Grafana chart inside monitoring namespace\n  community.kubernetes.helm_info:\n    name: test\n    release_namespace: monitoring\n",
        "metadata": null,
        "return": {
            "status": {
                "contains": {
                    "appversion": {
                        "description": "Version of app deployed",
                        "returned": "always",
                        "type": "str"
                    },
                    "chart": {
                        "description": "Chart name and chart version",
                        "returned": "always",
                        "type": "str"
                    },
                    "name": {
                        "description": "Name of the release",
                        "returned": "always",
                        "type": "str"
                    },
                    "namespace": {
                        "description": "Namespace where the release is deployed",
                        "returned": "always",
                        "type": "str"
                    },
                    "revision": {
                        "description": "Number of time where the release has been updated",
                        "returned": "always",
                        "type": "str"
                    },
                    "status": {
                        "description": "Status of release (can be DEPLOYED, FAILED, ...)",
                        "returned": "always",
                        "type": "str"
                    },
                    "updated": {
                        "description": "The Date of last update",
                        "returned": "always",
                        "type": "str"
                    },
                    "values": {
                        "description": "Dict of Values used to deploy",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "A dictionary of status output",
                "returned": "only when release exists",
                "type": "complex"
            }
        }
    }
}
