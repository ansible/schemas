{
    "community.vmware.vmware_host_firewall_manager": {
        "doc": {
            "author": [
                "Abhijeet Kasurde (@Akasurde)",
                "Aaron Longchamps (@alongchamps)"
            ],
            "collection": "community.vmware",
            "description": [
                "This module can be used to manage firewall configurations about an ESXi host when ESXi hostname or Cluster name is given."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/community/vmware/plugins/modules/vmware_host_firewall_manager.py",
            "has_action": false,
            "module": "vmware_host_firewall_manager",
            "notes": [
                "Tested on vSphere 6.0, vSphere 6.5"
            ],
            "options": {
                "cluster_name": {
                    "description": [
                        "Name of the cluster.",
                        "Firewall settings are applied to every ESXi host system in given cluster.",
                        "If C(esxi_hostname) is not given, this parameter is required."
                    ],
                    "type": "str"
                },
                "esxi_hostname": {
                    "description": [
                        "ESXi hostname.",
                        "Firewall settings are applied to this ESXi host system.",
                        "If C(cluster_name) is not given, this parameter is required."
                    ],
                    "type": "str"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "password": {
                    "aliases": [
                        "pass",
                        "pwd"
                    ],
                    "description": [
                        "The password of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "port": {
                    "default": 443,
                    "description": [
                        "The port number of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "int"
                },
                "proxy_host": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them.",
                        "The format is a hostname or a IP.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
                        "This feature depends on a version of pyvmomi greater than v6.7.1.2018.12"
                    ],
                    "required": false,
                    "type": "str"
                },
                "proxy_port": {
                    "description": [
                        "Port of the HTTP proxy that will receive all HTTPS requests and relay them.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead."
                    ],
                    "required": false,
                    "type": "int"
                },
                "rules": {
                    "default": [],
                    "description": [
                        "A list of Rule set which needs to be managed.",
                        "Each member of list is rule set name and state to be set the rule.",
                        "Both rule name and rule state are required parameters.",
                        "Additional IPs and networks can also be specified",
                        "Please see examples for more information."
                    ],
                    "type": "list"
                },
                "username": {
                    "aliases": [
                        "admin",
                        "user"
                    ],
                    "description": [
                        "The username of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
                        "Environment variable support added in Ansible 2.6.",
                        "If set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "PyVmomi"
            ],
            "short_description": "Manage firewall configurations about an ESXi host"
        },
        "examples": "\n- name: Enable vvold rule set for all ESXi Host in given Cluster\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    cluster_name: cluster_name\n    rules:\n        - name: vvold\n          enabled: True\n  delegate_to: localhost\n\n- name: Enable vvold rule set for an ESXi Host\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    rules:\n        - name: vvold\n          enabled: True\n  delegate_to: localhost\n\n- name: Manage multiple rule set for an ESXi Host\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    rules:\n        - name: vvold\n          enabled: True\n        - name: CIMHttpServer\n          enabled: False\n  delegate_to: localhost\n\n- name: Manage IP and network based firewall permissions for ESXi\n  community.vmware.vmware_host_firewall_manager:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    esxi_hostname: '{{ esxi_hostname }}'\n    rules:\n        - name: gdbserver\n          enabled: True\n          allowed_hosts:\n            all_ip: False\n            ip_address:\n              - 192.168.20.10\n              - 192.168.20.11\n        - name: CIMHttpServer\n          enabled: True\n          allowed_hosts:\n            all_ip: False\n            ip_network:\n              - 192.168.100.0/24\n        - name: remoteSerialPort\n          enabled: True\n          allowed_hosts:\n            all_ip: False\n            ip_address:\n              - 192.168.100.11\n            ip_network:\n              - 192.168.200.0/24\n  delegate_to: localhost\n",
        "metadata": null,
        "return": {
            "rule_set_state": {
                "description": [
                    "dict with hostname as key and dict with firewall rule set facts as value"
                ],
                "returned": "success",
                "sample": {
                    "rule_set_state": {
                        "localhost.localdomain": {
                            "CIMHttpServer": {
                                "allowed_hosts": {
                                    "current_allowed_all": true,
                                    "current_allowed_ip": [],
                                    "current_allowed_networks": [],
                                    "desired_allowed_all": true,
                                    "desired_allowed_ip": [],
                                    "desired_allowed_networks": [],
                                    "previous_allowed_all": true,
                                    "previous_allowed_ip": [],
                                    "previous_allowed_networks": []
                                },
                                "current_state": false,
                                "desired_state": false,
                                "previous_state": true
                            },
                            "remoteSerialPort": {
                                "allowed_hosts": {
                                    "current_allowed_all": false,
                                    "current_allowed_ip": [
                                        "192.168.100.11"
                                    ],
                                    "current_allowed_networks": [
                                        "192.168.200.0/24"
                                    ],
                                    "desired_allowed_all": false,
                                    "desired_allowed_ip": [
                                        "192.168.100.11"
                                    ],
                                    "desired_allowed_networks": [
                                        "192.168.200.0/24"
                                    ],
                                    "previous_allowed_all": true,
                                    "previous_allowed_ip": [],
                                    "previous_allowed_networks": []
                                },
                                "current_state": true,
                                "desired_state": true,
                                "previous_state": true
                            }
                        }
                    }
                },
                "type": "dict"
            }
        }
    }
}
