{
    "community.general.xml": {
        "doc": {
            "author": [
                "Tim Bielawa (@tbielawa)",
                "Magnus Hedemark (@magnus919)",
                "Dag Wieers (@dagwieers)"
            ],
            "collection": "community.general",
            "description": [
                "A CRUD-like interface to managing bits of XML files."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/xml.py",
            "has_action": false,
            "module": "xml",
            "notes": [
                "Use the C(--check) and C(--diff) options when testing your expressions.",
                "The diff output is automatically pretty-printed, so may not reflect the actual file content, only the file structure.",
                "This module does not handle complicated xpath expressions, so limit xpath selectors to simple expressions.",
                "Beware that in case your XML elements are namespaced, you need to use the C(namespaces) parameter, see the examples.",
                "Namespaces prefix should be used for all children of an element where namespace is defined, unless another namespace is defined for them."
            ],
            "options": {
                "add_children": {
                    "description": [
                        "Add additional child-element(s) to a selected element for a given C(xpath).",
                        "Child elements must be given in a list and each item may be either a string (eg. C(children=ansible) to add an empty C(<ansible/>) child element), or a hash where the key is an element name and the value is the element value.",
                        "This parameter requires C(xpath) to be set."
                    ],
                    "elements": "raw",
                    "type": "list"
                },
                "attribute": {
                    "description": [
                        "The attribute to select when using parameter C(value).",
                        "This is a string, not prepended with C(@)."
                    ],
                    "type": "raw"
                },
                "backup": {
                    "default": false,
                    "description": [
                        "Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly."
                    ],
                    "type": "bool"
                },
                "content": {
                    "choices": [
                        "attribute",
                        "text"
                    ],
                    "description": [
                        "Search for a given C(xpath) and get content.",
                        "This parameter requires C(xpath) to be set."
                    ],
                    "type": "str"
                },
                "count": {
                    "default": false,
                    "description": [
                        "Search for a given C(xpath) and provide the count of any matches.",
                        "This parameter requires C(xpath) to be set."
                    ],
                    "type": "bool"
                },
                "input_type": {
                    "choices": [
                        "xml",
                        "yaml"
                    ],
                    "default": "yaml",
                    "description": [
                        "Type of input for C(add_children) and C(set_children)."
                    ],
                    "type": "str"
                },
                "insertafter": {
                    "default": false,
                    "description": [
                        "Add additional child-element(s) after the last selected element for a given C(xpath).",
                        "Child elements must be given in a list and each item may be either a string (eg. C(children=ansible) to add an empty C(<ansible/>) child element), or a hash where the key is an element name and the value is the element value.",
                        "This parameter requires C(xpath) to be set."
                    ],
                    "type": "bool"
                },
                "insertbefore": {
                    "default": false,
                    "description": [
                        "Add additional child-element(s) before the first selected element for a given C(xpath).",
                        "Child elements must be given in a list and each item may be either a string (eg. C(children=ansible) to add an empty C(<ansible/>) child element), or a hash where the key is an element name and the value is the element value.",
                        "This parameter requires C(xpath) to be set."
                    ],
                    "type": "bool"
                },
                "namespaces": {
                    "description": [
                        "The namespace C(prefix:uri) mapping for the XPath expression.",
                        "Needs to be a C(dict), not a C(list) of items."
                    ],
                    "type": "dict"
                },
                "path": {
                    "aliases": [
                        "dest",
                        "file"
                    ],
                    "description": [
                        "Path to the file to operate on.",
                        "This file must exist ahead of time.",
                        "This parameter is required, unless C(xmlstring) is given."
                    ],
                    "type": "path"
                },
                "pretty_print": {
                    "default": false,
                    "description": [
                        "Pretty print XML output."
                    ],
                    "type": "bool"
                },
                "print_match": {
                    "default": false,
                    "description": [
                        "Search for a given C(xpath) and print out any matches.",
                        "This parameter requires C(xpath) to be set."
                    ],
                    "type": "bool"
                },
                "set_children": {
                    "description": [
                        "Set the child-element(s) of a selected element for a given C(xpath).",
                        "Removes any existing children.",
                        "Child elements must be specified as in C(add_children).",
                        "This parameter requires C(xpath) to be set."
                    ],
                    "elements": "raw",
                    "type": "list"
                },
                "state": {
                    "aliases": [
                        "ensure"
                    ],
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Set or remove an xpath selection (node(s), attribute(s))."
                    ],
                    "type": "str"
                },
                "strip_cdata_tags": {
                    "default": false,
                    "description": [
                        "Remove CDATA tags surrounding text values.",
                        "Note that this might break your XML file if text values contain characters that could be interpreted as XML."
                    ],
                    "type": "bool"
                },
                "value": {
                    "description": [
                        "Desired state of the selected attribute.",
                        "Either a string, or to unset a value, the Python C(None) keyword (YAML Equivalent, C(null)).",
                        "Elements default to no value (but present).",
                        "Attributes default to an empty string."
                    ],
                    "type": "raw"
                },
                "xmlstring": {
                    "description": [
                        "A string containing XML on which to operate.",
                        "This parameter is required, unless C(path) is given."
                    ],
                    "type": "str"
                },
                "xpath": {
                    "description": [
                        "A valid XPath expression describing the item(s) you want to manipulate.",
                        "Operates on the document root, C(/), by default."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "lxml >= 2.3.0"
            ],
            "seealso": [
                {
                    "description": "More information related to the development of this xml module.",
                    "link": "https://github.com/ansible/community/wiki/Module:-xml",
                    "name": "Xml module development community wiki"
                },
                {
                    "description": "A brief tutorial on XPath (w3schools.com).",
                    "link": "https://www.w3schools.com/xml/xpath_intro.asp",
                    "name": "Introduction to XPath"
                },
                {
                    "description": "The reference documentation on XSLT/XPath (developer.mozilla.org).",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/XPath",
                    "name": "XPath Reference document"
                }
            ],
            "short_description": "Manage bits and pieces of XML files or strings"
        },
        "examples": "\n# Consider the following XML file:\n#\n# <business type=\"bar\">\n#   <name>Tasty Beverage Co.</name>\n#     <beers>\n#       <beer>Rochefort 10</beer>\n#       <beer>St. Bernardus Abbot 12</beer>\n#       <beer>Schlitz</beer>\n#    </beers>\n#   <rating subjective=\"true\">10</rating>\n#   <website>\n#     <mobilefriendly/>\n#     <address>http://tastybeverageco.com</address>\n#   </website>\n# </business>\n\n- name: Remove the 'subjective' attribute of the 'rating' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/rating/@subjective\n    state: absent\n\n- name: Set the rating to '11'\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/rating\n    value: 11\n\n# Retrieve and display the number of nodes\n- name: Get count of 'beers' nodes\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/beers/beer\n    count: yes\n  register: hits\n\n- ansible.builtin.debug:\n    var: hits.count\n\n# Example where parent XML nodes are created automatically\n- name: Add a 'phonenumber' element to the 'business' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/phonenumber\n    value: 555-555-1234\n\n- name: Add several more beers to the 'beers' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/beers\n    add_children:\n    - beer: Old Rasputin\n    - beer: Old Motor Oil\n    - beer: Old Curmudgeon\n\n- name: Add several more beers to the 'beers' element and add them before the 'Rochefort 10' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: '/business/beers/beer[text()=\"Rochefort 10\"]'\n    insertbefore: yes\n    add_children:\n    - beer: Old Rasputin\n    - beer: Old Motor Oil\n    - beer: Old Curmudgeon\n\n# NOTE: The 'state' defaults to 'present' and 'value' defaults to 'null' for elements\n- name: Add a 'validxhtml' element to the 'website' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml\n\n- name: Add an empty 'validatedon' attribute to the 'validxhtml' element\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml/@validatedon\n\n- name: Add or modify an attribute, add element if needed\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml\n    attribute: validatedon\n    value: 1976-08-05\n\n# How to read an attribute value and access it in Ansible\n- name: Read an element's attribute values\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/validxhtml\n    content: attribute\n  register: xmlresp\n\n- name: Show an attribute value\n  ansible.builtin.debug:\n    var: xmlresp.matches[0].validxhtml.validatedon\n\n- name: Remove all children from the 'website' element (option 1)\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website/*\n    state: absent\n\n- name: Remove all children from the 'website' element (option 2)\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business/website\n    children: []\n\n# In case of namespaces, like in below XML, they have to be explicitly stated.\n#\n# <foo xmlns=\"http://x.test\" xmlns:attr=\"http://z.test\">\n#   <bar>\n#     <baz xmlns=\"http://y.test\" attr:my_namespaced_attribute=\"true\" />\n#   </bar>\n# </foo>\n\n# NOTE: There is the prefix 'x' in front of the 'bar' element, too.\n- name: Set namespaced '/x:foo/x:bar/y:baz/@z:my_namespaced_attribute' to 'false'\n  community.general.xml:\n    path: foo.xml\n    xpath: /x:foo/x:bar/y:baz\n    namespaces:\n      x: http://x.test\n      y: http://y.test\n      z: http://z.test\n    attribute: z:my_namespaced_attribute\n    value: 'false'\n\n- name: Adding building nodes with floor subnodes from a YAML variable\n  community.general.xml:\n    path: /foo/bar.xml\n    xpath: /business\n    add_children:\n      - building:\n          # Attributes\n          name: Scumm bar\n          location: Monkey island\n          # Subnodes\n          _:\n            - floor: Pirate hall\n            - floor: Grog storage\n            - construction_date: \"1990\"  # Only strings are valid\n      - building: Grog factory\n",
        "metadata": null,
        "return": {
            "actions": {
                "description": "A dictionary with the original xpath, namespaces and state.",
                "returned": "success",
                "sample": {
                    "namespaces": [
                        "namespace1",
                        "namespace2"
                    ],
                    "state=present": null,
                    "xpath": "xpath"
                },
                "type": "dict"
            },
            "backup_file": {
                "description": "The name of the backup file that was created",
                "returned": "when backup=yes",
                "sample": "/path/to/file.xml.1942.2017-08-24@14:16:01~",
                "type": "str"
            },
            "count": {
                "description": "The count of xpath matches.",
                "returned": "when parameter 'count' is set",
                "sample": 2,
                "type": "int"
            },
            "matches": {
                "description": "The xpath matches found.",
                "returned": "when parameter 'print_match' is set",
                "type": "list"
            },
            "msg": {
                "description": "A message related to the performed action(s).",
                "returned": "always",
                "type": "str"
            },
            "xmlstring": {
                "description": "An XML string of the resulting output.",
                "returned": "when parameter 'xmlstring' is set",
                "type": "str"
            }
        }
    }
}
