{
    "community.general.xcc_redfish_command": {
        "doc": {
            "author": "Yuyan Pan (@panyy3)",
            "collection": "community.general",
            "description": [
                "Builds Redfish URIs locally and sends them to remote OOB controllers to perform an action or get information back or update a configuration attribute.",
                "Manages virtual media.",
                "Supports getting information back via GET method.",
                "Supports updating a configuration attribute via PATCH method.",
                "Supports performing an action via POST method."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/xcc_redfish_command.py",
            "has_action": false,
            "module": "xcc_redfish_command",
            "options": {
                "auth_token": {
                    "description": [
                        "Security token for authentication with OOB controller"
                    ],
                    "type": "str"
                },
                "baseuri": {
                    "description": [
                        "Base URI of OOB controller."
                    ],
                    "required": true,
                    "type": "str"
                },
                "category": {
                    "description": [
                        "Category to execute on OOB controller."
                    ],
                    "required": true,
                    "type": "str"
                },
                "command": {
                    "description": [
                        "List of commands to execute on OOB controller."
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "password": {
                    "description": [
                        "Password for authentication with OOB controller."
                    ],
                    "type": "str"
                },
                "request_body": {
                    "description": [
                        "The request body to patch or post."
                    ],
                    "required": false,
                    "type": "dict"
                },
                "resource_id": {
                    "description": [
                        "The ID of the System, Manager or Chassis to modify."
                    ],
                    "required": false,
                    "type": "str"
                },
                "resource_uri": {
                    "description": [
                        "The resource uri to get or patch or post."
                    ],
                    "required": false,
                    "type": "str"
                },
                "timeout": {
                    "default": 10,
                    "description": [
                        "Timeout in seconds for URL requests to OOB controller."
                    ],
                    "type": "int"
                },
                "username": {
                    "description": [
                        "Username for authentication with OOB controller."
                    ],
                    "type": "str"
                },
                "virtual_media": {
                    "description": [
                        "The options for VirtualMedia commands."
                    ],
                    "required": false,
                    "suboptions": {
                        "image_url": {
                            "description": [
                                "The URL of the image to insert or eject."
                            ],
                            "type": "str"
                        },
                        "inserted": {
                            "default": true,
                            "description": [
                                "Indicates if the image is treated as inserted on command completion."
                            ],
                            "type": "bool"
                        },
                        "media_types": {
                            "description": [
                                "The list of media types appropriate for the image."
                            ],
                            "elements": "str",
                            "type": "list"
                        },
                        "password": {
                            "description": [
                                "The password for accessing the image URL."
                            ],
                            "type": "str"
                        },
                        "transfer_method": {
                            "description": [
                                "The transfer method to use with the image."
                            ],
                            "type": "str"
                        },
                        "transfer_protocol_type": {
                            "description": [
                                "The network protocol to use with the image."
                            ],
                            "type": "str"
                        },
                        "username": {
                            "description": [
                                "The username for accessing the image URL."
                            ],
                            "type": "str"
                        },
                        "write_protected": {
                            "default": true,
                            "description": [
                                "Indicates if the media is treated as write-protected."
                            ],
                            "type": "bool"
                        }
                    },
                    "type": "dict"
                }
            },
            "short_description": "Manages Lenovo Out-Of-Band controllers using Redfish APIs",
            "version_added": "2.4.0",
            "version_added_collection": "community.general"
        },
        "examples": "\n  - name: Insert Virtual Media\n    community.general.xcc_redfish_command:\n      category: Manager\n      command: VirtualMediaInsert\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      virtual_media:\n        image_url: \"http://example.com/images/SomeLinux-current.iso\"\n        media_types:\n          - CD\n          - DVD\n      resource_id: \"1\"\n\n  - name: Eject Virtual Media\n    community.general.xcc_redfish_command:\n      category: Manager\n      command: VirtualMediaEject\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      virtual_media:\n        image_url: \"http://example.com/images/SomeLinux-current.iso\"\n      resource_id: \"1\"\n\n  - name: Eject all Virtual Media\n    community.general.xcc_redfish_command:\n      category: Manager\n      command: VirtualMediaEject\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_id: \"1\"\n\n  - name: Get ComputeSystem Oem property SystemStatus via GetResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: GetResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1\"\n    register: result\n  - ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.data.Oem.Lenovo.SystemStatus }}\"\n\n  - name: Get Oem DNS setting via GetResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: GetResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Managers/1/NetworkProtocol/Oem/Lenovo/DNS\"\n    register: result\n  - ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.data }}\"\n\n  - name: Get Lenovo FoD key collection resource via GetCollectionResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: GetCollectionResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Managers/1/Oem/Lenovo/FoD/Keys\"\n    register: result\n  - ansible.builtin.debug:\n      msg: \"{{ result.redfish_facts.data_list }}\"\n\n  - name: Update ComputeSystem property AssetTag via PatchResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PatchResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1\"\n      request_body:\n        AssetTag: \"new_asset_tag\"\n\n  - name: Perform BootToBIOSSetup action via PostResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PostResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1/Actions/Oem/LenovoComputerSystem.BootToBIOSSetup\"\n      request_body: {}\n\n  - name: Perform SecureBoot.ResetKeys action via PostResource command\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PostResource\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      resource_uri: \"/redfish/v1/Systems/1/SecureBoot/Actions/SecureBoot.ResetKeys\"\n      request_body:\n        ResetKeysType: DeleteAllKeys\n\n  - name: Create session\n    community.general.redfish_command:\n      category: Sessions\n      command: CreateSession\n      baseuri: \"{{ baseuri }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n    register: result\n\n  - name: Update Manager DateTimeLocalOffset property using security token for auth\n    community.general.xcc_redfish_command:\n      category: Raw\n      command: PatchResource\n      baseuri: \"{{ baseuri }}\"\n      auth_token: \"{{ result.session.token }}\"\n      resource_uri: \"/redfish/v1/Managers/1\"\n      request_body:\n        DateTimeLocalOffset: \"+08:00\"\n\n  - name: Delete session using security token created by CreateSesssion above\n    community.general.redfish_command:\n      category: Sessions\n      command: DeleteSession\n      baseuri: \"{{ baseuri }}\"\n      auth_token: \"{{ result.session.token }}\"\n      session_uri: \"{{ result.session.uri }}\"\n",
        "metadata": null,
        "return": {
            "msg": {
                "description": "A message related to the performed action(s).",
                "returned": "when failure or action/update success",
                "sample": "Action was successful",
                "type": "str"
            },
            "redfish_facts": {
                "description": "Resource content.",
                "returned": "when command == GetResource or command == GetCollectionResource",
                "sample": "{ \"redfish_facts\": { \"data\": { \"@odata.etag\": \"\"3179bf00d69f25a8b3c\"\", \"@odata.id\": \"/redfish/v1/Managers/1/NetworkProtocol/Oem/Lenovo/DNS\", \"@odata.type\": \"#LenovoDNS.v1_0_0.LenovoDNS\", \"DDNS\": [ { \"DDNSEnable\": true, \"DomainName\": \"\", \"DomainNameSource\": \"DHCP\" } ], \"DNSEnable\": true, \"Description\": \"This resource is used to represent a DNS resource for a Redfish implementation.\", \"IPv4Address1\": \"10.103.62.178\", \"IPv4Address2\": \"0.0.0.0\", \"IPv4Address3\": \"0.0.0.0\", \"IPv6Address1\": \"::\", \"IPv6Address2\": \"::\", \"IPv6Address3\": \"::\", \"Id\": \"LenovoDNS\", \"PreferredAddresstype\": \"IPv4\" }, \"ret\": true } }",
                "type": "dict"
            }
        }
    }
}
