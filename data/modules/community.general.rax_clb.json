{
    "community.general.rax_clb": {
        "doc": {
            "author": [
                "Christopher H. Laco (@claco)",
                "Matt Martz (@sivel)"
            ],
            "collection": "community.general",
            "description": [
                "creates / deletes a Rackspace Public Cloud load balancer."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/rax_clb.py",
            "has_action": false,
            "module": "rax_clb",
            "notes": [
                "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).",
                "C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)",
                "C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file",
                "C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
                "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).",
                "C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)",
                "C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file",
                "C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)"
            ],
            "options": {
                "algorithm": {
                    "choices": [
                        "RANDOM",
                        "LEAST_CONNECTIONS",
                        "ROUND_ROBIN",
                        "WEIGHTED_LEAST_CONNECTIONS",
                        "WEIGHTED_ROUND_ROBIN"
                    ],
                    "default": "LEAST_CONNECTIONS",
                    "description": [
                        "algorithm for the balancer being created"
                    ],
                    "type": "str"
                },
                "api_key": {
                    "aliases": [
                        "password"
                    ],
                    "description": [
                        "Rackspace API key, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "auth_endpoint": {
                    "description": [
                        "The URI of the authentication service.",
                        "If not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)"
                    ],
                    "type": "str"
                },
                "credentials": {
                    "aliases": [
                        "creds_file"
                    ],
                    "description": [
                        "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided."
                    ],
                    "type": "path"
                },
                "env": {
                    "description": [
                        "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration)."
                    ],
                    "type": "str"
                },
                "identity_type": {
                    "default": "rackspace",
                    "description": [
                        "Authentication mechanism to use, such as rackspace or keystone."
                    ],
                    "type": "str"
                },
                "meta": {
                    "description": [
                        "A hash of metadata to associate with the instance"
                    ],
                    "type": "dict"
                },
                "name": {
                    "description": [
                        "Name to give the load balancer"
                    ],
                    "required": true,
                    "type": "str"
                },
                "port": {
                    "default": 80,
                    "description": [
                        "Port for the balancer being created"
                    ],
                    "type": "int"
                },
                "protocol": {
                    "choices": [
                        "DNS_TCP",
                        "DNS_UDP",
                        "FTP",
                        "HTTP",
                        "HTTPS",
                        "IMAPS",
                        "IMAPv4",
                        "LDAP",
                        "LDAPS",
                        "MYSQL",
                        "POP3",
                        "POP3S",
                        "SMTP",
                        "TCP",
                        "TCP_CLIENT_FIRST",
                        "UDP",
                        "UDP_STREAM",
                        "SFTP"
                    ],
                    "default": "HTTP",
                    "description": [
                        "Protocol for the balancer being created"
                    ],
                    "type": "str"
                },
                "region": {
                    "description": [
                        "Region to create an instance in."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Indicate desired state of the resource"
                    ],
                    "type": "str"
                },
                "tenant_id": {
                    "description": [
                        "The tenant ID used for authentication."
                    ],
                    "type": "str"
                },
                "tenant_name": {
                    "description": [
                        "The tenant name used for authentication."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 30,
                    "description": [
                        "timeout for communication between the balancer and the node"
                    ],
                    "type": "int"
                },
                "type": {
                    "choices": [
                        "PUBLIC",
                        "SERVICENET"
                    ],
                    "default": "PUBLIC",
                    "description": [
                        "type of interface for the balancer being created"
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Rackspace username, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "description": [
                        "Whether or not to require SSL validation of API endpoints."
                    ],
                    "type": "bool"
                },
                "vip_id": {
                    "description": [
                        "Virtual IP ID to use when creating the load balancer for purposes of sharing an IP with another load balancer of another protocol"
                    ],
                    "type": "str"
                },
                "wait": {
                    "default": "no",
                    "description": [
                        "wait for the balancer to be in state 'running' before returning"
                    ],
                    "type": "bool"
                },
                "wait_timeout": {
                    "default": 300,
                    "description": [
                        "how long before wait gives up, in seconds"
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "pyrax",
                "python >= 2.6"
            ],
            "short_description": "create / delete a load balancer in Rackspace Public Cloud"
        },
        "examples": "\n- name: Build a Load Balancer\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n    - name: Load Balancer create request\n      local_action:\n        module: rax_clb\n        credentials: ~/.raxpub\n        name: my-lb\n        port: 8080\n        protocol: HTTP\n        type: SERVICENET\n        timeout: 30\n        region: DFW\n        wait: yes\n        state: present\n        meta:\n          app: my-cool-app\n      register: my_lb\n",
        "metadata": null,
        "return": null
    }
}
