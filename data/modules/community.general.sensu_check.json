{
    "community.general.sensu_check": {
        "doc": {
            "author": "Anders Ingemann (@andsens)",
            "collection": "community.general",
            "description": [
                "Manage the checks that should be run on a machine by I(Sensu).",
                "Most options do not have a default and will not be added to the check definition unless specified.",
                "All defaults except I(path), I(state), I(backup) and I(metric) are not managed by this module,",
                "they are simply specified for your convenience."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/sensu_check.py",
            "has_action": false,
            "module": "sensu_check",
            "options": {
                "aggregate": {
                    "description": [
                        "Classifies the check as an aggregate check,",
                        "making it available via the aggregate API",
                        "Default is C(false)."
                    ],
                    "type": "bool"
                },
                "backup": {
                    "default": "no",
                    "description": [
                        "Create a backup file (if yes), including the timestamp information so",
                        "you can get the original file back if you somehow clobbered it incorrectly."
                    ],
                    "type": "bool"
                },
                "command": {
                    "description": [
                        "Path to the sensu check to run (not required when I(state=absent))"
                    ],
                    "type": "str"
                },
                "custom": {
                    "default": {},
                    "description": [
                        "A hash/dictionary of custom parameters for mixing to the configuration.",
                        "You can't rewrite others module parameters using this"
                    ],
                    "type": "dict"
                },
                "dependencies": {
                    "default": [],
                    "description": [
                        "Other checks this check depends on, if dependencies fail handling of this check will be disabled"
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "handle": {
                    "description": [
                        "Whether the check should be handled or not",
                        "Default is C(false)."
                    ],
                    "type": "bool"
                },
                "handlers": {
                    "default": [],
                    "description": [
                        "List of handlers to notify when the check fails"
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "high_flap_threshold": {
                    "description": [
                        "The high threshold for flap detection"
                    ],
                    "type": "int"
                },
                "interval": {
                    "description": [
                        "Check interval in seconds"
                    ],
                    "type": "int"
                },
                "low_flap_threshold": {
                    "description": [
                        "The low threshold for flap detection"
                    ],
                    "type": "int"
                },
                "metric": {
                    "default": "no",
                    "description": [
                        "Whether the check is a metric"
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "The name of the check",
                        "This is the key that is used to determine whether a check exists"
                    ],
                    "required": true,
                    "type": "str"
                },
                "occurrences": {
                    "description": [
                        "Number of event occurrences before the handler should take action",
                        "If not specified, defaults to 1."
                    ],
                    "type": "int"
                },
                "path": {
                    "default": "/etc/sensu/conf.d/checks.json",
                    "description": [
                        "Path to the json file of the check to be added/removed.",
                        "Will be created if it does not exist (unless I(state=absent)).",
                        "The parent folders need to exist when I(state=present), otherwise an error will be thrown"
                    ],
                    "type": "str"
                },
                "publish": {
                    "description": [
                        "Whether the check should be scheduled at all.",
                        "You can still issue it via the sensu api",
                        "Default is C(false)."
                    ],
                    "type": "bool"
                },
                "refresh": {
                    "description": [
                        "Number of seconds handlers should wait before taking second action"
                    ],
                    "type": "int"
                },
                "source": {
                    "description": [
                        "The check source, used to create a JIT Sensu client for an external resource (e.g. a network switch)."
                    ],
                    "type": "str"
                },
                "standalone": {
                    "description": [
                        "Whether the check should be scheduled by the sensu client or server",
                        "This option obviates the need for specifying the I(subscribers) option",
                        "Default is C(false)."
                    ],
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Whether the check should be present or not"
                    ],
                    "type": "str"
                },
                "subdue_begin": {
                    "description": [
                        "When to disable handling of check failures"
                    ],
                    "type": "str"
                },
                "subdue_end": {
                    "description": [
                        "When to enable handling of check failures"
                    ],
                    "type": "str"
                },
                "subscribers": {
                    "default": [],
                    "description": [
                        "List of subscribers/channels this check should run for",
                        "See sensu_subscribers to subscribe a machine to a channel"
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "timeout": {
                    "description": [
                        "Timeout for the check",
                        "If not specified, it defaults to 10."
                    ],
                    "type": "int"
                },
                "ttl": {
                    "description": [
                        "Time to live in seconds until the check is considered stale"
                    ],
                    "type": "int"
                }
            },
            "short_description": "Manage Sensu checks"
        },
        "examples": "\n# Fetch metrics about the CPU load every 60 seconds,\n# the sensu server has a handler called 'relay' which forwards stats to graphite\n- name: Get cpu metrics\n  community.general.sensu_check:\n    name: cpu_load\n    command: /etc/sensu/plugins/system/cpu-mpstat-metrics.rb\n    metric: yes\n    handlers: relay\n    subscribers: common\n    interval: 60\n\n# Check whether nginx is running\n- name: Check nginx process\n  community.general.sensu_check:\n    name: nginx_running\n    command: /etc/sensu/plugins/processes/check-procs.rb -f /var/run/nginx.pid\n    handlers: default\n    subscribers: nginx\n    interval: 60\n\n# Stop monitoring the disk capacity.\n# Note that the check will still show up in the sensu dashboard,\n# to remove it completely you need to issue a DELETE request to the sensu api.\n- name: Check disk\n  community.general.sensu_check:\n    name: check_disk_capacity\n    state: absent\n",
        "metadata": null,
        "return": null
    }
}
