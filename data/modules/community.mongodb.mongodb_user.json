{
    "community.mongodb.mongodb_user": {
        "doc": {
            "author": [
                "Elliott Foster (@elliotttf)",
                "Julien Thebault (@Lujeni)"
            ],
            "collection": "community.mongodb",
            "description": [
                "Adds or removes a user from a MongoDB database."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mongodb/plugins/modules/mongodb_user.py",
            "has_action": false,
            "module": "mongodb_user",
            "notes": [
                "Requires the pymongo Python package on the remote host, version 2.4.2+. This can be installed using pip or the OS package manager. Newer mongo server versions require newer pymongo versions. @see http://api.mongodb.org/python/current/installation.html"
            ],
            "options": {
                "auth_mechanism": {
                    "choices": [
                        "SCRAM-SHA-256",
                        "SCRAM-SHA-1",
                        "MONGODB-X509",
                        "GSSAPI",
                        "PLAIN"
                    ],
                    "description": [
                        "Authentication type."
                    ],
                    "required": false,
                    "type": "str"
                },
                "connection_options": {
                    "description": [
                        "Additional connection options.",
                        "Supply as a list of dicts or strings containing key value pairs seperated with '='."
                    ],
                    "elements": "raw",
                    "required": false,
                    "type": "list"
                },
                "create_for_localhost_exception": {
                    "description": [
                        "This is parmeter is only useful for handling special treatment around the localhost exception.",
                        "If C(login_user) is defined, then the localhost exception is not active and this parameter has no effect.",
                        "If this file is NOT present (and C(login_user) is not defined), then touch this file after successfully adding the user.",
                        "If this file is present (and C(login_user) is not defined), then skip this task."
                    ],
                    "type": "path"
                },
                "database": {
                    "aliases": [
                        "db"
                    ],
                    "description": [
                        "The name of the database to add/remove the user from."
                    ],
                    "required": true,
                    "type": "str"
                },
                "login_database": {
                    "default": "admin",
                    "description": [
                        "The database where login credentials are stored."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "The host running MongoDB instance to login to."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with.",
                        "Required when I(login_user) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "login_port": {
                    "default": 27017,
                    "description": [
                        "The MongoDB server port to login to."
                    ],
                    "required": false,
                    "type": "int"
                },
                "login_user": {
                    "description": [
                        "The MongoDB user to login with.",
                        "Required when I(login_password) is specified."
                    ],
                    "required": false,
                    "type": "str"
                },
                "name": {
                    "aliases": [
                        "user"
                    ],
                    "description": [
                        "The name of the user to add or remove."
                    ],
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "aliases": [
                        "pass"
                    ],
                    "description": [
                        "The password to use for the user."
                    ],
                    "type": "str"
                },
                "replica_set": {
                    "description": [
                        "Replica set to connect to (automatically connects to primary for writes)."
                    ],
                    "type": "str"
                },
                "roles": {
                    "description": [
                        "The database user roles valid values could either be one or more of the following strings: 'read', 'readWrite', 'dbAdmin', 'userAdmin', 'clusterAdmin', 'readAnyDatabase', 'readWriteAnyDatabase', 'userAdminAnyDatabase', 'dbAdminAnyDatabase'\n",
                        "Or the following dictionary '{ db: DATABASE_NAME, role: ROLE_NAME }'.",
                        "This param requires pymongo 2.5+. If it is a string, mongodb 2.4+ is also required. If it is a dictionary, mongo 2.6+ is required."
                    ],
                    "elements": "raw",
                    "type": "list"
                },
                "ssl": {
                    "default": false,
                    "description": [
                        "Whether to use an SSL connection when connecting to the database."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "ssl_ca_certs": {
                    "description": [
                        "The ssl_ca_certs option takes a path to a CA file."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_cert_reqs": {
                    "choices": [
                        "CERT_NONE",
                        "CERT_OPTIONAL",
                        "CERT_REQUIRED"
                    ],
                    "default": "CERT_REQUIRED",
                    "description": [
                        "Specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_certfile": {
                    "description": [
                        "Present a client certificate using the ssl_certfile option."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_crlfile": {
                    "description": [
                        "The ssl_crlfile option takes a path to a CRL file."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_keyfile": {
                    "description": [
                        "Private key for the client certificate."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ssl_pem_passphrase": {
                    "description": [
                        "Passphrase to decrypt encrypted private keys."
                    ],
                    "required": false,
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "The database user state."
                    ],
                    "type": "str"
                },
                "update_password": {
                    "choices": [
                        "always",
                        "on_create"
                    ],
                    "default": "always",
                    "description": [
                        "C(always) will always update passwords and cause the module to return changed.",
                        "C(on_create) will only set the password for newly created users.",
                        "This must be C(always) to use the localhost exception when adding the first admin user."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "pymongo"
            ],
            "short_description": "Adds or removes a user from a MongoDB database",
            "version_added": "1.0.0",
            "version_added_collection": "community.mongodb"
        },
        "examples": "\n- name: Create 'burgers' database user with name 'bob' and password '12345'.\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    password: 12345\n    state: present\n\n- name: Create a database user via SSL (MongoDB must be compiled with the SSL option and configured properly)\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    password: 12345\n    state: present\n    ssl: True\n\n- name: Delete 'burgers' database user with name 'bob'.\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    state: absent\n\n- name: Define more users with various specific roles (if not defined, no roles is assigned, and the user will be added via pre mongo 2.2 style)\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: ben\n    password: 12345\n    roles: read\n    state: present\n\n- name: Define roles\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: jim\n    password: 12345\n    roles: readWrite,dbAdmin,userAdmin\n    state: present\n\n- name: Define roles\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: joe\n    password: 12345\n    roles: readWriteAnyDatabase\n    state: present\n\n- name: Add a user to database in a replica set, the primary server is automatically discovered and written to\n  community.mongodb.mongodb_user:\n    database: burgers\n    name: bob\n    replica_set: belcher\n    password: 12345\n    roles: readWriteAnyDatabase\n    state: present\n\n# add a user 'oplog_reader' with read only access to the 'local' database on the replica_set 'belcher'. This is useful for oplog access (MONGO_OPLOG_URL).\n# please notice the credentials must be added to the 'admin' database because the 'local' database is not synchronized and can't receive user credentials\n# To login with such user, the connection string should be MONGO_OPLOG_URL=\"mongodb://oplog_reader:oplog_reader_password@server1,server2/local?authSource=admin\"\n# This syntax requires mongodb 2.6+ and pymongo 2.5+\n- name: Roles as a dictionary\n  community.mongodb.mongodb_user:\n    login_user: root\n    login_password: root_password\n    database: admin\n    user: oplog_reader\n    password: oplog_reader_password\n    state: present\n    replica_set: belcher\n    roles:\n      - db: local\n        role: read\n\n- name: Adding a user with X.509 Member Authentication\n  community.mongodb.mongodb_user:\n    login_host: \"mongodb-host.test\"\n    login_port: 27001\n    login_database: \"$external\"\n    database: \"admin\"\n    name: \"admin\"\n    password: \"test\"\n    roles:\n    - dbAdminAnyDatabase\n    ssl: true\n    ssl_ca_certs: \"/tmp/ca.crt\"\n    ssl_certfile: \"/tmp/tls.key\" #cert and key in one file\n    state: present\n    auth_mechanism: \"MONGODB-X509\"\n    connection_options:\n     - \"tlsAllowInvalidHostnames=true\"\n",
        "metadata": null,
        "return": {
            "user": {
                "description": "The name of the user to add or remove.",
                "returned": "success",
                "type": "str"
            }
        }
    }
}
