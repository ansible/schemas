{
    "community.aws.cloudwatchevent_rule": {
        "doc": {
            "author": "Jim Dalton (@jsdalton) <jim.dalton@gmail.com>",
            "collection": "community.aws",
            "description": [
                "This module creates and manages CloudWatch event rules and targets."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/cloudwatchevent_rule.py",
            "has_action": false,
            "module": "cloudwatchevent_rule",
            "notes": [
                "A rule must contain at least an I(event_pattern) or I(schedule_expression). A rule can have both an I(event_pattern) and a I(schedule_expression), in which case the rule will trigger on matching events as well as on a schedule.",
                "When specifying targets, I(input) and I(input_path) are mutually-exclusive and optional parameters.",
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "description": {
                    "description": [
                        "A description of the rule."
                    ],
                    "required": false,
                    "type": "str"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "event_pattern": {
                    "description": [
                        "A string pattern (in valid JSON format) that is used to match against incoming events to determine if the rule should be triggered."
                    ],
                    "required": false,
                    "type": "str"
                },
                "name": {
                    "description": [
                        "The name of the rule you are creating, updating or deleting. No spaces or special characters allowed (i.e. must match C([\\.\\-_A-Za-z0-9]+))."
                    ],
                    "required": true,
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "role_arn": {
                    "description": [
                        "The Amazon Resource Name (ARN) of the IAM role associated with the rule."
                    ],
                    "required": false,
                    "type": "str"
                },
                "schedule_expression": {
                    "description": [
                        "A cron or rate expression that defines the schedule the rule will trigger on. For example, C(cron(0 20 * * ? *)), C(rate(5 minutes))."
                    ],
                    "required": false,
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "disabled",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Whether the rule is present (and enabled), disabled, or absent."
                    ],
                    "required": false,
                    "type": "str"
                },
                "targets": {
                    "description": [
                        "A list of targets to add to or update for the rule."
                    ],
                    "elements": "dict",
                    "required": false,
                    "suboptions": {
                        "arn": {
                            "description": "The ARN associated with the target.",
                            "required": true,
                            "type": "str"
                        },
                        "ecs_parameters": {
                            "description": [
                                "Contains the ECS task definition and task count to be used, if the event target is an ECS task."
                            ],
                            "suboptions": {
                                "task_count": {
                                    "description": "The number of tasks to create based on I(task_definition).",
                                    "type": "int"
                                },
                                "task_definition_arn": {
                                    "description": "The full ARN of the task definition.",
                                    "type": "str"
                                }
                            },
                            "type": "dict"
                        },
                        "id": {
                            "description": "The unique target assignment ID.",
                            "required": true,
                            "type": "str"
                        },
                        "input": {
                            "description": [
                                "A JSON object that will override the event data when passed to the target.",
                                "If neither I(input) nor I(input_path) is specified, then the entire event is passed to the target in JSON form."
                            ],
                            "type": "str"
                        },
                        "input_path": {
                            "description": [
                                "A JSONPath string (e.g. C($.detail)) that specifies the part of the event data to be passed to the target.",
                                "If neither I(input) nor I(input_path) is specified, then the entire event is passed to the target in JSON form."
                            ],
                            "type": "str"
                        },
                        "role_arn": {
                            "description": "The ARN of the IAM role to be used for this target when the rule is triggered.",
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Manage CloudWatch Event rules and targets",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n- community.aws.cloudwatchevent_rule:\n    name: MyCronTask\n    schedule_expression: \"cron(0 20 * * ? *)\"\n    description: Run my scheduled task\n    targets:\n      - id: MyTargetId\n        arn: arn:aws:lambda:us-east-1:123456789012:function:MyFunction\n\n- community.aws.cloudwatchevent_rule:\n    name: MyDisabledCronTask\n    schedule_expression: \"rate(5 minutes)\"\n    description: Run my disabled scheduled task\n    state: disabled\n    targets:\n      - id: MyOtherTargetId\n        arn: arn:aws:lambda:us-east-1:123456789012:function:MyFunction\n        input: '{\"foo\": \"bar\"}'\n\n- community.aws.cloudwatchevent_rule:\n    name: MyCronTask\n    state: absent\n",
        "metadata": null,
        "return": {
            "rule": {
                "description": "CloudWatch Event rule data.",
                "returned": "success",
                "sample": {
                    "arn": "arn:aws:events:us-east-1:123456789012:rule/MyCronTask",
                    "description": "Run my scheduled task",
                    "name": "MyCronTask",
                    "schedule_expression": "cron(0 20 * * ? *)",
                    "state": "ENABLED"
                },
                "type": "dict"
            },
            "targets": {
                "description": "CloudWatch Event target(s) assigned to the rule.",
                "returned": "success",
                "sample": "[{ 'arn': 'arn:aws:lambda:us-east-1:123456789012:function:MyFunction', 'id': 'MyTargetId' }]",
                "type": "list"
            }
        }
    }
}
