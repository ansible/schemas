{
    "community.general.gitlab_project": {
        "doc": {
            "author": [
                "Werner Dijkerman (@dj-wasabi)",
                "Guillaume Martinez (@Lunik)"
            ],
            "collection": "community.general",
            "description": [
                "When the project does not exist in GitLab, it will be created.",
                "When the project does exists and I(state=absent), the project will be deleted.",
                "When changes are made to the project, the project will be updated."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/gitlab_project.py",
            "has_action": false,
            "module": "gitlab_project",
            "options": {
                "api_password": {
                    "description": [
                        "The password to use for authentication against the API"
                    ],
                    "type": "str"
                },
                "api_token": {
                    "description": [
                        "GitLab token for logging in."
                    ],
                    "type": "str"
                },
                "api_url": {
                    "description": [
                        "The resolvable endpoint for the API"
                    ],
                    "type": "str"
                },
                "api_username": {
                    "description": [
                        "The username to use for authentication against the API"
                    ],
                    "type": "str"
                },
                "description": {
                    "description": [
                        "An description for the project."
                    ],
                    "type": "str"
                },
                "group": {
                    "description": [
                        "Id or the full path of the group of which this projects belongs to."
                    ],
                    "type": "str"
                },
                "import_url": {
                    "description": [
                        "Git repository which will be imported into gitlab.",
                        "GitLab server needs read access to this git repository."
                    ],
                    "required": false,
                    "type": "str"
                },
                "issues_enabled": {
                    "default": true,
                    "description": [
                        "Whether you want to create issues or not.",
                        "Possible values are true and false."
                    ],
                    "type": "bool"
                },
                "lfs_enabled": {
                    "default": false,
                    "description": [
                        "Enable Git large file systems to manages large files such as audio, video, and graphics files."
                    ],
                    "required": false,
                    "type": "bool",
                    "version_added": "2.0.0",
                    "version_added_collection": "community.general"
                },
                "merge_method": {
                    "choices": [
                        "ff",
                        "merge",
                        "rebase_merge"
                    ],
                    "default": "merge",
                    "description": [
                        "What requirements are placed upon merges.",
                        "Possible values are C(merge), C(rebase_merge) merge commit with semi-linear history, C(ff) fast-forward merges only."
                    ],
                    "type": "str",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.general"
                },
                "merge_requests_enabled": {
                    "default": true,
                    "description": [
                        "If merge requests can be made or not.",
                        "Possible values are true and false."
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "The name of the project."
                    ],
                    "required": true,
                    "type": "str"
                },
                "path": {
                    "description": [
                        "The path of the project you want to create, this will be server_url/<group>/path.",
                        "If not supplied, name will be used."
                    ],
                    "type": "str"
                },
                "snippets_enabled": {
                    "default": true,
                    "description": [
                        "If creating snippets should be available or not."
                    ],
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Create or delete project.",
                        "Possible values are present and absent."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Whether or not to validate SSL certs when supplying a https endpoint."
                    ],
                    "type": "bool"
                },
                "visibility": {
                    "aliases": [
                        "visibility_level"
                    ],
                    "choices": [
                        "private",
                        "internal",
                        "public"
                    ],
                    "default": "private",
                    "description": [
                        "C(private) Project access must be granted explicitly for each user.",
                        "C(internal) The project can be cloned by any logged in user.",
                        "C(public) The project can be cloned without any authentication."
                    ],
                    "type": "str"
                },
                "wiki_enabled": {
                    "default": true,
                    "description": [
                        "If an wiki for this project should be available or not."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.7",
                "python-gitlab python module"
            ],
            "short_description": "Creates/updates/deletes GitLab Projects"
        },
        "examples": "\n- name: Create GitLab Project\n  community.general.gitlab_project:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ api_token }}\"\n    name: my_first_project\n    group: \"10481470\"\n\n- name: Delete GitLab Project\n  community.general.gitlab_project:\n    api_url: https://gitlab.example.com/\n    api_token: \"{{ access_token }}\"\n    validate_certs: False\n    name: my_first_project\n    state: absent\n  delegate_to: localhost\n\n- name: Create GitLab Project in group Ansible\n  community.general.gitlab_project:\n    api_url: https://gitlab.example.com/\n    validate_certs: True\n    api_username: dj-wasabi\n    api_password: \"MySecretPassword\"\n    name: my_first_project\n    group: ansible\n    issues_enabled: False\n    merge_method: rebase_merge\n    wiki_enabled: True\n    snippets_enabled: True\n    import_url: http://git.example.com/example/lab.git\n    state: present\n  delegate_to: localhost\n",
        "metadata": null,
        "return": {
            "error": {
                "description": "the error message returned by the GitLab API.",
                "returned": "failed",
                "sample": "400: path is already in use",
                "type": "str"
            },
            "msg": {
                "description": "Success or failure message.",
                "returned": "always",
                "sample": "Success",
                "type": "str"
            },
            "project": {
                "description": "API object.",
                "returned": "always",
                "type": "dict"
            },
            "result": {
                "description": "json parsed response from the server.",
                "returned": "always",
                "type": "dict"
            }
        }
    }
}
