{
    "amazon.aws.aws_s3": {
        "doc": {
            "author": [
                "Lester Wade (@lwade)",
                "Sloane Hertel (@s-hertel)"
            ],
            "collection": "amazon.aws",
            "description": [
                "This module allows the user to manage S3 buckets and the objects within them. Includes support for creating and deleting both objects and buckets, retrieving objects as files or strings and generating download links. This module has a dependency on boto3 and botocore."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/amazon/aws/plugins/modules/aws_s3.py",
            "has_action": true,
            "module": "aws_s3",
            "notes": [
                "In 2.4, this module has been renamed from C(s3) into M(aws_s3).",
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "bucket": {
                    "description": [
                        "Bucket name."
                    ],
                    "required": true,
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "dest": {
                    "description": [
                        "The destination file path when downloading an object/key with a GET operation."
                    ],
                    "type": "path"
                },
                "dualstack": {
                    "default": false,
                    "description": [
                        "Enables Amazon S3 Dual-Stack Endpoints, allowing S3 communications using both IPv4 and IPv6.",
                        "Requires at least botocore version 1.4.45."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "encrypt": {
                    "default": true,
                    "description": [
                        "When set for PUT mode, asks for server-side encryption."
                    ],
                    "type": "bool"
                },
                "encryption_kms_key_id": {
                    "description": [
                        "KMS key id to use when encrypting objects using I(encrypting=aws:kms). Ignored if I(encryption) is not C(aws:kms)"
                    ],
                    "type": "str"
                },
                "encryption_mode": {
                    "choices": [
                        "AES256",
                        "aws:kms"
                    ],
                    "default": "AES256",
                    "description": [
                        "What encryption mode to use if I(encrypt=true)."
                    ],
                    "type": "str"
                },
                "expiry": {
                    "aliases": [
                        "expiration"
                    ],
                    "default": 600,
                    "description": [
                        "Time limit (in seconds) for the URL generated and returned by S3/Walrus when performing a I(mode=put) or I(mode=geturl) operation."
                    ],
                    "type": "int"
                },
                "headers": {
                    "description": [
                        "Custom headers for PUT operation, as a dictionary of 'key=value' and 'key=value,key=value'."
                    ],
                    "type": "dict"
                },
                "ignore_nonexistent_bucket": {
                    "description": [
                        "Overrides initial bucket lookups in case bucket or iam policies are restrictive. Example: a user may have the GetObject permission but no other permissions. In this case using the option mode: get will fail without specifying I(ignore_nonexistent_bucket=true)."
                    ],
                    "type": "bool"
                },
                "marker": {
                    "description": [
                        "Specifies the key to start with when using list mode. Object keys are returned in alphabetical order, starting with key after the marker in order."
                    ],
                    "type": "str"
                },
                "max_keys": {
                    "default": 1000,
                    "description": [
                        "Max number of results to return in list mode, set this if you want to retrieve fewer than the default 1000 keys."
                    ],
                    "type": "int"
                },
                "metadata": {
                    "description": [
                        "Metadata for PUT operation, as a dictionary of 'key=value' and 'key=value,key=value'."
                    ],
                    "type": "dict"
                },
                "mode": {
                    "choices": [
                        "get",
                        "put",
                        "delete",
                        "create",
                        "geturl",
                        "getstr",
                        "delobj",
                        "list"
                    ],
                    "description": [
                        "Switches the module behaviour between put (upload), get (download), geturl (return download url, Ansible 1.3+), getstr (download object as string (1.3+)), list (list keys, Ansible 2.0+), create (bucket), delete (bucket), and delobj (delete object, Ansible 2.0+)."
                    ],
                    "required": true,
                    "type": "str"
                },
                "object": {
                    "description": [
                        "Keyname of the object inside the bucket. Can be used to create \"virtual directories\", see examples."
                    ],
                    "type": "str"
                },
                "overwrite": {
                    "aliases": [
                        "force"
                    ],
                    "default": "always",
                    "description": [
                        "Force overwrite either locally on the filesystem or remotely with the object/key. Used with PUT and GET operations. Boolean or one of [always, never, different], true is equal to 'always' and false is equal to 'never', new in 2.0. When this is set to 'different', the md5 sum of the local file is compared with the 'ETag' of the object/key in S3. The ETag may or may not be an MD5 digest of the object data. See the ETag response header here U(https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonResponseHeaders.html)"
                    ],
                    "type": "str"
                },
                "permission": {
                    "default": [
                        "private"
                    ],
                    "description": [
                        "This option lets the user set the canned permissions on the object/bucket that are created. The permissions that can be set are C(private), C(public-read), C(public-read-write), C(authenticated-read) for a bucket or C(private), C(public-read), C(public-read-write), C(aws-exec-read), C(authenticated-read), C(bucket-owner-read), C(bucket-owner-full-control) for an object. Multiple permissions can be specified as a list."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "prefix": {
                    "default": "",
                    "description": [
                        "Limits the response to keys that begin with the specified prefix for list mode."
                    ],
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "retries": {
                    "aliases": [
                        "retry"
                    ],
                    "default": 0,
                    "description": [
                        "On recoverable failure, how many times to retry before actually failing."
                    ],
                    "type": "int"
                },
                "rgw": {
                    "default": false,
                    "description": [
                        "Enable Ceph RGW S3 support. This option requires an explicit url via I(s3_url)."
                    ],
                    "type": "bool"
                },
                "s3_url": {
                    "aliases": [
                        "S3_URL"
                    ],
                    "description": [
                        "S3 URL endpoint for usage with Ceph, Eucalyptus and fakes3 etc. Otherwise assumes AWS."
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "src": {
                    "description": [
                        "The source file path when performing a PUT operation."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "version": {
                    "description": [
                        "Version ID of the object inside the bucket. Can be used to get a specific version of a file if versioning is enabled in the target bucket."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "python >= 2.6"
            ],
            "short_description": "manage objects in S3."
        },
        "examples": "\n- name: Simple PUT operation\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    src: /usr/local/myfile.txt\n    mode: put\n\n- name: Simple PUT operation in Ceph RGW S3\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    src: /usr/local/myfile.txt\n    mode: put\n    rgw: true\n    s3_url: \"http://localhost:8000\"\n\n- name: Simple GET operation\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    dest: /usr/local/myfile.txt\n    mode: get\n\n- name: Get a specific version of an object.\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    version: 48c9ee5131af7a716edc22df9772aa6f\n    dest: /usr/local/myfile.txt\n    mode: get\n\n- name: PUT/upload with metadata\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    src: /usr/local/myfile.txt\n    mode: put\n    metadata: 'Content-Encoding=gzip,Cache-Control=no-cache'\n\n- name: PUT/upload with custom headers\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    src: /usr/local/myfile.txt\n    mode: put\n    headers: 'x-amz-grant-full-control=emailAddress=owner@example.com'\n\n- name: List keys simple\n  aws_s3:\n    bucket: mybucket\n    mode: list\n\n- name: List keys all options\n  aws_s3:\n    bucket: mybucket\n    mode: list\n    prefix: /my/desired/\n    marker: /my/desired/0023.txt\n    max_keys: 472\n\n- name: Create an empty bucket\n  aws_s3:\n    bucket: mybucket\n    mode: create\n    permission: public-read\n\n- name: Create a bucket with key as directory, in the EU region\n  aws_s3:\n    bucket: mybucket\n    object: /my/directory/path\n    mode: create\n    region: eu-west-1\n\n- name: Delete a bucket and all contents\n  aws_s3:\n    bucket: mybucket\n    mode: delete\n\n- name: GET an object but don't download if the file checksums match. New in 2.0\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    dest: /usr/local/myfile.txt\n    mode: get\n    overwrite: different\n\n- name: Delete an object from a bucket\n  aws_s3:\n    bucket: mybucket\n    object: /my/desired/key.txt\n    mode: delobj\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "stableinterface"
            ],
            "supported_by": "core"
        },
        "return": {
            "contents": {
                "description": "Contents of the object as string.",
                "returned": "(for getstr operation)",
                "sample": "Hello, world!",
                "type": "str"
            },
            "expiry": {
                "description": "Number of seconds the presigned url is valid for.",
                "returned": "(for geturl operation)",
                "sample": 600,
                "type": "int"
            },
            "msg": {
                "description": "Message indicating the status of the operation.",
                "returned": "always",
                "sample": "PUT operation complete",
                "type": "str"
            },
            "s3_keys": {
                "description": "List of object keys.",
                "elements": "str",
                "returned": "(for list operation)",
                "sample": [
                    "prefix1/",
                    "prefix1/key1",
                    "prefix1/key2"
                ],
                "type": "list"
            },
            "url": {
                "description": "URL of the object.",
                "returned": "(for put and geturl operations)",
                "sample": "https://my-bucket.s3.amazonaws.com/my-key.txt?AWSAccessKeyId=<access-key>&Expires=1506888865&Signature=<signature>",
                "type": "str"
            }
        }
    }
}
