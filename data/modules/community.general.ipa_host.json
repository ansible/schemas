{
    "community.general.ipa_host": {
        "doc": {
            "author": "Thomas Krahn (@Nosmoht)",
            "collection": "community.general",
            "description": [
                "Add, modify and delete an IPA host using IPA API."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/ipa_host.py",
            "has_action": false,
            "module": "ipa_host",
            "options": {
                "description": {
                    "description": [
                        "A description of this host."
                    ],
                    "type": "str"
                },
                "force": {
                    "description": [
                        "Force host name even if not in DNS."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "fqdn": {
                    "aliases": [
                        "name"
                    ],
                    "description": [
                        "Full qualified domain name.",
                        "Can not be changed as it is the unique identifier."
                    ],
                    "required": true,
                    "type": "str"
                },
                "ip_address": {
                    "description": [
                        "Add the host to DNS with this IP address."
                    ],
                    "type": "str"
                },
                "ipa_host": {
                    "default": "ipa.example.com",
                    "description": [
                        "IP or hostname of IPA server.",
                        "If the value is not specified in the task, the value of environment variable C(IPA_HOST) will be used instead.",
                        "If both the environment variable C(IPA_HOST) and the value are not specified in the task, then DNS will be used to try to discover the FreeIPA server.",
                        "The relevant entry needed in FreeIPA is the 'ipa-ca' entry.",
                        "If neither the DNS entry, nor the environment C(IPA_HOST), nor the value are available in the task, then the default value will be used.",
                        "Environment variable fallback mechanism is added in Ansible 2.5."
                    ],
                    "type": "str"
                },
                "ipa_pass": {
                    "description": [
                        "Password of administrative user.",
                        "If the value is not specified in the task, the value of environment variable C(IPA_PASS) will be used instead.",
                        "Note that if the 'urllib_gssapi' library is available, it is possible to use GSSAPI to authenticate to FreeIPA.",
                        "If the environment variable C(KRB5CCNAME) is available, the module will use this kerberos credentials cache to authenticate to the FreeIPA server.",
                        "If the environment variable C(KRB5_CLIENT_KTNAME) is available, and C(KRB5CCNAME) is not; the module will use this kerberos keytab to authenticate.",
                        "If GSSAPI is not available, the usage of 'ipa_pass' is required.",
                        "Environment variable fallback mechanism is added in Ansible 2.5."
                    ],
                    "type": "str"
                },
                "ipa_port": {
                    "default": 443,
                    "description": [
                        "Port of FreeIPA / IPA server.",
                        "If the value is not specified in the task, the value of environment variable C(IPA_PORT) will be used instead.",
                        "If both the environment variable C(IPA_PORT) and the value are not specified in the task, then default value is set.",
                        "Environment variable fallback mechanism is added in Ansible 2.5."
                    ],
                    "type": "int"
                },
                "ipa_prot": {
                    "choices": [
                        "http",
                        "https"
                    ],
                    "default": "https",
                    "description": [
                        "Protocol used by IPA server.",
                        "If the value is not specified in the task, the value of environment variable C(IPA_PROT) will be used instead.",
                        "If both the environment variable C(IPA_PROT) and the value are not specified in the task, then default value is set.",
                        "Environment variable fallback mechanism is added in Ansible 2.5."
                    ],
                    "type": "str"
                },
                "ipa_timeout": {
                    "default": 10,
                    "description": [
                        "Specifies idle timeout (in seconds) for the connection.",
                        "For bulk operations, you may want to increase this in order to avoid timeout from IPA server.",
                        "If the value is not specified in the task, the value of environment variable C(IPA_TIMEOUT) will be used instead.",
                        "If both the environment variable C(IPA_TIMEOUT) and the value are not specified in the task, then default value is set."
                    ],
                    "type": "int"
                },
                "ipa_user": {
                    "default": "admin",
                    "description": [
                        "Administrative account used on IPA server.",
                        "If the value is not specified in the task, the value of environment variable C(IPA_USER) will be used instead.",
                        "If both the environment variable C(IPA_USER) and the value are not specified in the task, then default value is set.",
                        "Environment variable fallback mechanism is added in Ansible 2.5."
                    ],
                    "type": "str"
                },
                "mac_address": {
                    "aliases": [
                        "macaddress"
                    ],
                    "description": [
                        "List of Hardware MAC address(es) off this host.",
                        "If option is omitted MAC addresses will not be checked or changed.",
                        "If an empty list is passed all assigned MAC addresses will be removed.",
                        "MAC addresses that are already assigned but not passed will be removed."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "ns_hardware_platform": {
                    "aliases": [
                        "nshardwareplatform"
                    ],
                    "description": [
                        "Host hardware platform (e.g. \"Lenovo T61\")"
                    ],
                    "type": "str"
                },
                "ns_host_location": {
                    "aliases": [
                        "nshostlocation"
                    ],
                    "description": [
                        "Host location (e.g. \"Lab 2\")"
                    ],
                    "type": "str"
                },
                "ns_os_version": {
                    "aliases": [
                        "nsosversion"
                    ],
                    "description": [
                        "Host operating system and version (e.g. \"Fedora 9\")"
                    ],
                    "type": "str"
                },
                "random_password": {
                    "description": "Generate a random password to be used in bulk enrollment.",
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "absent",
                        "disabled",
                        "enabled",
                        "present"
                    ],
                    "default": "present",
                    "description": "State to ensure.",
                    "type": "str"
                },
                "update_dns": {
                    "description": [
                        "If set C(\"True\") with state as C(\"absent\"), then removes DNS records of the host managed by FreeIPA DNS.",
                        "This option has no effect for states other than \"absent\"."
                    ],
                    "type": "bool"
                },
                "user_certificate": {
                    "aliases": [
                        "usercertificate"
                    ],
                    "description": [
                        "List of Base-64 encoded server certificates.",
                        "If option is omitted certificates will not be checked or changed.",
                        "If an empty list is passed all assigned certificates will be removed.",
                        "Certificates already assigned but not passed will be removed."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "This only applies if C(ipa_prot) is I(https).",
                        "If set to C(no), the SSL certificates will not be validated.",
                        "This should only set to C(no) used on personally controlled sites using self-signed certificates."
                    ],
                    "type": "bool"
                }
            },
            "short_description": "Manage FreeIPA host"
        },
        "examples": "\n- name: Ensure host is present\n  community.general.ipa_host:\n    name: host01.example.com\n    description: Example host\n    ip_address: 192.168.0.123\n    ns_host_location: Lab\n    ns_os_version: CentOS 7\n    ns_hardware_platform: Lenovo T61\n    mac_address:\n    - \"08:00:27:E3:B1:2D\"\n    - \"52:54:00:BD:97:1E\"\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Generate a random password for bulk enrolment\n  community.general.ipa_host:\n    name: host01.example.com\n    description: Example host\n    ip_address: 192.168.0.123\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    validate_certs: False\n    random_password: True\n\n- name: Ensure host is disabled\n  community.general.ipa_host:\n    name: host01.example.com\n    state: disabled\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure that all user certificates are removed\n  community.general.ipa_host:\n    name: host01.example.com\n    user_certificate: []\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure host is absent\n  community.general.ipa_host:\n    name: host01.example.com\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure host and its DNS record is absent\n  community.general.ipa_host:\n    name: host01.example.com\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n    update_dns: True\n",
        "metadata": null,
        "return": {
            "host": {
                "description": "Host as returned by IPA API.",
                "returned": "always",
                "type": "dict"
            },
            "host_diff": {
                "description": "List of options that differ and would be changed",
                "returned": "if check mode and a difference is found",
                "type": "list"
            }
        }
    }
}
