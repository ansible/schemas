{
    "cisco.nxos.nxos_facts": {
        "doc": {
            "author": [
                "Jason Edelman (@jedelman8)",
                "Gabriele Gerbino (@GGabriele)"
            ],
            "collection": "cisco.nxos",
            "description": [
                "Collects facts from Cisco Nexus devices running the NX-OS operating system.  Fact collection is supported over both Cli and Nxapi transports.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/nxos/plugins/modules/nxos_facts.py",
            "has_action": true,
            "module": "nxos_facts",
            "notes": [
                "Tested against NXOSv 7.3.(0)D1(1) on VIRL",
                "For information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`",
                "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
                "For more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_."
            ],
            "options": {
                "gather_network_resources": {
                    "description": [
                        "When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all and the resources like interfaces, vlans etc. Can specify a list of values to include a larger subset. Values can also be used with an initial C(!) to specify that a specific subset should not be collected. Valid subsets are 'all', 'bfd_interfaces', 'lag_interfaces', 'telemetry', 'vlans', 'lacp', 'lacp_interfaces', 'interfaces', 'l3_interfaces', 'l2_interfaces', 'lldp_global', 'acls', 'acl_interfaces', 'ospfv2'."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "gather_subset": {
                    "default": "!config",
                    "description": [
                        "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, legacy, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(!) to specify that a specific subset should not be collected."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "provider": {
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli).",
                        "Starting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.",
                        "This option will be removed in a release after 2022-06-01.",
                        "For more information please see the L(NXOS Platform Options guide, ../network/user_guide/platform_nxos.html).",
                        "HORIZONTALLINE",
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "auth_pass": {
                            "description": [
                                "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead."
                            ],
                            "type": "str"
                        },
                        "authorize": {
                            "default": false,
                            "description": [
                                "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead."
                            ],
                            "type": "bool"
                        },
                        "host": {
                            "description": [
                                "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport."
                            ],
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead."
                            ],
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443)."
                            ],
                            "type": "int"
                        },
                        "ssh_keyfile": {
                            "description": [
                                "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead."
                            ],
                            "type": "str"
                        },
                        "timeout": {
                            "description": [
                                "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc)."
                            ],
                            "type": "int"
                        },
                        "transport": {
                            "choices": [
                                "cli",
                                "nxapi"
                            ],
                            "default": "cli",
                            "description": [
                                "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi."
                            ],
                            "type": "str"
                        },
                        "use_proxy": {
                            "default": true,
                            "description": [
                                "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored."
                            ],
                            "type": "bool"
                        },
                        "use_ssl": {
                            "default": false,
                            "description": [
                                "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored."
                            ],
                            "type": "bool"
                        },
                        "username": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead."
                            ],
                            "type": "str"
                        },
                        "validate_certs": {
                            "default": false,
                            "description": [
                                "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored."
                            ],
                            "type": "bool"
                        }
                    },
                    "type": "dict"
                }
            },
            "short_description": "Gets facts about NX-OS switches",
            "version_added": "1.0.0",
            "version_added_collection": "cisco.nxos"
        },
        "examples": "\n- name: Gather all legacy facts\n  cisco.nxos.nxos_facts:\n    gather_subset: all\n- name: Gather only the config and default facts\n  cisco.nxos.nxos_facts:\n    gather_subset:\n    - config\n- name: Do not gather hardware facts\n  cisco.nxos.nxos_facts:\n    gather_subset:\n    - '!hardware'\n- name: Gather legacy and resource facts\n  cisco.nxos.nxos_facts:\n    gather_subset: all\n    gather_network_resources: all\n- name: Gather only the interfaces resource facts and no legacy facts\n  cisco.nxos.nxos_facts:\n    gather_subset:\n    - '!all'\n    - '!min'\n    gather_network_resources:\n    - interfaces\n- name: Gather interfaces resource and minimal legacy facts\n  cisco.nxos.nxos_facts:\n    gather_subset: min\n    gather_network_resources: interfaces\n",
        "metadata": null,
        "return": {
            "ansible_net_all_ipv4_addresses": {
                "description": "All IPv4 addresses configured on the device",
                "returned": "when interfaces is configured",
                "type": "list"
            },
            "ansible_net_all_ipv6_addresses": {
                "description": "All IPv6 addresses configured on the device",
                "returned": "when interfaces is configured",
                "type": "list"
            },
            "ansible_net_api": {
                "description": "The name of the transport",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_config": {
                "description": "The current active config from the device",
                "returned": "when config is configured",
                "type": "str"
            },
            "ansible_net_filesystems": {
                "description": "All file system names available on the device",
                "returned": "when hardware is configured",
                "type": "list"
            },
            "ansible_net_gather_network_resources": {
                "description": "The list of fact for network resource subsets collected from the device",
                "returned": "when the resource is configured",
                "type": "list"
            },
            "ansible_net_gather_subset": {
                "description": "The list of fact subsets collected from the device",
                "returned": "always",
                "type": "list"
            },
            "ansible_net_hostname": {
                "description": "The configured hostname of the device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_image": {
                "description": "The image file the device is running",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_interfaces": {
                "description": "A hash of all interfaces running on the system",
                "returned": "when interfaces is configured",
                "type": "dict"
            },
            "ansible_net_license_hostid": {
                "description": "The License host id of the device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_memfree_mb": {
                "description": "The available free memory on the remote device in Mb",
                "returned": "when hardware is configured",
                "type": "int"
            },
            "ansible_net_memtotal_mb": {
                "description": "The total memory on the remote device in Mb",
                "returned": "when hardware is configured",
                "type": "int"
            },
            "ansible_net_model": {
                "description": "The model name returned from the device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_neighbors": {
                "description": [
                    "The list of LLDP and CDP neighbors from the device. If both, CDP and LLDP neighbor data is present on one port, CDP is preferred."
                ],
                "returned": "when interfaces is configured",
                "type": "dict"
            },
            "ansible_net_python_version": {
                "description": "The Python version Ansible controller is using",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_serialnum": {
                "description": "The serial number of the remote device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_version": {
                "description": "The operating system version running on the remote device",
                "returned": "always",
                "type": "str"
            },
            "fan_info": {
                "description": "A hash of facts about fans in the remote device",
                "returned": "when legacy is configured",
                "type": "dict"
            },
            "hostname": {
                "description": "The configured hostname of the remote device",
                "returned": "when legacy is configured",
                "type": "dict"
            },
            "interfaces_list": {
                "description": "The list of interface names on the remote device",
                "returned": "when legacy is configured",
                "type": "dict"
            },
            "kickstart": {
                "description": "The software version used to boot the system",
                "returned": "when legacy is configured",
                "type": "str"
            },
            "module": {
                "description": "A hash of facts about the modules in a remote device",
                "returned": "when legacy is configured",
                "type": "dict"
            },
            "platform": {
                "description": "The hardware platform reported by the remote device",
                "returned": "when legacy is configured",
                "type": "str"
            },
            "power_supply_info": {
                "description": "A hash of facts about the power supplies in the remote device",
                "returned": "when legacy is configured",
                "type": "str"
            },
            "vlan_list": {
                "description": "The list of VLAN IDs configured on the remote device",
                "returned": "when legacy is configured",
                "type": "list"
            }
        }
    }
}
