{
    "community.aws.rds_instance_info": {
        "doc": {
            "author": [
                "Will Thames (@willthames)",
                "Michael De La Rue (@mikedlr)"
            ],
            "collection": "community.aws",
            "description": [
                "Obtain information about one or more RDS instances.",
                "This module was called C(rds_instance_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/rds_instance_info.py",
            "has_action": false,
            "module": "rds_instance_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "db_instance_identifier": {
                    "aliases": [
                        "id"
                    ],
                    "description": [
                        "The RDS instance's unique identifier."
                    ],
                    "required": false,
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "filters": {
                    "description": [
                        "A filter that specifies one or more DB instances to describe. See U(https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBInstances.html)"
                    ],
                    "type": "dict"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6",
                "python >= 2.7"
            ],
            "short_description": "obtain information about one or more RDS instances",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n- name: Get information about an instance\n  community.aws.rds_instance_info:\n    db_instance_identifier: new-database\n  register: new_database_info\n\n- name: Get all RDS instances\n  community.aws.rds_instance_info:\n",
        "metadata": null,
        "return": {
            "instances": {
                "contains": {
                    "allocated_storage": {
                        "description": "Gigabytes of storage allocated to the database",
                        "returned": "always",
                        "sample": 10,
                        "type": "int"
                    },
                    "auto_minor_version_upgrade": {
                        "description": "Whether minor version upgrades happen automatically",
                        "returned": "always",
                        "sample": true,
                        "type": "bool"
                    },
                    "availability_zone": {
                        "description": "Availability Zone in which the database resides",
                        "returned": "always",
                        "sample": "us-west-2b",
                        "type": "str"
                    },
                    "backup_retention_period": {
                        "description": "Days for which backups are retained",
                        "returned": "always",
                        "sample": 7,
                        "type": "int"
                    },
                    "ca_certificate_identifier": {
                        "description": "ID for the CA certificate",
                        "returned": "always",
                        "sample": "rds-ca-2015",
                        "type": "str"
                    },
                    "copy_tags_to_snapshot": {
                        "description": "Whether DB tags should be copied to the snapshot",
                        "returned": "always",
                        "sample": false,
                        "type": "bool"
                    },
                    "db_instance_arn": {
                        "description": "ARN of the database instance",
                        "returned": "always",
                        "sample": "arn:aws:rds:us-west-2:111111111111:db:helloworld-rds",
                        "type": "str"
                    },
                    "db_instance_class": {
                        "description": "Instance class of the database instance",
                        "returned": "always",
                        "sample": "db.t2.small",
                        "type": "str"
                    },
                    "db_instance_identifier": {
                        "description": "Database instance identifier",
                        "returned": "always",
                        "sample": "helloworld-rds",
                        "type": "str"
                    },
                    "db_instance_port": {
                        "description": "Port used by the database instance",
                        "returned": "always",
                        "sample": 0,
                        "type": "int"
                    },
                    "db_instance_status": {
                        "description": "Status of the database instance",
                        "returned": "always",
                        "sample": "available",
                        "type": "str"
                    },
                    "db_name": {
                        "description": "Name of the database",
                        "returned": "always",
                        "sample": "management",
                        "type": "str"
                    },
                    "db_parameter_groups": {
                        "contains": {
                            "db_parameter_group_name": {
                                "description": "Name of the database parameter group",
                                "returned": "always",
                                "sample": "psql-pg-helloworld",
                                "type": "str"
                            },
                            "parameter_apply_status": {
                                "description": "Whether the parameter group has been applied",
                                "returned": "always",
                                "sample": "in-sync",
                                "type": "str"
                            }
                        },
                        "description": "List of database parameter groups",
                        "returned": "always",
                        "type": "complex"
                    },
                    "db_security_groups": {
                        "description": "List of security groups used by the database instance",
                        "returned": "always",
                        "sample": [],
                        "type": "list"
                    },
                    "db_subnet_group": {
                        "contains": {
                            "db_subnet_group_description": {
                                "description": "Description of the DB subnet group",
                                "returned": "always",
                                "sample": "My database subnet group",
                                "type": "str"
                            },
                            "db_subnet_group_name": {
                                "description": "Name of the database subnet group",
                                "returned": "always",
                                "sample": "my-subnet-group",
                                "type": "str"
                            },
                            "subnet_group_status": {
                                "description": "Subnet group status",
                                "returned": "always",
                                "sample": "Complete",
                                "type": "str"
                            },
                            "subnets": {
                                "contains": {
                                    "subnet_availability_zone": {
                                        "contains": {
                                            "name": {
                                                "description": "Name of the availability zone",
                                                "returned": "always",
                                                "sample": "us-west-2c",
                                                "type": "str"
                                            }
                                        },
                                        "description": "Availability zone of the subnet",
                                        "returned": "always",
                                        "type": "complex"
                                    },
                                    "subnet_identifier": {
                                        "description": "Subnet ID",
                                        "returned": "always",
                                        "sample": "subnet-abcd1234",
                                        "type": "str"
                                    },
                                    "subnet_status": {
                                        "description": "Subnet status",
                                        "returned": "always",
                                        "sample": "Active",
                                        "type": "str"
                                    }
                                },
                                "description": "List of subnets in the subnet group",
                                "returned": "always",
                                "type": "complex"
                            },
                            "vpc_id": {
                                "description": "VPC id of the subnet group",
                                "returned": "always",
                                "sample": "vpc-abcd1234",
                                "type": "str"
                            }
                        },
                        "description": "list of subnet groups",
                        "returned": "always",
                        "type": "complex"
                    },
                    "dbi_resource_id": {
                        "description": "AWS Region-unique, immutable identifier for the DB instance",
                        "returned": "always",
                        "sample": "db-AAAAAAAAAAAAAAAAAAAAAAAAAA",
                        "type": "str"
                    },
                    "domain_memberships": {
                        "description": "List of domain memberships",
                        "returned": "always",
                        "sample": [],
                        "type": "list"
                    },
                    "endpoint": {
                        "contains": {
                            "address": {
                                "description": "Database endpoint address",
                                "returned": "always",
                                "sample": "helloworld-rds.ctrqpe3so1sf.us-west-2.rds.amazonaws.com",
                                "type": "str"
                            },
                            "hosted_zone_id": {
                                "description": "Route53 hosted zone ID",
                                "returned": "always",
                                "sample": "Z1PABCD0000000",
                                "type": "str"
                            },
                            "port": {
                                "description": "Database endpoint port",
                                "returned": "always",
                                "sample": 5432,
                                "type": "int"
                            }
                        },
                        "description": "Database endpoint",
                        "returned": "always",
                        "type": "complex"
                    },
                    "engine": {
                        "description": "Database engine",
                        "returned": "always",
                        "sample": "postgres",
                        "type": "str"
                    },
                    "engine_version": {
                        "description": "Database engine version",
                        "returned": "always",
                        "sample": "9.5.10",
                        "type": "str"
                    },
                    "iam_database_authentication_enabled": {
                        "description": "Whether database authentication through IAM is enabled",
                        "returned": "always",
                        "sample": false,
                        "type": "bool"
                    },
                    "instance_create_time": {
                        "description": "Date and time the instance was created",
                        "returned": "always",
                        "sample": "2017-10-10T04:00:07.434000+00:00",
                        "type": "str"
                    },
                    "kms_key_id": {
                        "description": "KMS Key ID",
                        "returned": "always",
                        "sample": "arn:aws:kms:us-west-2:111111111111:key/abcd1234-0000-abcd-1111-0123456789ab",
                        "type": "str"
                    },
                    "latest_restorable_time": {
                        "description": "Latest time to which a database can be restored with point-in-time restore",
                        "returned": "always",
                        "sample": "2018-05-17T00:03:56+00:00",
                        "type": "str"
                    },
                    "license_model": {
                        "description": "License model",
                        "returned": "always",
                        "sample": "postgresql-license",
                        "type": "str"
                    },
                    "master_username": {
                        "description": "Database master username",
                        "returned": "always",
                        "sample": "dbadmin",
                        "type": "str"
                    },
                    "monitoring_interval": {
                        "description": "Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance",
                        "returned": "always",
                        "sample": 0,
                        "type": "int"
                    },
                    "multi_az": {
                        "description": "Whether Multi-AZ is on",
                        "returned": "always",
                        "sample": false,
                        "type": "bool"
                    },
                    "option_group_memberships": {
                        "contains": {
                            "option_group_name": {
                                "description": "Option group name",
                                "returned": "always",
                                "sample": "default:postgres-9-5",
                                "type": "str"
                            },
                            "status": {
                                "description": "Status of option group",
                                "returned": "always",
                                "sample": "in-sync",
                                "type": "str"
                            }
                        },
                        "description": "List of option groups",
                        "returned": "always",
                        "type": "complex"
                    },
                    "pending_modified_values": {
                        "contains": {},
                        "description": "Modified values pending application",
                        "returned": "always",
                        "type": "complex"
                    },
                    "performance_insights_enabled": {
                        "description": "Whether performance insights are enabled",
                        "returned": "always",
                        "sample": false,
                        "type": "bool"
                    },
                    "preferred_backup_window": {
                        "description": "Preferred backup window",
                        "returned": "always",
                        "sample": "04:00-05:00",
                        "type": "str"
                    },
                    "preferred_maintenance_window": {
                        "description": "Preferred maintenance window",
                        "returned": "always",
                        "sample": "mon:05:00-mon:05:30",
                        "type": "str"
                    },
                    "publicly_accessible": {
                        "description": "Whether the DB is publicly accessible",
                        "returned": "always",
                        "sample": false,
                        "type": "bool"
                    },
                    "read_replica_db_instance_identifiers": {
                        "description": "List of database instance read replicas",
                        "returned": "always",
                        "sample": [],
                        "type": "list"
                    },
                    "storage_encrypted": {
                        "description": "Whether the storage is encrypted",
                        "returned": "always",
                        "sample": true,
                        "type": "bool"
                    },
                    "storage_type": {
                        "description": "Storage type of the Database instance",
                        "returned": "always",
                        "sample": "gp2",
                        "type": "str"
                    },
                    "tags": {
                        "contains": {},
                        "description": "Tags used by the database instance",
                        "returned": "always",
                        "type": "complex"
                    },
                    "vpc_security_groups": {
                        "contains": {
                            "status": {
                                "description": "Status of the VPC security group",
                                "returned": "always",
                                "sample": "active",
                                "type": "str"
                            },
                            "vpc_security_group_id": {
                                "description": "VPC Security Group ID",
                                "returned": "always",
                                "sample": "sg-abcd1234",
                                "type": "str"
                            }
                        },
                        "description": "List of VPC security groups",
                        "returned": "always",
                        "type": "complex"
                    }
                },
                "description": "List of RDS instances",
                "returned": "always",
                "type": "complex"
            }
        }
    }
}
