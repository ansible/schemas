{
    "community.general.ldap_entry": {
        "doc": {
            "author": [
                "Jiri Tyr (@jtyr)"
            ],
            "collection": "community.general",
            "description": [
                "Add or remove LDAP entries. This module only asserts the existence or non-existence of an LDAP entry, not its attributes. To assert the attribute values of an entry, see M(community.general.ldap_attr)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/ldap_entry.py",
            "has_action": false,
            "module": "ldap_entry",
            "notes": [
                "The default authentication settings will attempt to use a SASL EXTERNAL bind over a UNIX domain socket. This works well with the default Ubuntu install for example, which includes a cn=peercred,cn=external,cn=auth ACL rule allowing root to modify the server configuration. If you need to use a simple bind to access your server, pass the credentials in I(bind_dn) and I(bind_pw).",
                "The I(params) parameter was removed due to circumventing Ansible's parameter handling.  The I(params) parameter started disallowing setting the I(bind_pw) parameter in Ansible-2.7 as it was insecure to set the parameter that way."
            ],
            "options": {
                "attributes": {
                    "description": [
                        "If I(state=present), attributes necessary to create an entry. Existing entries are never modified. To assert specific attribute values on an existing entry, use M(community.general.ldap_attr) module instead."
                    ],
                    "type": "dict"
                },
                "bind_dn": {
                    "description": [
                        "A DN to bind with. If this is omitted, we'll try a SASL bind with the EXTERNAL mechanism as default.",
                        "If this is blank, we'll use an anonymous bind."
                    ],
                    "type": "str"
                },
                "bind_pw": {
                    "description": [
                        "The password to use with I(bind_dn)."
                    ],
                    "type": "str"
                },
                "dn": {
                    "description": [
                        "The DN of the entry to add or remove."
                    ],
                    "required": true,
                    "type": "str"
                },
                "objectClass": {
                    "description": [
                        "If I(state=present), value or list of values to use when creating the entry. It can either be a string or an actual list of strings."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "referrals_chasing": {
                    "choices": [
                        "disabled",
                        "anonymous"
                    ],
                    "default": "anonymous",
                    "description": [
                        "Set the referrals chasing behavior.",
                        "C(anonymous) follow referrals anonymously. This is the default behavior.",
                        "C(disabled) disable referrals chasing. This sets C(OPT_REFERRALS) to off."
                    ],
                    "type": "str",
                    "version_added": "2.0.0",
                    "version_added_collection": "community.general"
                },
                "sasl_class": {
                    "choices": [
                        "external",
                        "gssapi"
                    ],
                    "default": "external",
                    "description": [
                        "The class to use for SASL authentication.",
                        "possible choices are C(external), C(gssapi)."
                    ],
                    "type": "str",
                    "version_added": "2.0.0",
                    "version_added_collection": "community.general"
                },
                "server_uri": {
                    "default": "ldapi:///",
                    "description": [
                        "A URI to the LDAP server.",
                        "The default value lets the underlying LDAP client library look for a UNIX domain socket in its default location."
                    ],
                    "type": "str"
                },
                "start_tls": {
                    "default": false,
                    "description": [
                        "If true, we'll use the START_TLS LDAP extension."
                    ],
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "The target state of the entry."
                    ]
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "If set to C(no), SSL certificates will not be validated.",
                        "This should only be used on sites using self-signed certificates."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python-ldap"
            ],
            "short_description": "Add or remove LDAP entries."
        },
        "examples": "\n- name: Make sure we have a parent entry for users\n  community.general.ldap_entry:\n    dn: ou=users,dc=example,dc=com\n    objectClass: organizationalUnit\n\n- name: Make sure we have an admin user\n  community.general.ldap_entry:\n    dn: cn=admin,dc=example,dc=com\n    objectClass:\n      - simpleSecurityObject\n      - organizationalRole\n    attributes:\n      description: An LDAP administrator\n      userPassword: \"{SSHA}tabyipcHzhwESzRaGA7oQ/SDoBZQOGND\"\n\n- name: Get rid of an old entry\n  community.general.ldap_entry:\n    dn: ou=stuff,dc=example,dc=com\n    state: absent\n    server_uri: ldap://localhost/\n    bind_dn: cn=admin,dc=example,dc=com\n    bind_pw: password\n\n#\n# The same as in the previous example but with the authentication details\n# stored in the ldap_auth variable:\n#\n# ldap_auth:\n#   server_uri: ldap://localhost/\n#   bind_dn: cn=admin,dc=example,dc=com\n#   bind_pw: password\n#\n# In the example below, 'args' is a task keyword, passed at the same level as the module\n- name: Get rid of an old entry\n  community.general.ldap_entry:\n    dn: ou=stuff,dc=example,dc=com\n    state: absent\n  args: \"{{ ldap_auth }}\"\n",
        "metadata": null,
        "return": null
    }
}
