{
    "community.crypto.acme_certificate_revoke": {
        "doc": {
            "author": "Felix Fontein (@felixfontein)",
            "collection": "community.crypto",
            "description": [
                "Allows to revoke certificates issued by a CA supporting the L(ACME protocol,https://tools.ietf.org/html/rfc8555), such as L(Let's Encrypt,https://letsencrypt.org/)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/crypto/plugins/modules/acme_certificate_revoke.py",
            "has_action": false,
            "module": "acme_certificate_revoke",
            "notes": [
                "Exactly one of C(account_key_src), C(account_key_content), C(private_key_src) or C(private_key_content) must be specified.",
                "Trying to revoke an already revoked certificate should result in an unchanged status, even if the revocation reason was different than the one specified here. Also, depending on the server, it can happen that some other error is returned if the certificate has already been revoked.",
                "Does not support C(check_mode).",
                "If a new enough version of the C(cryptography) library is available (see Requirements for details), it will be used instead of the C(openssl) binary. This can be explicitly disabled or enabled with the C(select_crypto_backend) option. Note that using the C(openssl) binary will be slower and less secure, as private key contents always have to be stored on disk (see C(account_key_content)).",
                "Although the defaults are chosen so that the module can be used with the L(Let's Encrypt,https://letsencrypt.org/) CA, the module can in principle be used with any CA providing an ACME endpoint, such as L(Buypass Go SSL,https://www.buypass.com/ssl/products/acme)."
            ],
            "options": {
                "account_key_content": {
                    "description": [
                        "Content of the ACME account RSA or Elliptic Curve key.",
                        "Note that exactly one of C(account_key_src), C(account_key_content), C(private_key_src) or C(private_key_content) must be specified.",
                        "I(Warning): the content will be written into a temporary file, which will be deleted by Ansible when the module completes. Since this is an important private key \u2014 it can be used to change the account key, or to revoke your certificates without knowing their private keys \u2014, this might not be acceptable.",
                        "In case C(cryptography) is used, the content is not written into a temporary file. It can still happen that it is written to disk by Ansible in the process of moving the module with its argument to the node where it is executed."
                    ],
                    "type": "str"
                },
                "account_key_passphrase": {
                    "description": [
                        "Phassphrase to use to decode the account key.",
                        "B(Note:) this is not supported by the C(openssl) backend, only by the C(cryptography) backend."
                    ],
                    "type": "str",
                    "version_added": "1.6.0",
                    "version_added_collection": "community.crypto"
                },
                "account_key_src": {
                    "aliases": [
                        "account_key"
                    ],
                    "description": [
                        "Path to a file containing the ACME account RSA or Elliptic Curve key.",
                        "RSA keys can be created with C(openssl rsa ...). Elliptic curve keys can be created with C(openssl ecparam -genkey ...). Any other tool creating private keys in PEM format can be used as well.",
                        "Mutually exclusive with C(account_key_content).",
                        "Required if C(account_key_content) is not used."
                    ],
                    "type": "path"
                },
                "account_uri": {
                    "description": [
                        "If specified, assumes that the account URI is as given. If the account key does not match this account, or an account with this URI does not exist, the module fails."
                    ],
                    "type": "str"
                },
                "acme_directory": {
                    "description": [
                        "The ACME directory to use. This is the entry point URL to access the ACME CA server API.",
                        "For safety reasons the default is set to the Let's Encrypt staging server (for the ACME v1 protocol). This will create technically correct, but untrusted certificates.",
                        "The default value is C(https://acme-staging.api.letsencrypt.org/directory). Note that in community.crypto 2.0.0, this option B(will be required) and will no longer have a default. Note that the default is the Let's Encrypt staging server for the ACME v1 protocol, which is deprecated and will be disabled in May 2021 (see L(here,https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430/7) for details).",
                        "For Let's Encrypt, all staging endpoints can be found here: U(https://letsencrypt.org/docs/staging-environment/). For Buypass, all endpoints can be found here: U(https://community.buypass.com/t/63d4ay/buypass-go-ssl-endpoints)",
                        "For B(Let's Encrypt), the production directory URL for ACME v2 is U(https://acme-v02.api.letsencrypt.org/directory). (The production directory URL for ACME v1 is U(https://acme-v01.api.letsencrypt.org/directory) and will be disabled in July 2021.)",
                        "For B(Buypass), the production directory URL for ACME v2 and v1 is U(https://api.buypass.com/acme/directory).",
                        "For B(ZeroSSL), the production directory URL for ACME v2 is U(https://acme.zerossl.com/v2/DV90).",
                        "B(Warning:) So far, the ACME modules have only been tested against Let's Encrypt (staging and production), Buypass (staging and production), ZeroSSL (production), and L(Pebble testing server,https://github.com/letsencrypt/Pebble). If you experience problems with another ACME server, please L(create an issue,https://github.com/ansible-collections/community.crypto/issues/new/choose) to help us supporting it. Feedback that an ACME server not mentioned does work is also appreciated."
                    ],
                    "type": "str"
                },
                "acme_version": {
                    "choices": [
                        1,
                        2
                    ],
                    "description": [
                        "The ACME version of the endpoint.",
                        "Must be C(1) for the classic Let's Encrypt and Buypass ACME endpoints, or C(2) for standardized ACME v2 endpoints.",
                        "The default value is C(1). Note that in community.crypto 2.0.0, this option B(will be required) and will no longer have a default.",
                        "Please also note that we will deprecate ACME v1 support eventually."
                    ],
                    "type": "int"
                },
                "certificate": {
                    "description": [
                        "Path to the certificate to revoke."
                    ],
                    "required": true,
                    "type": "path"
                },
                "private_key_content": {
                    "description": [
                        "Content of the certificate's private key.",
                        "Note that exactly one of C(account_key_src), C(account_key_content), C(private_key_src) or C(private_key_content) must be specified.",
                        "I(Warning): the content will be written into a temporary file, which will be deleted by Ansible when the module completes. Since this is an important private key \u2014 it can be used to change the account key, or to revoke your certificates without knowing their private keys \u2014, this might not be acceptable.",
                        "In case C(cryptography) is used, the content is not written into a temporary file. It can still happen that it is written to disk by Ansible in the process of moving the module with its argument to the node where it is executed."
                    ],
                    "type": "str"
                },
                "private_key_passphrase": {
                    "description": [
                        "Phassphrase to use to decode the certificate's private key.",
                        "B(Note:) this is not supported by the C(openssl) backend, only by the C(cryptography) backend."
                    ],
                    "type": "str",
                    "version_added": "1.6.0",
                    "version_added_collection": "community.crypto"
                },
                "private_key_src": {
                    "description": [
                        "Path to the certificate's private key.",
                        "Note that exactly one of C(account_key_src), C(account_key_content), C(private_key_src) or C(private_key_content) must be specified."
                    ],
                    "type": "path"
                },
                "revoke_reason": {
                    "description": [
                        "One of the revocation reasonCodes defined in L(Section 5.3.1 of RFC5280,https://tools.ietf.org/html/rfc5280#section-5.3.1).",
                        "Possible values are C(0) (unspecified), C(1) (keyCompromise), C(2) (cACompromise), C(3) (affiliationChanged), C(4) (superseded), C(5) (cessationOfOperation), C(6) (certificateHold), C(8) (removeFromCRL), C(9) (privilegeWithdrawn), C(10) (aACompromise)."
                    ],
                    "type": "int"
                },
                "select_crypto_backend": {
                    "choices": [
                        "auto",
                        "cryptography",
                        "openssl"
                    ],
                    "default": "auto",
                    "description": [
                        "Determines which crypto backend to use.",
                        "The default choice is C(auto), which tries to use C(cryptography) if available, and falls back to C(openssl).",
                        "If set to C(openssl), will try to use the C(openssl) binary.",
                        "If set to C(cryptography), will try to use the L(cryptography,https://cryptography.io/) library."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Whether calls to the ACME directory will validate TLS certificates.",
                        "B(Warning:) Should B(only ever) be set to C(no) for testing purposes, for example when testing against a local Pebble server."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "either openssl or L(cryptography,https://cryptography.io/) >= 1.5"
            ],
            "seealso": [
                {
                    "description": "Documentation for the Let's Encrypt Certification Authority. Provides useful information for example on rate limits.",
                    "link": "https://letsencrypt.org/docs/",
                    "name": "The Let's Encrypt documentation"
                },
                {
                    "description": "The specification of the ACME protocol (RFC 8555).",
                    "link": "https://tools.ietf.org/html/rfc8555",
                    "name": "Automatic Certificate Management Environment (ACME)"
                },
                {
                    "description": "Allows to debug problems.",
                    "module": "community.crypto.acme_inspect"
                }
            ],
            "short_description": "Revoke certificates with the ACME protocol"
        },
        "examples": "\n- name: Revoke certificate with account key\n  community.crypto.acme_certificate_revoke:\n    account_key_src: /etc/pki/cert/private/account.key\n    certificate: /etc/httpd/ssl/sample.com.crt\n\n- name: Revoke certificate with certificate's private key\n  community.crypto.acme_certificate_revoke:\n    private_key_src: /etc/httpd/ssl/sample.com.key\n    certificate: /etc/httpd/ssl/sample.com.crt\n",
        "metadata": null,
        "return": null
    }
}
