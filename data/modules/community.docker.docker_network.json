{
    "community.docker.docker_network": {
        "doc": {
            "author": [
                "Ben Keith (@keitwb)",
                "Chris Houseknecht (@chouseknecht)",
                "Dave Bendit (@DBendit)"
            ],
            "collection": "community.docker",
            "description": [
                "Create/remove Docker networks and connect containers to them.",
                "Performs largely the same function as the \"docker network\" CLI subcommand."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/docker/plugins/modules/docker_network.py",
            "has_action": false,
            "module": "docker_network",
            "notes": [
                "When network options are changed, the module disconnects all containers from the network, deletes the network, and re-creates the network. It does not try to reconnect containers, except the ones listed in (I(connected), and even for these, it does not consider specific connection options like fixed IP addresses or MAC addresses. If you need more control over how the containers are connected to the network, loop the M(community.docker.docker_container) module to loop over your containers to make sure they are connected properly.",
                "The module does not support Docker Swarm, i.e. it will not try to disconnect or reconnect services. If services are connected to the network, deleting the network will fail. When network options are changed, the network has to be deleted and recreated, so this will fail as well.",
                "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.",
                "When connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).",
                "Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.",
                "This module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon."
            ],
            "options": {
                "api_version": {
                    "aliases": [
                        "docker_api_version"
                    ],
                    "default": "auto",
                    "description": [
                        "The version of the Docker API running on the Docker Host.",
                        "Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "str"
                },
                "appends": {
                    "aliases": [
                        "incremental"
                    ],
                    "default": false,
                    "description": [
                        "By default the connected list is canonical, meaning containers not on the list are removed from the network.",
                        "Use I(appends) to leave existing containers connected."
                    ],
                    "type": "bool"
                },
                "attachable": {
                    "description": [
                        "If enabled, and the network is in the global scope, non-service containers on worker nodes will be able to connect to the network."
                    ],
                    "type": "bool"
                },
                "ca_cert": {
                    "aliases": [
                        "tls_ca_cert",
                        "cacert_path"
                    ],
                    "description": [
                        "Use a CA certificate when performing server verification by providing the path to a CA certificate file.",
                        "If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used."
                    ],
                    "type": "path"
                },
                "client_cert": {
                    "aliases": [
                        "tls_client_cert",
                        "cert_path"
                    ],
                    "description": [
                        "Path to the client's TLS certificate file.",
                        "If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "tls_client_key",
                        "key_path"
                    ],
                    "description": [
                        "Path to the client's TLS key file.",
                        "If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used."
                    ],
                    "type": "path"
                },
                "connected": {
                    "aliases": [
                        "containers"
                    ],
                    "description": [
                        "List of container names or container IDs to connect to a network.",
                        "Please note that the module only makes sure that these containers are connected to the network, but does not care about connection options. If you rely on specific IP addresses etc., use the M(community.docker.docker_container) module to ensure your containers are correctly connected to this network."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "debug": {
                    "default": false,
                    "description": [
                        "Debug mode"
                    ],
                    "type": "bool"
                },
                "docker_host": {
                    "aliases": [
                        "docker_url"
                    ],
                    "default": "unix://var/run/docker.sock",
                    "description": [
                        "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "str"
                },
                "driver": {
                    "default": "bridge",
                    "description": [
                        "Specify the type of network. Docker provides bridge and overlay drivers, but 3rd party drivers can also be used."
                    ],
                    "type": "str"
                },
                "driver_options": {
                    "description": [
                        "Dictionary of network settings. Consult docker docs for valid options and values."
                    ],
                    "type": "dict"
                },
                "enable_ipv6": {
                    "description": [
                        "Enable IPv6 networking."
                    ],
                    "type": "bool"
                },
                "force": {
                    "default": false,
                    "description": [
                        "With state C(absent) forces disconnecting all containers from the network prior to deleting the network. With state C(present) will disconnect all containers, delete the network and re-create the network.",
                        "This option is required if you have changed the IPAM or driver options and want an existing network to be updated to use the new options."
                    ],
                    "type": "bool"
                },
                "internal": {
                    "description": [
                        "Restrict external access to the network."
                    ],
                    "type": "bool"
                },
                "ipam_config": {
                    "description": [
                        "List of IPAM config blocks. Consult L(Docker docs,https://docs.docker.com/compose/compose-file/compose-file-v2/#ipam) for valid options and values. Note that I(iprange) is spelled differently here (we use the notation from the Docker SDK for Python)."
                    ],
                    "elements": "dict",
                    "suboptions": {
                        "aux_addresses": {
                            "description": [
                                "Auxiliary IP addresses used by Network driver, as a mapping from hostname to IP."
                            ],
                            "type": "dict"
                        },
                        "gateway": {
                            "description": [
                                "IP gateway address."
                            ],
                            "type": "str"
                        },
                        "iprange": {
                            "description": [
                                "IP address range in CIDR notation."
                            ],
                            "type": "str"
                        },
                        "subnet": {
                            "description": [
                                "IP subset in CIDR notation."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "ipam_driver": {
                    "description": [
                        "Specify an IPAM driver."
                    ],
                    "type": "str"
                },
                "ipam_driver_options": {
                    "description": [
                        "Dictionary of IPAM driver options."
                    ],
                    "type": "dict"
                },
                "labels": {
                    "description": [
                        "Dictionary of labels."
                    ],
                    "type": "dict"
                },
                "name": {
                    "aliases": [
                        "network_name"
                    ],
                    "description": [
                        "Name of the network to operate on."
                    ],
                    "required": true,
                    "type": "str"
                },
                "scope": {
                    "choices": [
                        "local",
                        "global",
                        "swarm"
                    ],
                    "description": [
                        "Specify the network's scope."
                    ],
                    "type": "str"
                },
                "ssl_version": {
                    "description": [
                        "Provide a valid SSL version number. Default value determined by ssl.py module.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "C(absent) deletes the network. If a network has connected containers, it cannot be deleted. Use the I(force) option to disconnect all containers and delete the network.",
                        "C(present) creates the network, if it does not already exist with the specified parameters, and connects the list of containers provided via the connected parameter. Containers not on the list will be disconnected. An empty list will leave no containers connected to the network. Use the I(appends) option to leave existing containers connected. Use the I(force) options to force re-creation of the network."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 60,
                    "description": [
                        "The maximum amount of time in seconds to wait on a response from the API.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "int"
                },
                "tls": {
                    "default": false,
                    "description": [
                        "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "bool"
                },
                "tls_hostname": {
                    "description": [
                        "When verifying the authenticity of the Docker Host server, provide the expected name of the server.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.",
                        "The current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise."
                    ],
                    "type": "str"
                },
                "use_ssh_client": {
                    "default": false,
                    "description": [
                        "For SSH transports, use the C(ssh) CLI tool instead of paramiko.",
                        "Requires Docker SDK for Python 4.4.0 or newer."
                    ],
                    "type": "bool",
                    "version_added": "1.5.0",
                    "version_added_collection": "community.docker"
                },
                "validate_certs": {
                    "aliases": [
                        "tls_verify"
                    ],
                    "default": false,
                    "description": [
                        "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). For Python 2.6, C(docker-py) must be used. Otherwise, it is recommended to install the C(docker) Python module. Note that both modules should *not* be installed at the same time. Also note that when both modules are installed and one of them is uninstalled, the other might no longer function and a reinstall of it is required.",
                "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)",
                "The docker server >= 1.10.0"
            ],
            "short_description": "Manage Docker networks"
        },
        "examples": "\n- name: Create a network\n  community.docker.docker_network:\n    name: network_one\n\n- name: Remove all but selected list of containers\n  community.docker.docker_network:\n    name: network_one\n    connected:\n      - container_a\n      - container_b\n      - container_c\n\n- name: Remove a single container\n  community.docker.docker_network:\n    name: network_one\n    connected: \"{{ fulllist|difference(['container_a']) }}\"\n\n- name: Add a container to a network, leaving existing containers connected\n  community.docker.docker_network:\n    name: network_one\n    connected:\n      - container_a\n    appends: yes\n\n- name: Create a network with driver options\n  community.docker.docker_network:\n    name: network_two\n    driver_options:\n      com.docker.network.bridge.name: net2\n\n- name: Create a network with custom IPAM config\n  community.docker.docker_network:\n    name: network_three\n    ipam_config:\n      - subnet: 172.3.27.0/24\n        gateway: 172.3.27.2\n        iprange: 172.3.27.0/26\n        aux_addresses:\n          host1: 172.3.27.3\n          host2: 172.3.27.4\n\n- name: Create a network with labels\n  community.docker.docker_network:\n    name: network_four\n    labels:\n      key1: value1\n      key2: value2\n\n- name: Create a network with IPv6 IPAM config\n  community.docker.docker_network:\n    name: network_ipv6_one\n    enable_ipv6: yes\n    ipam_config:\n      - subnet: fdd1:ac8c:0557:7ce1::/64\n\n- name: Create a network with IPv6 and custom IPv4 IPAM config\n  community.docker.docker_network:\n    name: network_ipv6_two\n    enable_ipv6: yes\n    ipam_config:\n      - subnet: 172.4.27.0/24\n      - subnet: fdd1:ac8c:0557:7ce2::/64\n\n- name: Delete a network, disconnecting all containers\n  community.docker.docker_network:\n    name: network_one\n    state: absent\n    force: yes\n",
        "metadata": null,
        "return": {
            "network": {
                "description": [
                    "Network inspection results for the affected network."
                ],
                "returned": "success",
                "sample": {},
                "type": "dict"
            }
        }
    }
}
