{
    "openstack.cloud.baremetal_node_action": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Deploy to nodes controlled by Ironic."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/baremetal_node_action.py",
            "has_action": false,
            "module": "baremetal_node_action",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "config_drive": {
                    "description": [
                        "A configdrive file or HTTP(S) URL that will be passed along to the node."
                    ],
                    "type": "raw"
                },
                "deploy": {
                    "default": "yes",
                    "description": [
                        "Indicates if the resource should be deployed. Allows for deployment logic to be disengaged and control of the node power or maintenance state to be changed."
                    ],
                    "type": "str"
                },
                "instance_info": {
                    "description": [
                        "Definition of the instance information which is used to deploy the node.  This information is only required when an instance is set to present."
                    ],
                    "suboptions": {
                        "image_checksum": {
                            "description": [
                                "The checksum of image_source."
                            ]
                        },
                        "image_disk_format": {
                            "description": [
                                "The type of image that has been requested to be deployed."
                            ]
                        },
                        "image_source": {
                            "description": [
                                "An HTTP(S) URL where the image can be retrieved from."
                            ]
                        }
                    },
                    "type": "dict"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "ironic_url": {
                    "description": [
                        "If noauth mode is utilized, this is required to be set to the endpoint URL for the Ironic API.  Use with \"auth\" and \"auth_type\" settings set to None."
                    ],
                    "type": "str"
                },
                "maintenance": {
                    "description": [
                        "A setting to allow the direct control if a node is in maintenance mode.",
                        "I(maintenance) can be C('yes'), C('no'), C('True'), or C('False')."
                    ],
                    "type": "str"
                },
                "maintenance_reason": {
                    "description": [
                        "A string expression regarding the reason a node is in a maintenance mode."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name of the node to create."
                    ],
                    "type": "str"
                },
                "power": {
                    "default": "present",
                    "description": [
                        "A setting to allow power state to be asserted allowing nodes that are not yet deployed to be powered on, and nodes that are deployed to be powered off.",
                        "I(power) can be C('present'), C('absent'), C('maintenance') or C('off')."
                    ],
                    "type": "str"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "state": {
                    "default": "present",
                    "description": [
                        "Indicates desired state of the resource.",
                        "I(state) can be C('present'), C('absent'), C('maintenance') or C('off')."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 1800,
                    "description": [
                        "An integer value representing the number of seconds to wait for the node activation or deactivation to complete."
                    ],
                    "type": "int"
                },
                "uuid": {
                    "description": [
                        "globally unique identifier (UUID) to be given to the resource."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": "no",
                    "description": [
                        "A boolean value instructing the module to wait for node activation or deactivation to complete before returning."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Activate/Deactivate Bare Metal Resources from OpenStack"
        },
        "examples": "\n# Activate a node by booting an image with a configdrive attached\n- openstack.cloud.baremetal_node_action:\n    cloud: \"openstack\"\n    uuid: \"d44666e1-35b3-4f6b-acb0-88ab7052da69\"\n    state: present\n    power: present\n    deploy: True\n    maintenance: False\n    config_drive: \"http://192.168.1.1/host-configdrive.iso\"\n    instance_info:\n      image_source: \"http://192.168.1.1/deploy_image.img\"\n      image_checksum: \"356a6b55ecc511a20c33c946c4e678af\"\n      image_disk_format: \"qcow\"\n    delegate_to: localhost\n\n# Activate a node by booting an image with a configdrive json object\n- openstack.cloud.baremetal_node_action:\n    uuid: \"d44666e1-35b3-4f6b-acb0-88ab7052da69\"\n    auth_type: None\n    ironic_url: \"http://192.168.1.1:6385/\"\n    config_drive:\n      meta_data:\n        hostname: node1\n        public_keys:\n          default: ssh-rsa AAA...BBB==\n    instance_info:\n      image_source: \"http://192.168.1.1/deploy_image.img\"\n      image_checksum: \"356a6b55ecc511a20c33c946c4e678af\"\n      image_disk_format: \"qcow\"\n    delegate_to: localhost\n",
        "metadata": null,
        "return": null
    }
}
