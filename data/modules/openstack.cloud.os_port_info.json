{
    "openstack.cloud.os_port_info": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Retrieve information about ports from OpenStack.",
                "This module was called C(openstack.cloud.port_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.port_info) module no longer returns C(ansible_facts)!"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/port_info.py",
            "has_action": false,
            "module": "port_info",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "filters": {
                    "description": [
                        "A dictionary of meta data to use for further filtering. Elements of this dictionary will be matched against the returned port dictionaries. Matching is currently limited to strings within the port dictionary, or strings within nested dictionaries."
                    ],
                    "type": "dict"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "port": {
                    "description": [
                        "Unique name or ID of a port."
                    ],
                    "type": "str"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "How long should ansible wait for the requested resource."
                    ],
                    "type": "int"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Retrieve information about ports within OpenStack."
        },
        "examples": "\n# Gather information about all ports\n- openstack.cloud.port_info:\n    cloud: mycloud\n  register: result\n\n- debug:\n    msg: \"{{ result.openstack_ports }}\"\n\n# Gather information about a single port\n- openstack.cloud.port_info:\n    cloud: mycloud\n    port: 6140317d-e676-31e1-8a4a-b1913814a471\n\n# Gather information about all ports that have device_id set to a specific value\n# and with a status of ACTIVE.\n- openstack.cloud.port_info:\n    cloud: mycloud\n    filters:\n      device_id: 1038a010-3a37-4a9d-82ea-652f1da36597\n      status: ACTIVE\n",
        "metadata": null,
        "return": {
            "openstack_ports": {
                "contains": {
                    "admin_state_up": {
                        "description": "The administrative state of the router, which is up (true) or down (false).",
                        "returned": "success",
                        "sample": true,
                        "type": "bool"
                    },
                    "allowed_address_pairs": {
                        "description": "A set of zero or more allowed address pairs. An address pair consists of an IP address and MAC address.",
                        "returned": "success",
                        "sample": [],
                        "type": "list"
                    },
                    "binding:host_id": {
                        "description": "The UUID of the host where the port is allocated.",
                        "returned": "success",
                        "sample": "b4bd682d-234a-4091-aa5b-4b025a6a7759",
                        "type": "str"
                    },
                    "binding:profile": {
                        "description": "A dictionary the enables the application running on the host to pass and receive VIF port-specific information to the plug-in.",
                        "returned": "success",
                        "sample": {},
                        "type": "dict"
                    },
                    "binding:vif_details": {
                        "description": "A dictionary that enables the application to pass information about functions that the Networking API provides.",
                        "returned": "success",
                        "sample": {
                            "port_filter": true
                        },
                        "type": "dict"
                    },
                    "binding:vif_type": {
                        "description": "The VIF type for the port.",
                        "returned": "success",
                        "sample": "ovs",
                        "type": "dict"
                    },
                    "binding:vnic_type": {
                        "description": "The virtual network interface card (vNIC) type that is bound to the neutron port.",
                        "returned": "success",
                        "sample": "normal",
                        "type": "str"
                    },
                    "device_id": {
                        "description": "The UUID of the device that uses this port.",
                        "returned": "success",
                        "sample": "b4bd682d-234a-4091-aa5b-4b025a6a7759",
                        "type": "str"
                    },
                    "device_owner": {
                        "description": "The UUID of the entity that uses this port.",
                        "returned": "success",
                        "sample": "network:router_interface",
                        "type": "str"
                    },
                    "dns_assignment": {
                        "description": "DNS assignment information.",
                        "returned": "success",
                        "type": "list"
                    },
                    "dns_name": {
                        "description": "DNS name",
                        "returned": "success",
                        "sample": "",
                        "type": "str"
                    },
                    "extra_dhcp_opts": {
                        "description": "A set of zero or more extra DHCP option pairs. An option pair consists of an option value and name.",
                        "returned": "success",
                        "sample": [],
                        "type": "list"
                    },
                    "fixed_ips": {
                        "description": "The IP addresses for the port. Includes the IP address and UUID of the subnet.",
                        "returned": "success",
                        "type": "list"
                    },
                    "id": {
                        "description": "The UUID of the port.",
                        "returned": "success",
                        "sample": "3ec25c97-7052-4ab8-a8ba-92faf84148de",
                        "type": "str"
                    },
                    "ip_address": {
                        "description": "The IP address.",
                        "returned": "success",
                        "sample": "127.0.0.1",
                        "type": "str"
                    },
                    "mac_address": {
                        "description": "The MAC address.",
                        "returned": "success",
                        "sample": "00:00:5E:00:53:42",
                        "type": "str"
                    },
                    "name": {
                        "description": "The port name.",
                        "returned": "success",
                        "sample": "port_name",
                        "type": "str"
                    },
                    "network_id": {
                        "description": "The UUID of the attached network.",
                        "returned": "success",
                        "sample": "dd1ede4f-3952-4131-aab6-3b8902268c7d",
                        "type": "str"
                    },
                    "port_security_enabled": {
                        "description": "The port security status. The status is enabled (true) or disabled (false).",
                        "returned": "success",
                        "sample": false,
                        "type": "bool"
                    },
                    "security_groups": {
                        "description": "The UUIDs of any attached security groups.",
                        "returned": "success",
                        "type": "list"
                    },
                    "status": {
                        "description": "The port status.",
                        "returned": "success",
                        "sample": "ACTIVE",
                        "type": "str"
                    },
                    "tenant_id": {
                        "description": "The UUID of the tenant who owns the network.",
                        "returned": "success",
                        "sample": "51fce036d7984ba6af4f6c849f65ef00",
                        "type": "str"
                    }
                },
                "description": "List of port dictionaries. A subset of the dictionary keys listed below may be returned, depending on your cloud provider.",
                "returned": "always, but can be null",
                "type": "complex"
            }
        }
    }
}
