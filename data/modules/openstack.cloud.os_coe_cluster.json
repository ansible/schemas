{
    "openstack.cloud.os_coe_cluster": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Add or Remove COE cluster from the OpenStack Container Infra service."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/coe_cluster.py",
            "has_action": false,
            "module": "coe_cluster",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "cluster_template_id": {
                    "description": [
                        "The template ID of cluster template."
                    ],
                    "required": true,
                    "type": "str"
                },
                "discovery_url": {
                    "description": [
                        "Url used for cluster node discovery"
                    ],
                    "type": "str"
                },
                "docker_volume_size": {
                    "description": [
                        "The size in GB of the docker volume"
                    ],
                    "type": "int"
                },
                "flavor_id": {
                    "description": [
                        "The flavor of the minion node for this ClusterTemplate"
                    ],
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "keypair": {
                    "description": [
                        "Name of the keypair to use."
                    ],
                    "type": "str"
                },
                "labels": {
                    "description": [
                        "One or more key/value pairs"
                    ],
                    "type": "raw"
                },
                "master_count": {
                    "default": 1,
                    "description": [
                        "The number of master nodes for this cluster"
                    ],
                    "type": "int"
                },
                "master_flavor_id": {
                    "description": [
                        "The flavor of the master node for this ClusterTemplate"
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name that has to be given to the cluster template"
                    ],
                    "required": true,
                    "type": "str"
                },
                "node_count": {
                    "default": 1,
                    "description": [
                        "The number of nodes for this cluster"
                    ],
                    "type": "int"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Indicate desired state of the resource."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 60,
                    "description": [
                        "Timeout for creating the cluster in minutes. Default to 60 mins if not set"
                    ],
                    "type": "int"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Add/Remove COE cluster from OpenStack Cloud"
        },
        "examples": "\n# Create a new Kubernetes cluster\n- openstack.cloud.coe_cluster:\n    name: k8s\n    cluster_template_id: k8s-ha\n    keypair: mykey\n    master_count: 3\n    node_count: 5\n",
        "metadata": null,
        "return": {
            "cluster": {
                "contains": {
                    "api_address": {
                        "description": [
                            "Api address of cluster master node"
                        ],
                        "sample": "https://172.24.4.30:6443",
                        "type": "str"
                    },
                    "cluster_template_id": {
                        "description": "The cluster_template UUID",
                        "sample": "7b1418c8-cea8-48fc-995d-52b66af9a9aa",
                        "type": "str"
                    },
                    "coe_version": {
                        "description": [
                            "Version of the COE software currently running in this cluster"
                        ],
                        "sample": "v1.11.1",
                        "type": "str"
                    },
                    "container_version": {
                        "description": [
                            "Version of the container software. Example: docker version."
                        ],
                        "sample": "1.12.6",
                        "type": "str"
                    },
                    "create_timeout": {
                        "description": [
                            "Timeout for creating the cluster in minutes. Default to 60 if not set."
                        ],
                        "sample": 60,
                        "type": "int"
                    },
                    "created_at": {
                        "description": [
                            "The time in UTC at which the cluster is created"
                        ],
                        "sample": "2018-08-16T10:29:45+00:00",
                        "type": "str"
                    },
                    "discovery_url": {
                        "description": [
                            "Url used for cluster node discovery"
                        ],
                        "sample": "https://discovery.etcd.io/a42ee38e7113f31f4d6324f24367aae5",
                        "type": "str"
                    },
                    "faults": {
                        "description": [
                            "Fault info collected from the Heat resources of this cluster"
                        ],
                        "sample": {
                            "0": "ResourceInError: resources[0].resources..."
                        },
                        "type": "dict"
                    },
                    "flavor_id": {
                        "description": [
                            "The flavor of the minion node for this cluster"
                        ],
                        "sample": "c1.c1r1",
                        "type": "str"
                    },
                    "id": {
                        "description": [
                            "Unique UUID for this cluster"
                        ],
                        "sample": "86246a4d-a16c-4a58-9e96ad7719fe0f9d",
                        "type": "str"
                    },
                    "keypair": {
                        "description": [
                            "Name of the keypair to use."
                        ],
                        "sample": "mykey",
                        "type": "str"
                    },
                    "labels": {
                        "description": "One or more key/value pairs",
                        "sample": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "type": "dict"
                    },
                    "master_addresses": {
                        "description": [
                            "IP addresses of cluster master nodes"
                        ],
                        "sample": [
                            "172.24.4.5"
                        ],
                        "type": "list"
                    },
                    "master_count": {
                        "description": [
                            "The number of master nodes for this cluster."
                        ],
                        "sample": 1,
                        "type": "int"
                    },
                    "master_flavor_id": {
                        "description": [
                            "The flavor of the master node for this cluster"
                        ],
                        "sample": "c1.c1r1",
                        "type": "str"
                    },
                    "name": {
                        "description": [
                            "Name that has to be given to the cluster"
                        ],
                        "sample": "k8scluster",
                        "type": "str"
                    },
                    "node_addresses": {
                        "description": [
                            "IP addresses of cluster slave nodes"
                        ],
                        "sample": [
                            "172.24.4.8"
                        ],
                        "type": "list"
                    },
                    "node_count": {
                        "description": [
                            "The number of master nodes for this cluster."
                        ],
                        "sample": 1,
                        "type": "int"
                    },
                    "stack_id": {
                        "description": [
                            "Stack id of the Heat stack"
                        ],
                        "sample": "07767ec6-85f5-44cb-bd63-242a8e7f0d9d",
                        "type": "str"
                    },
                    "status": {
                        "description": "Status of the cluster from the heat stack",
                        "sample": "CREATE_COMLETE",
                        "type": "str"
                    },
                    "status_reason": {
                        "description": [
                            "Status reason of the cluster from the heat stack"
                        ],
                        "sample": "Stack CREATE completed successfully",
                        "type": "str"
                    },
                    "updated_at": {
                        "description": [
                            "The time in UTC at which the cluster is updated"
                        ],
                        "sample": "2018-08-16T10:39:25+00:00",
                        "type": "str"
                    }
                },
                "description": "Dictionary describing the cluster.",
                "returned": "On success when I(state) is 'present'",
                "type": "complex"
            },
            "id": {
                "description": "The cluster UUID.",
                "returned": "On success when I(state) is 'present'",
                "sample": "39007a7e-ee4f-4d13-8283-b4da2e037c69",
                "type": "str"
            }
        }
    }
}
