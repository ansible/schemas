{
    "community.mysql.mysql_query": {
        "doc": {
            "author": [
                "Andrew Klychkov (@Andersson007)"
            ],
            "collection": "community.mysql",
            "description": [
                "Runs arbitrary MySQL queries.",
                "Pay attention, the module does not support check mode! All queries will be executed in autocommit mode.",
                "To run SQL queries from a file, use M(community.mysql.mysql_db) module."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mysql/plugins/modules/mysql_query.py",
            "has_action": false,
            "module": "mysql_query",
            "notes": [
                "Requires the PyMySQL (Python 2.7 and Python 3.X) or MySQL-python (Python 2.X) package installed on the remote host. The Python package may be installed with apt-get install python-pymysql (Ubuntu; see M(ansible.builtin.apt)) or yum install python2-PyMySQL (RHEL/CentOS/Fedora; see M(ansible.builtin.yum)). You can also use dnf install python2-PyMySQL for newer versions of Fedora; see M(ansible.builtin.dnf).",
                "Be sure you have PyMySQL or MySQLdb library installed on the target machine for the Python interpreter Ansible uses, for example, if it is Python 3, you must install the library for Python 3. You can also change the interpreter. For more information, see U(https://docs.ansible.com/ansible/latest/reference_appendices/interpreter_discovery.html).",
                "Both C(login_password) and C(login_user) are required when you are passing credentials. If none are present, the module will attempt to read the credentials from C(~/.my.cnf), and finally fall back to using the MySQL default login of 'root' with no password.",
                "If there are problems with local connections, using I(login_unix_socket=/path/to/mysqld/socket) instead of I(login_host=localhost) might help. As an example, the default MariaDB installation of version 10.4 and later uses the unix_socket authentication plugin by default that without using I(login_unix_socket=/var/run/mysqld/mysqld.sock) (the default path) causes the error ``Host '127.0.0.1' is not allowed to connect to this MariaDB server``.",
                "Alternatively, you can use the mysqlclient library instead of MySQL-python (MySQLdb) which supports both Python 2.X and Python >=3.5. See U(https://pypi.org/project/mysqlclient/) how to install it."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_ca"
                    ],
                    "description": [
                        "The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server."
                    ],
                    "type": "path"
                },
                "check_hostname": {
                    "description": [
                        "Whether to validate the server host name when an SSL connection is required. Corresponds to MySQL CLIs C(--ssl) switch.",
                        "Setting this to C(false) disables hostname verification. Use with caution.",
                        "Requires pymysql >= 0.7.11.",
                        "This optoin has no effect on MySQLdb."
                    ],
                    "type": "bool",
                    "version_added": "1.1.0",
                    "version_added_collection": "community.mysql"
                },
                "client_cert": {
                    "aliases": [
                        "ssl_cert"
                    ],
                    "description": [
                        "The path to a client public key certificate."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "ssl_key"
                    ],
                    "description": [
                        "The path to the client private key."
                    ],
                    "type": "path"
                },
                "config_file": {
                    "default": "~/.my.cnf",
                    "description": [
                        "Specify a config file from which user and password are to be read."
                    ],
                    "type": "path"
                },
                "connect_timeout": {
                    "default": 30,
                    "description": [
                        "The connection timeout when connecting to the MySQL server."
                    ],
                    "type": "int"
                },
                "login_db": {
                    "description": [
                        "Name of database to connect to and run queries against."
                    ],
                    "type": "str"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "Host running the database.",
                        "In some cases for local connections the I(login_unix_socket=/path/to/mysqld/socket), that is usually C(/var/run/mysqld/mysqld.sock), needs to be used instead of I(login_host=localhost)."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_port": {
                    "default": 3306,
                    "description": [
                        "Port of the MySQL server. Requires I(login_host) be defined as other than localhost if login_port is used."
                    ],
                    "type": "int"
                },
                "login_unix_socket": {
                    "description": [
                        "The path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "named_args": {
                    "description": [
                        "Dictionary of key-value arguments to pass to the query.",
                        "Mutually exclusive with I(positional_args)."
                    ],
                    "type": "dict"
                },
                "positional_args": {
                    "description": [
                        "List of values to be passed as positional arguments to the query.",
                        "Mutually exclusive with I(named_args)."
                    ],
                    "type": "list"
                },
                "query": {
                    "description": [
                        "SQL query to run. Multiple queries can be passed using YAML list syntax.",
                        "Must be a string or YAML list containing strings."
                    ],
                    "required": true,
                    "type": "raw"
                },
                "single_transaction": {
                    "default": false,
                    "description": [
                        "Where passed queries run in a single transaction (C(yes)) or commit them one-by-one (C(no))."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "PyMySQL (Python 2.7 and Python 3.X), or",
                "MySQLdb (Python 2.x)"
            ],
            "seealso": [
                {
                    "module": "community.mysql.mysql_db"
                }
            ],
            "short_description": "Run MySQL queries",
            "version_added": "0.1.0",
            "version_added_collection": "community.mysql"
        },
        "examples": "\n- name: Simple select query to acme db\n  community.mysql.mysql_query:\n    login_db: acme\n    query: SELECT * FROM orders\n\n- name: Select query to db acme with positional arguments\n  community.mysql.mysql_query:\n    login_db: acme\n    query: SELECT * FROM acme WHERE id = %s AND story = %s\n    positional_args:\n    - 1\n    - test\n\n- name: Select query to test_db with named_args\n  community.mysql.mysql_query:\n    login_db: test_db\n    query: SELECT * FROM test WHERE id = %(id_val)s AND story = %(story_val)s\n    named_args:\n      id_val: 1\n      story_val: test\n\n- name: Run several insert queries against db test_db in single transaction\n  community.mysql.mysql_query:\n    login_db: test_db\n    query:\n    - INSERT INTO articles (id, story) VALUES (2, 'my_long_story')\n    - INSERT INTO prices (id, price) VALUES (123, '100.00')\n    single_transaction: yes\n",
        "metadata": null,
        "return": {
            "executed_queries": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "SELECT * FROM bar",
                    "UPDATE bar SET id = 1 WHERE id = 2"
                ],
                "type": "list"
            },
            "query_result": {
                "description": [
                    "List of lists (sublist for each query) containing dictionaries in column:value form representing returned rows."
                ],
                "returned": "changed",
                "sample": [
                    [
                        {
                            "Column": "Value1"
                        },
                        {
                            "Column": "Value2"
                        }
                    ],
                    [
                        {
                            "ID": 1
                        },
                        {
                            "ID": 2
                        }
                    ]
                ],
                "type": "list"
            },
            "rowcount": {
                "description": "Number of affected rows for each subquery.",
                "returned": "changed",
                "sample": [
                    5,
                    1
                ],
                "type": "list"
            }
        }
    }
}
