{
    "cisco.nxos.nxos_command": {
        "doc": {
            "author": "Peter Sprygada (@privateip)",
            "collection": "cisco.nxos",
            "description": [
                "Sends an arbitrary command to an NXOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/nxos/plugins/modules/nxos_command.py",
            "has_action": true,
            "module": "nxos_command",
            "notes": [
                "For information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`",
                "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
                "For more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_."
            ],
            "options": {
                "commands": {
                    "description": [
                        "The commands to send to the remote NXOS device.  The resulting output from the command is returned.  If the I(wait_for) argument is provided, the module is not returned until the condition is satisfied or the number of retires as expired.",
                        "The I(commands) argument also accepts an alternative form that allows for complex values that specify the command to run and the output format to return. This can be done on a command by command basis.  The complex argument supports the keywords C(command) and C(output) where C(command) is the command to run and C(output) is one of 'text' or 'json'.",
                        "If a command sent to the device requires answering a prompt, it is possible to pass a dict containing command, answer and prompt. Common answers are 'y' or \"\\r\" (carriage return, must be double quotes). See examples."
                    ],
                    "elements": "raw",
                    "required": true,
                    "type": "list"
                },
                "interval": {
                    "default": 1,
                    "description": [
                        "Configures the interval in seconds to wait between retries of the command.  If the command does not pass the specified conditional, the interval indicates how to long to wait before trying the command again."
                    ],
                    "type": "int"
                },
                "match": {
                    "choices": [
                        "any",
                        "all"
                    ],
                    "default": "all",
                    "description": [
                        "The I(match) argument is used in conjunction with the I(wait_for) argument to specify the match policy.  Valid values are C(all) or C(any).  If the value is set to C(all) then all conditionals in the I(wait_for) must be satisfied.  If the value is set to C(any) then only one of the values must be satisfied."
                    ],
                    "type": "str"
                },
                "provider": {
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli).",
                        "Starting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.",
                        "This option will be removed in a release after 2022-06-01.",
                        "For more information please see the L(NXOS Platform Options guide, ../network/user_guide/platform_nxos.html).",
                        "HORIZONTALLINE",
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "auth_pass": {
                            "description": [
                                "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead."
                            ],
                            "type": "str"
                        },
                        "authorize": {
                            "default": false,
                            "description": [
                                "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead."
                            ],
                            "type": "bool"
                        },
                        "host": {
                            "description": [
                                "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport."
                            ],
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead."
                            ],
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443)."
                            ],
                            "type": "int"
                        },
                        "ssh_keyfile": {
                            "description": [
                                "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead."
                            ],
                            "type": "str"
                        },
                        "timeout": {
                            "description": [
                                "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc)."
                            ],
                            "type": "int"
                        },
                        "transport": {
                            "choices": [
                                "cli",
                                "nxapi"
                            ],
                            "default": "cli",
                            "description": [
                                "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi."
                            ],
                            "type": "str"
                        },
                        "use_proxy": {
                            "default": true,
                            "description": [
                                "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored."
                            ],
                            "type": "bool"
                        },
                        "use_ssl": {
                            "default": false,
                            "description": [
                                "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored."
                            ],
                            "type": "bool"
                        },
                        "username": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead."
                            ],
                            "type": "str"
                        },
                        "validate_certs": {
                            "default": false,
                            "description": [
                                "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored."
                            ],
                            "type": "bool"
                        }
                    },
                    "type": "dict"
                },
                "retries": {
                    "default": 10,
                    "description": [
                        "Specifies the number of retries a command should by tried before it is considered failed.  The command is run on the target device every retry and evaluated against the I(wait_for) conditionals."
                    ],
                    "type": "int"
                },
                "wait_for": {
                    "aliases": [
                        "waitfor"
                    ],
                    "description": [
                        "Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries, the task fails.  See examples."
                    ],
                    "elements": "str",
                    "type": "list"
                }
            },
            "short_description": "Run arbitrary command on Cisco NXOS devices",
            "version_added": "1.0.0",
            "version_added_collection": "cisco.nxos"
        },
        "examples": "\n- name: run show version on remote devices\n  cisco.nxos.nxos_command:\n    commands: show version\n\n- name: run show version and check to see if output contains Cisco\n  cisco.nxos.nxos_command:\n    commands: show version\n    wait_for: result[0] contains Cisco\n\n- name: run multiple commands on remote nodes\n  cisco.nxos.nxos_command:\n    commands:\n    - show version\n    - show interfaces\n\n- name: run multiple commands and evaluate the output\n  cisco.nxos.nxos_command:\n    commands:\n    - show version\n    - show interfaces\n    wait_for:\n    - result[0] contains Cisco\n    - result[1] contains loopback0\n\n- name: run commands and specify the output format\n  cisco.nxos.nxos_command:\n    commands:\n    - command: show version\n      output: json\n\n- name: run commands that require answering a prompt\n  cisco.nxos.nxos_command:\n    commands:\n    - configure terminal\n    - command: no feature npv\n      prompt: Do you want to continue\n      answer: y\n\n",
        "metadata": null,
        "return": {
            "failed_conditions": {
                "description": "The list of conditionals that have failed",
                "returned": "failed",
                "sample": [
                    "...",
                    "..."
                ],
                "type": "list"
            },
            "stdout": {
                "description": "The set of responses from the commands",
                "returned": "always apart from low level errors (such as action plugin)",
                "sample": [
                    "...",
                    "..."
                ],
                "type": "list"
            },
            "stdout_lines": {
                "description": "The value of stdout split into a list",
                "returned": "always apart from low level errors (such as action plugin)",
                "sample": [
                    [
                        "...",
                        "..."
                    ],
                    [
                        "..."
                    ],
                    [
                        "..."
                    ]
                ],
                "type": "list"
            }
        }
    }
}
