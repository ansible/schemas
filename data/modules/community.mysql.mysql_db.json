{
    "community.mysql.mysql_db": {
        "doc": {
            "author": "Ansible Core Team",
            "collection": "community.mysql",
            "description": [
                "Add or remove MySQL databases from a remote host."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mysql/plugins/modules/mysql_db.py",
            "has_action": false,
            "module": "mysql_db",
            "notes": [
                "Supports C(check_mode).",
                "Requires the mysql and mysqldump binaries on the remote host.",
                "This module is B(not idempotent) when I(state) is C(import), and will import the dump file each time if run more than once.",
                "Requires the PyMySQL (Python 2.7 and Python 3.X) or MySQL-python (Python 2.X) package installed on the remote host. The Python package may be installed with apt-get install python-pymysql (Ubuntu; see M(ansible.builtin.apt)) or yum install python2-PyMySQL (RHEL/CentOS/Fedora; see M(ansible.builtin.yum)). You can also use dnf install python2-PyMySQL for newer versions of Fedora; see M(ansible.builtin.dnf).",
                "Be sure you have PyMySQL or MySQLdb library installed on the target machine for the Python interpreter Ansible uses, for example, if it is Python 3, you must install the library for Python 3. You can also change the interpreter. For more information, see U(https://docs.ansible.com/ansible/latest/reference_appendices/interpreter_discovery.html).",
                "Both C(login_password) and C(login_user) are required when you are passing credentials. If none are present, the module will attempt to read the credentials from C(~/.my.cnf), and finally fall back to using the MySQL default login of 'root' with no password.",
                "If there are problems with local connections, using I(login_unix_socket=/path/to/mysqld/socket) instead of I(login_host=localhost) might help. As an example, the default MariaDB installation of version 10.4 and later uses the unix_socket authentication plugin by default that without using I(login_unix_socket=/var/run/mysqld/mysqld.sock) (the default path) causes the error ``Host '127.0.0.1' is not allowed to connect to this MariaDB server``.",
                "Alternatively, you can use the mysqlclient library instead of MySQL-python (MySQLdb) which supports both Python 2.X and Python >=3.5. See U(https://pypi.org/project/mysqlclient/) how to install it."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_ca"
                    ],
                    "description": [
                        "The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server."
                    ],
                    "type": "path"
                },
                "check_hostname": {
                    "description": [
                        "Whether to validate the server host name when an SSL connection is required. Corresponds to MySQL CLIs C(--ssl) switch.",
                        "Setting this to C(false) disables hostname verification. Use with caution.",
                        "Requires pymysql >= 0.7.11.",
                        "This optoin has no effect on MySQLdb."
                    ],
                    "type": "bool",
                    "version_added": "1.1.0",
                    "version_added_collection": "community.mysql"
                },
                "check_implicit_admin": {
                    "default": false,
                    "description": [
                        "Check if mysql allows login as root/nopassword before trying supplied credentials.",
                        "If success, passed I(login_user)/I(login_password) will be ignored."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "client_cert": {
                    "aliases": [
                        "ssl_cert"
                    ],
                    "description": [
                        "The path to a client public key certificate."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "ssl_key"
                    ],
                    "description": [
                        "The path to the client private key."
                    ],
                    "type": "path"
                },
                "collation": {
                    "default": "",
                    "description": [
                        "Collation mode (sorting). This only applies to new table/databases and does not update existing ones, this is a limitation of MySQL."
                    ],
                    "type": "str"
                },
                "config_file": {
                    "default": "~/.my.cnf",
                    "description": [
                        "Specify a config file from which user and password are to be read."
                    ],
                    "type": "path"
                },
                "config_overrides_defaults": {
                    "default": false,
                    "description": [
                        "If C(yes), connection parameters from I(config_file) will override the default values of I(login_host) and I(login_port) parameters.",
                        "Used when I(stat) is C(present) or C(absent), ignored otherwise.",
                        "It needs Python 3.5+ as the default interpreter on a target host."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "connect_timeout": {
                    "default": 30,
                    "description": [
                        "The connection timeout when connecting to the MySQL server."
                    ],
                    "type": "int"
                },
                "dump_extra_args": {
                    "description": [
                        "Provide additional arguments for mysqldump. Used when I(state=dump) only, ignored otherwise."
                    ],
                    "type": "str",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "encoding": {
                    "default": "",
                    "description": [
                        "Encoding mode to use, examples include C(utf8) or C(latin1_swedish_ci), at creation of database, dump or importation of sql script."
                    ],
                    "type": "str"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Continue dump or import even if we get an SQL error.",
                        "Used only when I(state) is C(dump) or C(import)."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "hex_blob": {
                    "default": false,
                    "description": [
                        "Dump binary columns using hexadecimal notation."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "ignore_tables": {
                    "default": [],
                    "description": [
                        "A list of table names that will be ignored in the dump of the form database_name.table_name."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "Host running the database.",
                        "In some cases for local connections the I(login_unix_socket=/path/to/mysqld/socket), that is usually C(/var/run/mysqld/mysqld.sock), needs to be used instead of I(login_host=localhost)."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_port": {
                    "default": 3306,
                    "description": [
                        "Port of the MySQL server. Requires I(login_host) be defined as other than localhost if login_port is used."
                    ],
                    "type": "int"
                },
                "login_unix_socket": {
                    "description": [
                        "The path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "master_data": {
                    "choices": [
                        0,
                        1,
                        2
                    ],
                    "default": 0,
                    "description": [
                        "Option to dump a master replication server to produce a dump file that can be used to set up another server as a slave of the master.",
                        "C(0) to not include master data.",
                        "C(1) to generate a 'CHANGE MASTER TO' statement required on the slave to start the replication process.",
                        "C(2) to generate a commented 'CHANGE MASTER TO'.",
                        "Can be used when I(state=dump)."
                    ],
                    "type": "int",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "name": {
                    "aliases": [
                        "db"
                    ],
                    "description": [
                        "Name of the database to add or remove.",
                        "I(name=all) may only be provided if I(state) is C(dump) or C(import).",
                        "List of databases is provided with I(state=dump), I(state=present) and I(state=absent).",
                        "If I(name=all) it works like --all-databases option for mysqldump (Added in 2.0)."
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "quick": {
                    "default": true,
                    "description": [
                        "Option used for dumping large tables."
                    ],
                    "type": "bool"
                },
                "restrict_config_file": {
                    "default": false,
                    "description": [
                        "Read only passed I(config_file).",
                        "When I(state) is C(dump) or C(import), by default the module passes I(config_file) parameter using C(--defaults-extra-file) command-line argument to C(mysql/mysqldump) utilities under the hood that read named option file in addition to usual option files.",
                        "If this behavior is undesirable, use C(yes) to read only named option file."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "single_transaction": {
                    "default": false,
                    "description": [
                        "Execute the dump in a single transaction."
                    ],
                    "type": "bool"
                },
                "skip_lock_tables": {
                    "default": false,
                    "description": [
                        "Skip locking tables for read. Used when I(state=dump), ignored otherwise."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "state": {
                    "choices": [
                        "absent",
                        "dump",
                        "import",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "The database state."
                    ],
                    "type": "str"
                },
                "target": {
                    "description": [
                        "Location, on the remote host, of the dump file to read from or write to.",
                        "Uncompressed SQL files (C(.sql)) as well as bzip2 (C(.bz2)), gzip (C(.gz)) and xz (Added in 2.0) compressed files are supported."
                    ],
                    "type": "path"
                },
                "unsafe_login_password": {
                    "default": false,
                    "description": [
                        "If C(no), the module will safely use a shell-escaped version of the I(login_password) value.",
                        "It makes sense to use C(yes) only if there are special symbols in the value and errors C(Access denied) occur.",
                        "Used only when I(state) is C(import) or C(dump) and I(login_password) is passed, ignored otherwise."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "use_shell": {
                    "default": false,
                    "description": [
                        "Used to prevent C(Broken pipe) errors when the imported I(target) file is compressed.",
                        "If C(yes), the module will internally execute commands via a shell.",
                        "Used when I(state=import), ignored otherwise."
                    ],
                    "type": "bool",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                }
            },
            "requirements": [
                "MySQLdb (Python 2.x)",
                "PyMySQL (Python 2.7 and Python 3.X), or",
                "mysql (command line binary)",
                "mysqldump (command line binary)"
            ],
            "seealso": [
                {
                    "module": "community.mysql.mysql_info"
                },
                {
                    "module": "community.mysql.mysql_variables"
                },
                {
                    "module": "community.mysql.mysql_user"
                },
                {
                    "module": "community.mysql.mysql_replication"
                },
                {
                    "description": "Complete reference of the MySQL command-line client documentation.",
                    "link": "https://dev.mysql.com/doc/refman/8.0/en/mysql.html",
                    "name": "MySQL command-line client reference"
                },
                {
                    "description": "Complete reference of the ``mysqldump`` client utility documentation.",
                    "link": "https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html",
                    "name": "mysqldump reference"
                },
                {
                    "description": "Complete reference of the CREATE DATABASE command documentation.",
                    "link": "https://dev.mysql.com/doc/refman/8.0/en/create-database.html",
                    "name": "CREATE DATABASE reference"
                },
                {
                    "description": "Complete reference of the DROP DATABASE command documentation.",
                    "link": "https://dev.mysql.com/doc/refman/8.0/en/drop-database.html",
                    "name": "DROP DATABASE reference"
                }
            ],
            "short_description": "Add or remove MySQL databases from a remote host"
        },
        "examples": "\n- name: Create a new database with name 'bobdata'\n  community.mysql.mysql_db:\n    name: bobdata\n    state: present\n\n- name: Create new databases with names 'foo' and 'bar'\n  community.mysql.mysql_db:\n    name:\n      - foo\n      - bar\n    state: present\n\n# Copy database dump file to remote host and restore it to database 'my_db'\n- name: Copy database dump file\n  copy:\n    src: dump.sql.bz2\n    dest: /tmp\n\n- name: Restore database\n  community.mysql.mysql_db:\n    name: my_db\n    state: import\n    target: /tmp/dump.sql.bz2\n\n- name: Restore database ignoring errors\n  community.mysql.mysql_db:\n    name: my_db\n    state: import\n    target: /tmp/dump.sql.bz2\n    force: yes\n\n- name: Dump multiple databases\n  community.mysql.mysql_db:\n    state: dump\n    name: db_1,db_2\n    target: /tmp/dump.sql\n\n- name: Dump multiple databases\n  community.mysql.mysql_db:\n    state: dump\n    name:\n      - db_1\n      - db_2\n    target: /tmp/dump.sql\n\n- name: Dump all databases to hostname.sql\n  community.mysql.mysql_db:\n    state: dump\n    name: all\n    target: /tmp/dump.sql\n\n- name: Dump all databases to hostname.sql including master data\n  community.mysql.mysql_db:\n    state: dump\n    name: all\n    target: /tmp/dump.sql\n    master_data: 1\n\n# Import of sql script with encoding option\n- name: >\n    Import dump.sql with specific latin1 encoding,\n    similar to mysql -u <username> --default-character-set=latin1 -p <password> < dump.sql\n  community.mysql.mysql_db:\n    state: import\n    name: all\n    encoding: latin1\n    target: /tmp/dump.sql\n\n# Dump of database with encoding option\n- name: >\n    Dump of Databse with specific latin1 encoding,\n    similar to mysqldump -u <username> --default-character-set=latin1 -p <password> <database>\n  community.mysql.mysql_db:\n    state: dump\n    name: db_1\n    encoding: latin1\n    target: /tmp/dump.sql\n\n- name: Delete database with name 'bobdata'\n  community.mysql.mysql_db:\n    name: bobdata\n    state: absent\n\n- name: Make sure there is neither a database with name 'foo', nor one with name 'bar'\n  community.mysql.mysql_db:\n    name:\n      - foo\n      - bar\n    state: absent\n\n# Dump database with argument not directly supported by this module\n# using dump_extra_args parameter\n- name: Dump databases without including triggers\n  community.mysql.mysql_db:\n    state: dump\n    name: foo\n    target: /tmp/dump.sql\n    dump_extra_args: --skip-triggers\n\n- name: Try to create database as root/nopassword first. If not allowed, pass the credentials\n  community.mysql.mysql_db:\n    check_implicit_admin: yes\n    login_user: bob\n    login_password: 123456\n    name: bobdata\n    state: present\n",
        "metadata": null,
        "return": {
            "db": {
                "description": "Database names in string format delimited by white space.",
                "returned": "always",
                "sample": "foo bar",
                "type": "str"
            },
            "db_list": {
                "description": "List of database names.",
                "returned": "always",
                "sample": [
                    "foo",
                    "bar"
                ],
                "type": "list"
            },
            "executed_commands": {
                "description": "List of commands which tried to run.",
                "returned": "if executed",
                "sample": [
                    "CREATE DATABASE acme"
                ],
                "type": "list",
                "version_added": "0.1.0",
                "version_added_collection": "community.mysql"
            }
        }
    }
}
