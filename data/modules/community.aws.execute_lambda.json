{
    "community.aws.execute_lambda": {
        "doc": {
            "author": "Ryan Scott Brown (@ryansb) <ryansb@redhat.com>",
            "collection": "community.aws",
            "description": [
                "This module executes AWS Lambda functions, allowing synchronous and asynchronous invocation."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/execute_lambda.py",
            "has_action": false,
            "module": "execute_lambda",
            "notes": [
                "Async invocation will always return an empty C(output) key.",
                "Synchronous invocation may result in a function timeout, resulting in an empty C(output) key.",
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "dry_run": {
                    "default": false,
                    "description": [
                        "Do not *actually* invoke the function. A C(DryRun) call will check that the caller has permissions to call the function, especially for checking cross-account permissions."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "function_arn": {
                    "description": [
                        "The name of the function to be invoked"
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "The name of the function to be invoked. This can only be used for invocations within the calling account. To invoke a function in another account, use I(function_arn) to specify the full ARN."
                    ],
                    "type": "str"
                },
                "payload": {
                    "default": {},
                    "description": [
                        "A dictionary in any form to be provided as input to the Lambda function."
                    ],
                    "type": "dict"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "tail_log": {
                    "default": false,
                    "description": [
                        "If I(tail_log=yes), the result of the task will include the last 4 KB of the CloudWatch log for the function execution. Log tailing only works if you use synchronous invocation I(wait=yes). This is usually used for development or testing Lambdas."
                    ],
                    "type": "bool"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "version_qualifier": {
                    "description": [
                        "Which version/alias of the function to run. This defaults to the C(LATEST) revision, but can be set to any existing version or alias. See U(https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html) for details."
                    ],
                    "type": "str"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Whether to wait for the function results or not. If I(wait=no) the task will not return any results. To wait for the Lambda function to complete, set I(wait=yes) and the result will be available in the I(output) key."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Execute an AWS Lambda function",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n- community.aws.execute_lambda:\n    name: test-function\n    # the payload is automatically serialized and sent to the function\n    payload:\n      foo: bar\n      value: 8\n  register: response\n\n# Test that you have sufficient permissions to execute a Lambda function in\n# another account\n- community.aws.execute_lambda:\n    function_arn: arn:aws:lambda:us-east-1:123456789012:function/some-function\n    dry_run: true\n\n- community.aws.execute_lambda:\n    name: test-function\n    payload:\n      foo: bar\n      value: 8\n    wait: true\n    tail_log: true\n  register: response\n  # the response will have a `logs` key that will contain a log (up to 4KB) of the function execution in Lambda\n\n# Pass the Lambda event payload as a json file.\n- community.aws.execute_lambda:\n    name: test-function\n    payload: \"{{ lookup('file','lambda_event.json') }}\"\n  register: response\n\n- community.aws.execute_lambda:\n    name: test-function\n    version_qualifier: PRODUCTION\n",
        "metadata": null,
        "return": {
            "logs": {
                "description": "The last 4KB of the function logs. Only provided if I(tail_log) is true",
                "returned": "if I(tail_log) == true",
                "type": "str"
            },
            "output": {
                "description": "Function output if wait=true and the function returns a value",
                "returned": "success",
                "sample": "{ 'output': 'something' }",
                "type": "dict"
            },
            "status": {
                "description": "C(StatusCode) of API call exit (200 for synchronous invokes, 202 for async)",
                "returned": "always",
                "sample": 200,
                "type": "int"
            }
        }
    }
}
