{
    "community.postgresql.postgresql_subscription": {
        "doc": {
            "author": [
                "Andrew Klychkov (@Andersson007) <aaklychkov@mail.ru>"
            ],
            "collection": "community.postgresql",
            "description": [
                "Add, update, or remove PostgreSQL subscription."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_subscription.py",
            "has_action": false,
            "module": "postgresql_subscription",
            "notes": [
                "PostgreSQL version must be 10 or greater.",
                "Supports C(check_mode).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "cascade": {
                    "default": false,
                    "description": [
                        "Drop subscription dependencies. Has effect with I(state=absent) only.",
                        "Ignored when I(state) is not C(absent)."
                    ],
                    "type": "bool"
                },
                "connparams": {
                    "description": [
                        "The connection dict param-value to connect to the publisher.",
                        "For more information see U(https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).",
                        "Ignored when I(state) is not C(present)."
                    ],
                    "type": "dict"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of the database to connect to and where the subscription state will be changed."
                    ],
                    "required": true,
                    "type": "str"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name of the subscription to add, update, or remove."
                    ],
                    "required": true,
                    "type": "str"
                },
                "owner": {
                    "description": [
                        "Subscription owner.",
                        "If I(owner) is not defined, the owner will be set as I(login_user) or I(session_role).",
                        "Ignored when I(state) is not C(present)."
                    ],
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "publications": {
                    "description": [
                        "The publication names on the publisher to use for the subscription.",
                        "Ignored when I(state) is not C(present)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present",
                        "refresh"
                    ],
                    "default": "present",
                    "description": [
                        "The subscription state.",
                        "C(present) implies that if I(name) subscription doesn't exist, it will be created.",
                        "C(absent) implies that if I(name) subscription exists, it will be removed.",
                        "C(refresh) implies that if I(name) subscription exists, it will be refreshed. Fetch missing table information from publisher. Always returns ``changed`` is ``True``. This will start replication of tables that were added to the subscribed-to publications since the last invocation of REFRESH PUBLICATION or since CREATE SUBSCRIPTION. The existing data in the publications that are being subscribed to should be copied once the replication starts.",
                        "For more information about C(refresh) see U(https://www.postgresql.org/docs/current/sql-altersubscription.html)."
                    ],
                    "type": "str"
                },
                "subsparams": {
                    "description": [
                        "Dictionary of optional parameters for a subscription, e.g. copy_data, enabled, create_slot, etc.",
                        "For update the subscription allowed keys are C(enabled), C(slot_name), C(synchronous_commit), C(publication_name).",
                        "See available parameters to create a new subscription on U(https://www.postgresql.org/docs/current/sql-createsubscription.html).",
                        "Ignored when I(state) is not C(present)."
                    ],
                    "type": "dict"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters I(name), I(publications), I(owner), I(session_role), I(connparams), I(subsparams) are potentially dangerous.",
                        "It makes sense to use C(yes) only when SQL injections via the parameters are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "module": "community.postgresql.postgresql_publication"
                },
                {
                    "module": "community.postgresql.postgresql_info"
                },
                {
                    "description": "Complete reference of the CREATE SUBSCRIPTION command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-createsubscription.html",
                    "name": "CREATE SUBSCRIPTION reference"
                },
                {
                    "description": "Complete reference of the ALTER SUBSCRIPTION command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-altersubscription.html",
                    "name": "ALTER SUBSCRIPTION reference"
                },
                {
                    "description": "Complete reference of the DROP SUBSCRIPTION command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-dropsubscription.html",
                    "name": "DROP SUBSCRIPTION reference"
                }
            ],
            "short_description": "Add, update, or remove PostgreSQL subscription",
            "version_added": "0.2.0",
            "version_added_collection": "community.postgresql"
        },
        "examples": "\n- name: >\n    Create acme subscription in mydb database using acme_publication and\n    the following connection parameters to connect to the publisher.\n    Set the subscription owner as alice.\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: present\n    publications: acme_publication\n    owner: alice\n    connparams:\n      host: 127.0.0.1\n      port: 5432\n      user: repl\n      password: replpass\n      dbname: mydb\n\n- name: Assuming that acme subscription exists, try to change conn parameters\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    connparams:\n      host: 127.0.0.1\n      port: 5432\n      user: repl\n      password: replpass\n      connect_timeout: 100\n\n- name: Refresh acme publication\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: refresh\n\n- name: Drop acme subscription from mydb with dependencies (cascade=yes)\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: absent\n    cascade: yes\n\n- name: Assuming that acme subscription exists and enabled, disable the subscription\n  community.postgresql.postgresql_subscription:\n    db: mydb\n    name: acme\n    state: present\n    subsparams:\n      enabled: no\n",
        "metadata": null,
        "return": {
            "exists": {
                "description": [
                    "Flag indicates the subscription exists or not at the end of runtime."
                ],
                "returned": "always",
                "sample": true,
                "type": "bool"
            },
            "final_state": {
                "description": "Subscription configuration at the end of runtime.",
                "returned": "always",
                "sample": {
                    "conninfo": {},
                    "enabled": true,
                    "owner": "postgres",
                    "slotname": "test",
                    "synccommit": true
                },
                "type": "dict"
            },
            "initial_state": {
                "description": "Subscription configuration at the beginning of runtime.",
                "returned": "always",
                "sample": {
                    "conninfo": {},
                    "enabled": true,
                    "owner": "postgres",
                    "slotname": "test",
                    "synccommit": true
                },
                "type": "dict"
            },
            "name": {
                "description": [
                    "Name of the subscription."
                ],
                "returned": "always",
                "sample": "acme",
                "type": "str"
            },
            "queries": {
                "description": "List of executed queries.",
                "returned": "always",
                "sample": [
                    "DROP SUBSCRIPTION \"mysubscription\""
                ],
                "type": "str"
            }
        }
    }
}
