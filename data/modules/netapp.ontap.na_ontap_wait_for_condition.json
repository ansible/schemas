{
    "netapp.ontap.na_ontap_wait_for_condition": {
        "doc": {
            "author": "NetApp Ansible Team (@carchi8py) <ng-ansibleteam@netapp.com>",
            "collection": "netapp.ontap",
            "description": [
                "Loop over an ONTAP get status request until a condition is satisfied.",
                "Report a timeout error if C(timeout) is exceeded while waiting for the condition."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/netapp/ontap/plugins/modules/na_ontap_wait_for_condition.py",
            "has_action": false,
            "module": "na_ontap_wait_for_condition",
            "notes": [
                "The modules prefixed with na\\\\_ontap are built to support the ONTAP storage platform."
            ],
            "options": {
                "attributes": {
                    "description": [
                        "a dictionary of custom attributes for the event.",
                        "for instance, C(sp_upgrade), C(sp_version) require C(node).",
                        "C(sp_version) requires C(expectd_version)."
                    ],
                    "type": "dict"
                },
                "cert_filepath": {
                    "description": [
                        "path to SSL client cert file (.pem).",
                        "not supported with python 2.6."
                    ],
                    "type": "str",
                    "version_added": "20.6.0",
                    "version_added_collection": "netapp.ontap"
                },
                "conditions": {
                    "description": [
                        "one or more conditions to match",
                        "for instance C(is_in_progress) for C(sp_upgrade), C(firmware_version) for C(sp_version)."
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "feature_flags": {
                    "description": [
                        "Enable or disable a new feature.",
                        "This can be used to enable an experimental feature or disable a new feature that breaks backward compatibility.",
                        "Supported keys and values are subject to change without notice.  Unknown keys are ignored."
                    ],
                    "type": "dict",
                    "version_added": "20.5.0",
                    "version_added_collection": "netapp.ontap"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the ONTAP instance."
                    ],
                    "required": true,
                    "type": "str"
                },
                "http_port": {
                    "description": [
                        "Override the default port (80 or 443) with this port"
                    ],
                    "type": "int"
                },
                "https": {
                    "default": false,
                    "description": [
                        "Enable and disable https.",
                        "Ignored when using REST as only https is supported.",
                        "Ignored when using SSL certificate authentication as it requires SSL."
                    ],
                    "type": "bool"
                },
                "key_filepath": {
                    "description": [
                        "path to SSL client key file."
                    ],
                    "type": "str",
                    "version_added": "20.6.0",
                    "version_added_collection": "netapp.ontap"
                },
                "name": {
                    "choices": [
                        "sp_upgrade",
                        "sp_version"
                    ],
                    "description": [
                        "The name of the event to check for."
                    ],
                    "required": true,
                    "type": "str"
                },
                "ontapi": {
                    "description": [
                        "The ontap api version to use"
                    ],
                    "type": "int"
                },
                "password": {
                    "aliases": [
                        "pass"
                    ],
                    "description": [
                        "Password for the specified user."
                    ],
                    "type": "str"
                },
                "polling_interval": {
                    "default": 5,
                    "description": [
                        "how ofen to check for the conditions, in seconds."
                    ],
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "whether the conditions should be present or absent.",
                        "if C(present), the module exits when any of the conditions is observed.",
                        "if C(absent), the module exits with success when None of the conditions is observed."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "how long to wait for the conditions, in seconds."
                    ],
                    "type": "int"
                },
                "use_rest": {
                    "default": "auto",
                    "description": [
                        "REST API if supported by the target system for all the resources and attributes the module requires. Otherwise will revert to ZAPI.",
                        "always -- will always use the REST API",
                        "never -- will always use the ZAPI",
                        "auto -- will try to use the REST Api"
                    ],
                    "type": "str"
                },
                "username": {
                    "aliases": [
                        "user"
                    ],
                    "description": [
                        "This can be a Cluster-scoped or SVM-scoped account, depending on whether a Cluster-level or SVM-level API is required.",
                        "For more information, please read the documentation U(https://mysupport.netapp.com/NOW/download/software/nmsdk/9.4/).",
                        "Two authentication methods are supported",
                        "1. basic authentication, using username and password,",
                        "2. SSL certificate authentication, using a ssl client cert file, and optionally a private key file.",
                        "To use a certificate, the certificate must have been installed in the ONTAP cluster, and cert authentication must have been enabled."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "If set to C(no), the SSL certificates will not be validated.",
                        "This should only set to C(False) used on personally controlled sites using self-signed certificates."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "Ansible 2.9",
                "Python3 netapp-lib (2018.11.13) or later. Install using 'pip install netapp-lib'",
                "netapp-lib 2020.3.12 is strongly recommended as it provides better error reporting for connection issues.",
                "A physical or virtual clustered Data ONTAP system. The modules support Data ONTAP 9.1 and onward.",
                "REST support requires ONTAP 9.6 or later.",
                "To enable http on the cluster you must run the following commands 'set -privilege advanced;' 'system services web modify -http-enabled true;'"
            ],
            "short_description": "NetApp ONTAP wait_for_condition.  Loop over a get status request until a condition is met.",
            "version_added": "20.8.0",
            "version_added_collection": "netapp.ontap"
        },
        "examples": "\n    - name: wait for sp_upgrade in progress\n      na_ontap_wait_for_condition:\n        hostname: \"{{ ontap_admin_ip }}\"\n        username: \"{{ ontap_admin_username }}\"\n        password: \"{{ ontap_admin_password }}\"\n        https: true\n        validate_certs: no\n        name: sp_upgrade\n        conditions: is_in_progress\n        attributes:\n          node: \"{{ node }}\"\n        polling_interval: 30\n        timeout: 1800\n\n    - name: wait for sp_upgrade not in progress\n      na_ontap_wait_for_condition:\n        hostname: \"{{ ontap_admin_ip }}\"\n        username: \"{{ ontap_admin_username }}\"\n        password: \"{{ ontap_admin_password }}\"\n        https: true\n        validate_certs: no\n        name: sp_upgrade\n        conditions: is_in_progress\n        state: absent\n        attributes:\n          node: \"{{ ontap_admin_ip }}\"\n        polling_interval: 30\n        timeout: 1800\n\n    - name: wait for sp_version to match 3.9\n      na_ontap_wait_for_condition:\n        hostname: \"{{ ontap_admin_ip }}\"\n        username: \"{{ ontap_admin_username }}\"\n        password: \"{{ ontap_admin_password }}\"\n        https: true\n        validate_certs: no\n        name: sp_version\n        conditions: firmware_version\n        state: present\n        attributes:\n          node: \"{{ ontap_admin_ip }}\"\n          expected_version: 3.9\n        polling_interval: 30\n        timeout: 1800\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "certified"
        },
        "return": {
            "last_state": {
                "description": "last observed state for event",
                "returned": "always",
                "type": "str"
            },
            "states": {
                "description": [
                    "summarized list of observed states while waiting for completion",
                    "reported for success or timeout error"
                ],
                "returned": "always",
                "type": "str"
            }
        }
    }
}
