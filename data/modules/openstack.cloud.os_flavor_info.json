{
    "openstack.cloud.os_flavor_info": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Retrieve information about available OpenStack instance flavors. By default, information about ALL flavors are retrieved. Filters can be applied to get information for only matching flavors. For example, you can filter on the amount of RAM available to the flavor, or the number of virtual CPUs available to the flavor, or both. When specifying multiple filters, *ALL* filters must match on a flavor before that flavor is returned as a fact.",
                "This module was called C(openstack.cloud.compute_flavor_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(openstack.cloud.compute_flavor_info) module no longer returns C(ansible_facts)!"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/compute_flavor_info.py",
            "has_action": false,
            "module": "compute_flavor_info",
            "notes": [
                "The result contains a list of unsorted flavors.",
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "ephemeral": {
                    "description": [
                        "A string used for filtering flavors based on the amount of ephemeral storage. Format is the same as the I(ram) parameter"
                    ],
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "limit": {
                    "description": [
                        "Limits the number of flavors returned. All matching flavors are returned by default."
                    ],
                    "type": "int"
                },
                "name": {
                    "description": [
                        "A flavor name. Cannot be used with I(ram) or I(vcpus) or I(ephemeral)."
                    ],
                    "type": "str"
                },
                "ram": {
                    "description": [
                        "A string used for filtering flavors based on the amount of RAM (in MB) desired. This string accepts the following special values: 'MIN' (return flavors with the minimum amount of RAM), and 'MAX' (return flavors with the maximum amount of RAM).",
                        "A specific amount of RAM may also be specified. Any flavors with this exact amount of RAM will be returned.",
                        "A range of acceptable RAM may be given using a special syntax. Simply prefix the amount of RAM with one of these acceptable range values: '<', '>', '<=', '>='. These values represent less than, greater than, less than or equal to, and greater than or equal to, respectively."
                    ],
                    "type": "str"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "How long should ansible wait for the requested resource."
                    ],
                    "type": "int"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "vcpus": {
                    "description": [
                        "A string used for filtering flavors based on the number of virtual CPUs desired. Format is the same as the I(ram) parameter."
                    ],
                    "type": "str"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Retrieve information about one or more flavors"
        },
        "examples": "\n# Gather information about all available flavors\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n  register: result\n\n- debug:\n    msg: \"{{ result.openstack_flavors }}\"\n\n# Gather information for the flavor named \"xlarge-flavor\"\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    name: \"xlarge-flavor\"\n\n# Get all flavors that have exactly 512 MB of RAM.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \"512\"\n\n# Get all flavors that have 1024 MB or more of RAM.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n\n# Get a single flavor that has the minimum amount of RAM. Using the 'limit'\n# option will guarantee only a single flavor is returned.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \"MIN\"\n    limit: 1\n\n# Get all flavors with 1024 MB of RAM or more, AND exactly 2 virtual CPUs.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n    vcpus: \"2\"\n\n# Get all flavors with 1024 MB of RAM or more, exactly 2 virtual CPUs, and\n# less than 30gb of ephemeral storage.\n- openstack.cloud.compute_flavor_info:\n    cloud: mycloud\n    ram: \">=1024\"\n    vcpus: \"2\"\n    ephemeral: \"<30\"\n",
        "metadata": null,
        "return": {
            "openstack_flavors": {
                "contains": {
                    "disk": {
                        "description": "Size of local disk, in GB.",
                        "returned": "success",
                        "sample": 10,
                        "type": "int"
                    },
                    "ephemeral": {
                        "description": "Ephemeral space size, in GB.",
                        "returned": "success",
                        "sample": 10,
                        "type": "int"
                    },
                    "id": {
                        "description": "Flavor ID.",
                        "returned": "success",
                        "sample": "515256b8-7027-4d73-aa54-4e30a4a4a339",
                        "type": "str"
                    },
                    "is_public": {
                        "description": "Make flavor accessible to the public.",
                        "returned": "success",
                        "sample": true,
                        "type": "bool"
                    },
                    "name": {
                        "description": "Flavor name.",
                        "returned": "success",
                        "sample": "tiny",
                        "type": "str"
                    },
                    "ram": {
                        "description": "Amount of memory, in MB.",
                        "returned": "success",
                        "sample": 1024,
                        "type": "int"
                    },
                    "swap": {
                        "description": "Swap space size, in MB.",
                        "returned": "success",
                        "sample": 100,
                        "type": "int"
                    },
                    "vcpus": {
                        "description": "Number of virtual CPUs.",
                        "returned": "success",
                        "sample": 2,
                        "type": "int"
                    }
                },
                "description": "Dictionary describing the flavors.",
                "returned": "On success.",
                "type": "complex"
            }
        }
    }
}
