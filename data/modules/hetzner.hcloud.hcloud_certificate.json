{
    "hetzner.hcloud.hcloud_certificate": {
        "doc": {
            "author": [
                "Lukas Kaemmerling (@lkaemmerling)"
            ],
            "collection": "hetzner.hcloud",
            "description": [
                "Create, update and manage certificates on the Hetzner Cloud."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/hetzner/hcloud/plugins/modules/hcloud_certificate.py",
            "has_action": false,
            "module": "hcloud_certificate",
            "options": {
                "api_token": {
                    "description": [
                        "This is the API Token for the Hetzner Cloud."
                    ],
                    "required": true,
                    "type": "str"
                },
                "certificate": {
                    "description": [
                        "Certificate and chain in PEM format, in order so that each record directly certifies the one preceding.",
                        "Required if certificate does not exists."
                    ],
                    "type": "str"
                },
                "domain_names": {
                    "description": [
                        "Certificate key in PEM format.",
                        "Required if certificate does not exists."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "endpoint": {
                    "default": "https://api.hetzner.cloud/v1",
                    "description": [
                        "This is the API Endpoint for the Hetzner Cloud."
                    ],
                    "type": "str"
                },
                "id": {
                    "description": [
                        "The ID of the Hetzner Cloud certificate to manage.",
                        "Only required if no certificate I(name) is given"
                    ],
                    "type": "int"
                },
                "labels": {
                    "description": [
                        "User-defined labels (key-value pairs)"
                    ],
                    "type": "dict"
                },
                "name": {
                    "description": [
                        "The Name of the Hetzner Cloud certificate to manage.",
                        "Only required if no certificate I(id) is given or a certificate does not exists."
                    ],
                    "type": "str"
                },
                "private_key": {
                    "description": [
                        "Certificate key in PEM format.",
                        "Required if certificate does not exists."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "State of the certificate."
                    ],
                    "type": "str"
                },
                "type": {
                    "choices": [
                        "uploaded",
                        "managed"
                    ],
                    "default": "uploaded",
                    "description": [
                        "Choose between uploading a Certificate in PEM format or requesting a managed Let's Encrypt Certificate."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "hcloud-python >= 1.0.0"
            ],
            "seealso": [
                {
                    "description": "Complete reference for the Hetzner Cloud API.",
                    "link": "https://docs.hetzner.cloud/",
                    "name": "Documentation for Hetzner Cloud API"
                }
            ],
            "short_description": "Create and manage certificates on the Hetzner Cloud."
        },
        "examples": "\n- name: Create a basic certificate\n  hcloud_certificate:\n    name: my-certificate\n    certificate: \"ssh-rsa AAAjjk76kgf...Xt\"\n    private_key: \"ssh-rsa AAAjjk76kgf...Xt\"\n    state: present\n\n- name: Create a certificate with labels\n  hcloud_certificate:\n    name: my-certificate\n    certificate: \"ssh-rsa AAAjjk76kgf...Xt\"\n    private_key: \"ssh-rsa AAAjjk76kgf...Xt\"\n    labels:\n        key: value\n        mylabel: 123\n    state: present\n\n- name: Ensure the certificate is absent (remove if needed)\n  hcloud_certificate:\n    name: my-certificate\n    state: absent\n",
        "metadata": null,
        "return": {
            "hcloud_certificate": {
                "contains": {
                    "certificate": {
                        "description": "Certificate and chain in PEM format",
                        "returned": "always",
                        "sample": "-----BEGIN CERTIFICATE-----...",
                        "type": "str"
                    },
                    "domain_names": {
                        "description": "List of Domains and Subdomains covered by the Certificate",
                        "returned": "always",
                        "type": "dict"
                    },
                    "fingerprint": {
                        "description": "Fingerprint of the certificate",
                        "returned": "always",
                        "sample": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                        "type": "str"
                    },
                    "id": {
                        "description": "Numeric identifier of the certificate",
                        "returned": "always",
                        "sample": 1937415,
                        "type": "int"
                    },
                    "labels": {
                        "description": "User-defined labels (key-value pairs)",
                        "returned": "always",
                        "type": "dict"
                    },
                    "name": {
                        "description": "Name of the certificate",
                        "returned": "always",
                        "sample": "my website cert",
                        "type": "str"
                    },
                    "not_valid_after": {
                        "description": "Point in time when the Certificate stops being valid (in ISO-8601 format)",
                        "returned": "always",
                        "type": "str"
                    },
                    "not_valid_before": {
                        "description": "Point in time when the Certificate becomes valid (in ISO-8601 format)",
                        "returned": "always",
                        "type": "str"
                    }
                },
                "description": "The certificate instance",
                "returned": "Always",
                "type": "complex"
            }
        }
    }
}
