{
    "ngine_io.cloudstack.cs_securitygroup_rule": {
        "doc": {
            "author": "Ren\u00e9 Moser (@resmo)",
            "collection": "ngine_io.cloudstack",
            "description": [
                "Add and remove security group rules."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ngine_io/cloudstack/plugins/modules/cs_securitygroup_rule.py",
            "has_action": false,
            "module": "cs_securitygroup_rule",
            "notes": [
                "A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud Guide,../scenario_guides/guide_cloudstack.html).",
                "This module supports check mode."
            ],
            "options": {
                "api_http_method": {
                    "choices": [
                        "get",
                        "post"
                    ],
                    "default": "get",
                    "description": [
                        "HTTP method used to query the API endpoint.",
                        "If not given, the C(CLOUDSTACK_METHOD) env variable is considered."
                    ],
                    "type": "str"
                },
                "api_key": {
                    "description": [
                        "API key of the CloudStack API.",
                        "If not given, the C(CLOUDSTACK_KEY) env variable is considered."
                    ],
                    "required": true,
                    "type": "str"
                },
                "api_secret": {
                    "description": [
                        "Secret key of the CloudStack API.",
                        "If not set, the C(CLOUDSTACK_SECRET) env variable is considered."
                    ],
                    "required": true,
                    "type": "str"
                },
                "api_timeout": {
                    "default": 10,
                    "description": [
                        "HTTP timeout in seconds.",
                        "If not given, the C(CLOUDSTACK_TIMEOUT) env variable is considered."
                    ],
                    "type": "int"
                },
                "api_url": {
                    "description": [
                        "URL of the CloudStack API e.g. https://cloud.example.com/client/api.",
                        "If not given, the C(CLOUDSTACK_ENDPOINT) env variable is considered."
                    ],
                    "required": true,
                    "type": "str"
                },
                "api_verify_ssl_cert": {
                    "description": [
                        "Verify CA authority cert file.",
                        "If not given, the C(CLOUDSTACK_VERIFY) env variable is considered."
                    ],
                    "type": "str"
                },
                "cidr": {
                    "default": "0.0.0.0/0",
                    "description": [
                        "CIDR (full notation) to be used for security group rule."
                    ],
                    "type": "str"
                },
                "end_port": {
                    "description": [
                        "End port for this rule. Required if I(protocol=tcp) or I(protocol=udp), but I(start_port) will be used if not set."
                    ],
                    "type": "int"
                },
                "icmp_code": {
                    "description": [
                        "Error code for this icmp message. Required if I(protocol=icmp)."
                    ],
                    "type": "int"
                },
                "icmp_type": {
                    "description": [
                        "Type of the icmp message being sent. Required if I(protocol=icmp)."
                    ],
                    "type": "int"
                },
                "poll_async": {
                    "default": true,
                    "description": [
                        "Poll async jobs until job has finished."
                    ],
                    "type": "bool"
                },
                "project": {
                    "description": [
                        "Name of the project the security group to be created in."
                    ],
                    "type": "str"
                },
                "protocol": {
                    "choices": [
                        "tcp",
                        "udp",
                        "icmp",
                        "ah",
                        "esp",
                        "gre"
                    ],
                    "default": "tcp",
                    "description": [
                        "Protocol of the security group rule."
                    ],
                    "type": "str"
                },
                "security_group": {
                    "description": [
                        "Name of the security group the rule is related to. The security group must be existing."
                    ],
                    "required": true,
                    "type": "str"
                },
                "start_port": {
                    "aliases": [
                        "port"
                    ],
                    "description": [
                        "Start port for this rule. Required if I(protocol=tcp) or I(protocol=udp)."
                    ],
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "State of the security group rule."
                    ],
                    "type": "str"
                },
                "type": {
                    "choices": [
                        "ingress",
                        "egress"
                    ],
                    "default": "ingress",
                    "description": [
                        "Ingress or egress security group rule."
                    ],
                    "type": "str"
                },
                "user_security_group": {
                    "description": [
                        "Security group this rule is based of."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "python >= 2.6",
                "cs >= 0.9.0"
            ],
            "short_description": "Manages security group rules on Apache CloudStack based clouds.",
            "version_added": "0.1.0",
            "version_added_collection": "ngine_io.cloudstack"
        },
        "examples": "\n---\n- name: allow inbound port 80/tcp from 1.2.3.4 added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    port: 80\n    cidr: 1.2.3.4/32\n\n- name: allow tcp/udp outbound added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    type: egress\n    start_port: 1\n    end_port: 65535\n    protocol: '{{ item }}'\n  with_items:\n  - tcp\n  - udp\n\n- name: allow inbound icmp from 0.0.0.0/0 added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    protocol: icmp\n    icmp_code: -1\n    icmp_type: -1\n\n- name: remove rule inbound port 80/tcp from 0.0.0.0/0 from security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    port: 80\n    state: absent\n\n- name: allow inbound port 80/tcp from security group web added to security group 'default'\n  ngine_io.cloudstack.cs_securitygroup_rule:\n    security_group: default\n    port: 80\n    user_security_group: web\n",
        "metadata": null,
        "return": {
            "cidr": {
                "description": "CIDR of the rule.",
                "returned": "success and cidr is defined",
                "sample": "0.0.0.0/0",
                "type": "str"
            },
            "end_port": {
                "description": "end port of the rule.",
                "returned": "success",
                "sample": 80,
                "type": "int"
            },
            "id": {
                "description": "UUID of the of the rule.",
                "returned": "success",
                "sample": "a6f7a5fc-43f8-11e5-a151-feff819cdc9f",
                "type": "str"
            },
            "protocol": {
                "description": "protocol of the rule.",
                "returned": "success",
                "sample": "tcp",
                "type": "str"
            },
            "security_group": {
                "description": "security group of the rule.",
                "returned": "success",
                "sample": "default",
                "type": "str"
            },
            "start_port": {
                "description": "start port of the rule.",
                "returned": "success",
                "sample": 80,
                "type": "int"
            },
            "type": {
                "description": "type of the rule.",
                "returned": "success",
                "sample": "ingress",
                "type": "str"
            },
            "user_security_group": {
                "description": "user security group of the rule.",
                "returned": "success and user_security_group is defined",
                "sample": "default",
                "type": "str"
            }
        }
    }
}
