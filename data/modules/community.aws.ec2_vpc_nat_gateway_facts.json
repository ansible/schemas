{
    "community.aws.ec2_vpc_nat_gateway_facts": {
        "doc": {
            "author": "Karen Cheng (@Etherdaemon)",
            "collection": "community.aws",
            "description": [
                "Gets various details related to AWS VPC Managed Nat Gateways",
                "This module was called C(ec2_vpc_nat_gateway_facts) before Ansible 2.9. The usage did not change."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ec2_vpc_nat_gateway_facts.py",
            "has_action": false,
            "module": "ec2_vpc_nat_gateway_info",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "filters": {
                    "description": [
                        "A dict of filters to apply. Each dict item consists of a filter key and a filter value. See U(https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNatGateways.html) for possible filters."
                    ],
                    "type": "dict"
                },
                "nat_gateway_ids": {
                    "description": [
                        "List of specific nat gateway IDs to fetch details for."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Retrieves AWS VPC Managed Nat Gateway details using AWS methods.",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Simple example of listing all nat gateways\n- name: List all managed nat gateways in ap-southeast-2\n  community.aws.ec2_vpc_nat_gateway_info:\n    region: ap-southeast-2\n  register: all_ngws\n\n- name: Debugging the result\n  ansible.builtin.debug:\n    msg: \"{{ all_ngws.result }}\"\n\n- name: Get details on specific nat gateways\n  community.aws.ec2_vpc_nat_gateway_info:\n    nat_gateway_ids:\n      - nat-1234567891234567\n      - nat-7654321987654321\n    region: ap-southeast-2\n  register: specific_ngws\n\n- name: Get all nat gateways with specific filters\n  community.aws.ec2_vpc_nat_gateway_info:\n    region: ap-southeast-2\n    filters:\n      state: ['pending']\n  register: pending_ngws\n\n- name: Get nat gateways with specific filter\n  community.aws.ec2_vpc_nat_gateway_info:\n    region: ap-southeast-2\n    filters:\n      subnet-id: subnet-12345678\n      state: ['available']\n  register: existing_nat_gateways\n",
        "metadata": null,
        "return": {
            "changed": {
                "description": "True if listing the internet gateways succeeds",
                "returned": "always",
                "sample": false,
                "type": "bool"
            },
            "result": {
                "contains": {
                    "create_time": {
                        "description": "The date and time the NAT gateway was created",
                        "returned": "always",
                        "sample": "2021-03-11T22:43:25+00:00",
                        "type": "str"
                    },
                    "delete_time": {
                        "description": "The date and time the NAT gateway was deleted",
                        "returned": "when the NAT gateway has been deleted",
                        "sample": "2021-03-11T22:43:25+00:00",
                        "type": "str"
                    },
                    "nat_gateway_addresses": {
                        "contains": {
                            "allocation_id": {
                                "description": "The allocation ID of the Elastic IP address that's associated with the NAT gateway",
                                "returned": "always",
                                "sample": "eipalloc-0853e66a40803da76",
                                "type": "str"
                            },
                            "network_interface_id": {
                                "description": "The ID of the network interface associated with the NAT gateway",
                                "returned": "always",
                                "sample": "eni-0a37acdbe306c661c",
                                "type": "str"
                            },
                            "private_ip": {
                                "description": "The private IP address associated with the Elastic IP address",
                                "returned": "always",
                                "sample": "10.0.238.227",
                                "type": "str"
                            },
                            "public_ip": {
                                "description": "The Elastic IP address associated with the NAT gateway",
                                "returned": "always",
                                "sample": "34.204.123.52",
                                "type": "str"
                            }
                        },
                        "description": "List containing a dictionary with the IP addresses and network interface associated with the NAT gateway",
                        "returned": "always",
                        "type": "dict"
                    },
                    "nat_gateway_id": {
                        "description": "The ID of the NAT gateway",
                        "returned": "always",
                        "sample": "nat-0c242a2397acf6173",
                        "type": "str"
                    },
                    "state": {
                        "description": "state of the NAT gateway",
                        "returned": "always",
                        "sample": "available",
                        "type": "str"
                    },
                    "subnet_id": {
                        "description": "The ID of the subnet in which the NAT gateway is located",
                        "returned": "always",
                        "sample": "subnet-098c447465d4344f9",
                        "type": "str"
                    },
                    "tags": {
                        "description": "Tags applied to the NAT gateway",
                        "returned": "always",
                        "sample": {
                            "Tag1": "tag1",
                            "Tag_2": "tag_2"
                        },
                        "type": "dict"
                    },
                    "vpc_id": {
                        "description": "The ID of the VPC in which the NAT gateway is located",
                        "returned": "always",
                        "sample": "vpc-02f37f48438ab7d4c",
                        "type": "str"
                    }
                },
                "description": [
                    "The result of the describe, converted to ansible snake case style.",
                    "See also U(http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.Client.describe_nat_gateways)"
                ],
                "returned": "suceess",
                "type": "list"
            }
        }
    }
}
