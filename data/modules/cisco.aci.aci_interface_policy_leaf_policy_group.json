{
    "cisco.aci.aci_interface_policy_leaf_policy_group": {
        "doc": {
            "author": [
                "Bruno Calogero (@brunocalogero)"
            ],
            "collection": "cisco.aci",
            "description": [
                "Manage fabric interface policy leaf policy groups on Cisco ACI fabrics."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/aci/plugins/modules/aci_interface_policy_leaf_policy_group.py",
            "has_action": false,
            "module": "aci_interface_policy_leaf_policy_group",
            "notes": [
                "When using the module please select the appropriate link_aggregation_type (lag_type). C(link) for Port Channel(PC), C(node) for Virtual Port Channel(VPC) and C(leaf) for Leaf Access Port Policy Group."
            ],
            "options": {
                "aep": {
                    "aliases": [
                        "aep_name"
                    ],
                    "description": [
                        "Choice of attached_entity_profile (AEP) to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "annotation": {
                    "description": [
                        "User-defined string for annotating an object.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_ANNOTATION) will be used instead."
                    ],
                    "type": "str"
                },
                "cdp_policy": {
                    "aliases": [
                        "cdp_policy_name"
                    ],
                    "description": [
                        "Choice of cdp_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "certificate_name": {
                    "aliases": [
                        "cert_name"
                    ],
                    "description": [
                        "The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.",
                        "If a C(private_key) filename was provided, this defaults to the C(private_key) basename, without extension.",
                        "If PEM-formatted content was provided for C(private_key), this defaults to the C(username) value.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_CERTIFICATE_NAME) will be used instead."
                    ],
                    "type": "str"
                },
                "description": {
                    "aliases": [
                        "descr"
                    ],
                    "description": [
                        "Description for the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "egress_data_plane_policing_policy": {
                    "aliases": [
                        "egress_data_plane_policing_policy_name"
                    ],
                    "description": [
                        "Choice of egress_data_plane_policing_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "fibre_channel_interface_policy": {
                    "aliases": [
                        "fibre_channel_interface_policy_name"
                    ],
                    "description": [
                        "Choice of fibre_channel_interface_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "host": {
                    "aliases": [
                        "hostname"
                    ],
                    "description": [
                        "IP Address or hostname of APIC resolvable by Ansible control host.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_HOST) will be used instead."
                    ],
                    "required": true,
                    "type": "str"
                },
                "ingress_data_plane_policing_policy": {
                    "aliases": [
                        "ingress_data_plane_policing_policy_name"
                    ],
                    "description": [
                        "Choice of ingress_data_plane_policing_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "l2_interface_policy": {
                    "aliases": [
                        "l2_interface_policy_name"
                    ],
                    "description": [
                        "Choice of l2_interface_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "lag_type": {
                    "aliases": [
                        "lag_type_name"
                    ],
                    "choices": [
                        "leaf",
                        "link",
                        "node"
                    ],
                    "description": [
                        "Selector for the type of leaf policy group we want to create.",
                        "C(leaf) for Leaf Access Port Policy Group",
                        "C(link) for Port Channel (PC)",
                        "C(node) for Virtual Port Channel (VPC)"
                    ],
                    "required": true,
                    "type": "str"
                },
                "link_level_policy": {
                    "aliases": [
                        "link_level_policy_name"
                    ],
                    "description": [
                        "Choice of link_level_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "lldp_policy": {
                    "aliases": [
                        "lldp_policy_name"
                    ],
                    "description": [
                        "Choice of lldp_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "mcp_policy": {
                    "aliases": [
                        "mcp_policy_name"
                    ],
                    "description": [
                        "Choice of mcp_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "monitoring_policy": {
                    "aliases": [
                        "monitoring_policy_name"
                    ],
                    "description": [
                        "Choice of monitoring_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "name_alias": {
                    "description": [
                        "The alias for the current object. This relates to the nameAlias field in ACI."
                    ],
                    "type": "str"
                },
                "output_level": {
                    "choices": [
                        "debug",
                        "info",
                        "normal"
                    ],
                    "default": "normal",
                    "description": [
                        "Influence the output of this ACI module.",
                        "C(normal) means the standard output, incl. C(current) dict",
                        "C(info) adds informational output, incl. C(previous), C(proposed) and C(sent) dicts",
                        "C(debug) adds debugging output, incl. C(filter_string), C(method), C(response), C(status) and C(url) information",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OUTPUT_LEVEL) will be used instead."
                    ],
                    "type": "str"
                },
                "output_path": {
                    "description": [
                        "Path to a file that will be used to dump the ACI JSON configuration objects generated by the module.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OUTPUT_PATH) will be used instead."
                    ],
                    "type": "str"
                },
                "owner_key": {
                    "description": [
                        "User-defined string for the ownerKey attribute of an ACI object.",
                        "This attribute represents a key for enabling clients to own their data for entity correlation.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OWNER_KEY) will be used instead."
                    ],
                    "type": "str"
                },
                "owner_tag": {
                    "description": [
                        "User-defined string for the ownerTag attribute of an ACI object.",
                        "This attribute represents a tag for enabling clients to add their own data.",
                        "For example, to indicate who created this object.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_OWNER_TAG) will be used instead."
                    ],
                    "type": "str"
                },
                "password": {
                    "description": [
                        "The password to use for authentication.",
                        "This option is mutual exclusive with C(private_key). If C(private_key) is provided too, it will be used instead.",
                        "If the value is not specified in the task, the value of environment variables C(ACI_PASSWORD) or C(ANSIBLE_NET_PASSWORD) will be used instead."
                    ],
                    "type": "str"
                },
                "policy_group": {
                    "aliases": [
                        "name",
                        "policy_group_name"
                    ],
                    "description": [
                        "Name of the leaf policy group to be added/deleted."
                    ],
                    "type": "str"
                },
                "port": {
                    "description": [
                        "Port number to be used for REST connection.",
                        "The default value depends on parameter C(use_ssl).",
                        "If the value is not specified in the task, the value of environment variable C(ACI_PORT) will be used instead."
                    ],
                    "type": "int"
                },
                "port_channel_policy": {
                    "aliases": [
                        "port_channel_policy_name"
                    ],
                    "description": [
                        "Choice of port_channel_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "port_security_policy": {
                    "aliases": [
                        "port_security_policy_name"
                    ],
                    "description": [
                        "Choice of port_security_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "priority_flow_control_policy": {
                    "aliases": [
                        "priority_flow_control_policy_name"
                    ],
                    "description": [
                        "Choice of priority_flow_control_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "private_key": {
                    "aliases": [
                        "cert_key"
                    ],
                    "description": [
                        "Either a PEM-formatted private key file or the private key content used for signature-based authentication.",
                        "This value also influences the default C(certificate_name) that is used.",
                        "This option is mutual exclusive with C(password). If C(password) is provided too, it will be ignored.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_PRIVATE_KEY) will be used instead."
                    ],
                    "type": "str"
                },
                "slow_drain_policy": {
                    "aliases": [
                        "slow_drain_policy_name"
                    ],
                    "description": [
                        "Choice of slow_drain_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present",
                        "query"
                    ],
                    "default": "present",
                    "description": [
                        "Use C(present) or C(absent) for adding or removing.",
                        "Use C(query) for listing an object or multiple objects."
                    ],
                    "type": "str"
                },
                "storm_control_interface_policy": {
                    "aliases": [
                        "storm_control_interface_policy_name"
                    ],
                    "description": [
                        "Choice of storm_control_interface_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "stp_interface_policy": {
                    "aliases": [
                        "stp_interface_policy_name"
                    ],
                    "description": [
                        "Choice of stp_interface_policy to be used as part of the leaf policy group to be created."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 30,
                    "description": [
                        "The socket level timeout in seconds.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_TIMEOUT) will be used instead."
                    ],
                    "type": "int"
                },
                "use_proxy": {
                    "default": true,
                    "description": [
                        "If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_USE_PROXY) will be used instead."
                    ],
                    "type": "bool"
                },
                "use_ssl": {
                    "default": true,
                    "description": [
                        "If C(no), an HTTP connection will be used instead of the default HTTPS connection.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_USE_SSL) will be used instead."
                    ],
                    "type": "bool"
                },
                "username": {
                    "aliases": [
                        "user"
                    ],
                    "default": "admin",
                    "description": [
                        "The username to use for authentication.",
                        "If the value is not specified in the task, the value of environment variables C(ACI_USERNAME) or C(ANSIBLE_NET_USERNAME) will be used instead."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "If C(no), SSL certificates will not be validated.",
                        "This should only set to C(no) when used on personally controlled sites using self-signed certificates.",
                        "If the value is not specified in the task, the value of environment variable C(ACI_VALIDATE_CERTS) will be used instead."
                    ],
                    "type": "bool"
                }
            },
            "seealso": [
                {
                    "description": "More information about the internal APIC classes B(infra:AccBndlGrp) and B(infra:AccPortGrp).",
                    "link": "https://developer.cisco.com/docs/apic-mim-ref/",
                    "name": "APIC Management Information Model reference"
                },
                {
                    "description": "Detailed information on how to manage your ACI infrastructure using Ansible.",
                    "ref": "aci_guide"
                },
                {
                    "description": "Detailed guide on how to write your own Cisco ACI modules to contribute.",
                    "ref": "aci_dev_guide"
                }
            ],
            "short_description": "Manage fabric interface policy leaf policy groups (infra:AccBndlGrp, infra:AccPortGrp)"
        },
        "examples": "\n- name: Create a Port Channel (PC) Interface Policy Group\n  cisco.aci.aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    lag_type: link\n    policy_group: policygroupname\n    description: policygroupname description\n    link_level_policy: whateverlinklevelpolicy\n    cdp_policy: whatevercdppolicy\n    lldp_policy: whateverlldppolicy\n    port_channel_policy: whateverlacppolicy\n    state: present\n  delegate_to: localhost\n\n- name: Create a Virtual Port Channel (VPC) Interface Policy Group\n  cisco.aci.aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    lag_type: node\n    policy_group: policygroupname\n    link_level_policy: whateverlinklevelpolicy\n    cdp_policy: whatevercdppolicy\n    lldp_policy: whateverlldppolicy\n    port_channel_policy: whateverlacppolicy\n    state: present\n  delegate_to: localhost\n\n- name: Create a Leaf Access Port Policy Group\n  cisco.aci.aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    lag_type: leaf\n    policy_group: policygroupname\n    link_level_policy: whateverlinklevelpolicy\n    cdp_policy: whatevercdppolicy\n    lldp_policy: whateverlldppolicy\n    state: present\n  delegate_to: localhost\n\n- name: Query all Leaf Access Port Policy Groups of type link\n  cisco.aci.aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    lag_type: link\n    state: query\n  delegate_to: localhost\n  register: query_result\n\n- name: Query a specific Lead Access Port Policy Group\n  cisco.aci.aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    lag_type: leaf\n    policy_group: policygroupname\n    state: query\n  delegate_to: localhost\n  register: query_result\n\n- name: Delete an Interface policy Leaf Policy Group\n  cisco.aci.aci_interface_policy_leaf_policy_group:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    lag_type: leaf\n    policy_group: policygroupname\n    state: absent\n  delegate_to: localhost\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "certified"
        },
        "return": {
            "current": {
                "description": "The existing configuration from the APIC after the module has finished",
                "returned": "success",
                "sample": [
                    {
                        "fvTenant": {
                            "attributes": {
                                "descr": "Production environment",
                                "dn": "uni/tn-production",
                                "name": "production",
                                "nameAlias": "",
                                "ownerKey": "",
                                "ownerTag": ""
                            }
                        }
                    }
                ],
                "type": "list"
            },
            "error": {
                "description": "The error information as returned from the APIC",
                "returned": "failure",
                "sample": {
                    "code": "122",
                    "text": "unknown managed object class foo"
                },
                "type": "dict"
            },
            "filter_string": {
                "description": "The filter string used for the request",
                "returned": "failure or debug",
                "sample": "?rsp-prop-include=config-only",
                "type": "str"
            },
            "method": {
                "description": "The HTTP method used for the request to the APIC",
                "returned": "failure or debug",
                "sample": "POST",
                "type": "str"
            },
            "previous": {
                "description": "The original configuration from the APIC before the module has started",
                "returned": "info",
                "sample": [
                    {
                        "fvTenant": {
                            "attributes": {
                                "descr": "Production",
                                "dn": "uni/tn-production",
                                "name": "production",
                                "nameAlias": "",
                                "ownerKey": "",
                                "ownerTag": ""
                            }
                        }
                    }
                ],
                "type": "list"
            },
            "proposed": {
                "description": "The assembled configuration from the user-provided parameters",
                "returned": "info",
                "sample": {
                    "fvTenant": {
                        "attributes": {
                            "descr": "Production environment",
                            "name": "production"
                        }
                    }
                },
                "type": "dict"
            },
            "raw": {
                "description": "The raw output returned by the APIC REST API (xml or json)",
                "returned": "parse error",
                "sample": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>",
                "type": "str"
            },
            "response": {
                "description": "The HTTP response from the APIC",
                "returned": "failure or debug",
                "sample": "OK (30 bytes)",
                "type": "str"
            },
            "sent": {
                "description": "The actual/minimal configuration pushed to the APIC",
                "returned": "info",
                "sample": {
                    "fvTenant": {
                        "attributes": {
                            "descr": "Production environment"
                        }
                    }
                },
                "type": "list"
            },
            "status": {
                "description": "The HTTP status from the APIC",
                "returned": "failure or debug",
                "sample": 200,
                "type": "int"
            },
            "url": {
                "description": "The HTTP url used for the request to the APIC",
                "returned": "failure or debug",
                "sample": "https://10.11.12.13/api/mo/uni/tn-production.json",
                "type": "str"
            }
        }
    }
}
