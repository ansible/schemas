{
    "amazon.aws.s3_bucket": {
        "doc": {
            "author": "Rob White (@wimnat)",
            "collection": "amazon.aws",
            "description": [
                "Manage S3 buckets in AWS, DigitalOcean, Ceph, Walrus, FakeS3 and StorageGRID"
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/amazon/aws/plugins/modules/s3_bucket.py",
            "has_action": false,
            "module": "s3_bucket",
            "notes": [
                "If C(requestPayment), C(policy), C(tagging) or C(versioning) operations/API aren't implemented by the endpoint, module doesn't fail if each parameter satisfies the following condition. I(requester_pays) is C(False), I(policy), I(tags), and I(versioning) are C(None).",
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "ceph": {
                    "description": [
                        "Enable API compatibility with Ceph. It takes into account the S3 API subset working with Ceph in order to provide the same module behaviour where possible."
                    ],
                    "type": "bool"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "encryption": {
                    "choices": [
                        "none",
                        "AES256",
                        "aws:kms"
                    ],
                    "description": [
                        "Describes the default server-side encryption to apply to new objects in the bucket. In order to remove the server-side encryption, the encryption needs to be set to 'none' explicitly."
                    ],
                    "type": "str"
                },
                "encryption_key_id": {
                    "description": "KMS master key ID to use for the default encryption. This parameter is allowed if encryption is aws:kms. If not specified then it will default to the AWS provided KMS key.",
                    "type": "str"
                },
                "force": {
                    "default": "no",
                    "description": [
                        "When trying to delete a bucket, delete all keys (including versions and delete markers) in the bucket first (an s3 bucket must be empty for a successful deletion)"
                    ],
                    "type": "bool"
                },
                "name": {
                    "description": [
                        "Name of the s3 bucket"
                    ],
                    "required": true,
                    "type": "str"
                },
                "policy": {
                    "description": [
                        "The JSON policy as a string."
                    ],
                    "type": "json"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "purge_tags": {
                    "default": true,
                    "description": [
                        "whether to remove tags that aren't present in the C(tags) parameter"
                    ],
                    "type": "bool"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "requester_pays": {
                    "default": false,
                    "description": [
                        "With Requester Pays buckets, the requester instead of the bucket owner pays the cost of the request and the data download from the bucket."
                    ],
                    "type": "bool"
                },
                "s3_url": {
                    "aliases": [
                        "S3_URL"
                    ],
                    "description": [
                        "S3 URL endpoint for usage with DigitalOcean, Ceph, Eucalyptus and fakes3 etc.",
                        "Assumes AWS if not specified.",
                        "For Walrus, use FQDN of the endpoint without scheme nor path."
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Create or remove the s3 bucket"
                    ],
                    "required": false,
                    "type": "str"
                },
                "tags": {
                    "description": [
                        "tags dict to apply to bucket"
                    ],
                    "type": "dict"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "versioning": {
                    "description": [
                        "Whether versioning is enabled or disabled (note that once versioning is enabled, it can only be suspended)"
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Manage S3 buckets in AWS, DigitalOcean, Ceph, Walrus, FakeS3 and StorageGRID"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Create a simple s3 bucket\n- s3_bucket:\n    name: mys3bucket\n    state: present\n\n# Create a simple s3 bucket on Ceph Rados Gateway\n- s3_bucket:\n    name: mys3bucket\n    s3_url: http://your-ceph-rados-gateway-server.xxx\n    ceph: true\n\n# Remove an s3 bucket and any keys it contains\n- s3_bucket:\n    name: mys3bucket\n    state: absent\n    force: yes\n\n# Create a bucket, add a policy from a file, enable requester pays, enable versioning and tag\n- s3_bucket:\n    name: mys3bucket\n    policy: \"{{ lookup('file','policy.json') }}\"\n    requester_pays: yes\n    versioning: yes\n    tags:\n      example: tag1\n      another: tag2\n\n# Create a simple DigitalOcean Spaces bucket using their provided regional endpoint\n- s3_bucket:\n    name: mydobucket\n    s3_url: 'https://nyc3.digitaloceanspaces.com'\n\n# Create a bucket with AES256 encryption\n- s3_bucket:\n    name: mys3bucket\n    state: present\n    encryption: \"AES256\"\n\n# Create a bucket with aws:kms encryption, KMS key\n- s3_bucket:\n    name: mys3bucket\n    state: present\n    encryption: \"aws:kms\"\n    encryption_key_id: \"arn:aws:kms:us-east-1:1234/5678example\"\n\n# Create a bucket with aws:kms encryption, default key\n- s3_bucket:\n    name: mys3bucket\n    state: present\n    encryption: \"aws:kms\"\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "stableinterface"
            ],
            "supported_by": "core"
        },
        "return": null
    }
}
