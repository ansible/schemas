{
    "community.aws.aws_application_scaling_policy": {
        "doc": {
            "author": [
                "Gustavo Maia (@gurumaia)",
                "Chen Leibovich (@chenl87)"
            ],
            "collection": "community.aws",
            "description": [
                "Creates, updates or removes a Scaling Policy."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/aws_application_scaling_policy.py",
            "has_action": false,
            "module": "aws_application_scaling_policy",
            "notes": [
                "for details of the parameters and returns see U(http://boto3.readthedocs.io/en/latest/reference/services/application-autoscaling.html#ApplicationAutoScaling.Client.put_scaling_policy)",
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "maximum_tasks": {
                    "description": "The maximum value to scale to in response to a scale out event. This parameter is required if you are creating a first new policy for the specified service.",
                    "required": false,
                    "type": "int"
                },
                "minimum_tasks": {
                    "description": "The minimum value to scale to in response to a scale in event. This parameter is required if you are creating a first new policy for the specified service.",
                    "required": false,
                    "type": "int"
                },
                "override_task_capacity": {
                    "description": [
                        "Whether or not to override values of minimum and/or maximum tasks if it's already set.",
                        "Defaults to C(false)."
                    ],
                    "required": false,
                    "type": "bool"
                },
                "policy_name": {
                    "description": "The name of the scaling policy.",
                    "required": true,
                    "type": "str"
                },
                "policy_type": {
                    "choices": [
                        "StepScaling",
                        "TargetTrackingScaling"
                    ],
                    "description": "The policy type.",
                    "required": true,
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "resource_id": {
                    "description": "The identifier of the resource associated with the scalable target.",
                    "required": true,
                    "type": "str"
                },
                "scalable_dimension": {
                    "choices": [
                        "ecs:service:DesiredCount",
                        "ec2:spot-fleet-request:TargetCapacity",
                        "elasticmapreduce:instancegroup:InstanceCount",
                        "appstream:fleet:DesiredCapacity",
                        "dynamodb:table:ReadCapacityUnits",
                        "dynamodb:table:WriteCapacityUnits",
                        "dynamodb:index:ReadCapacityUnits",
                        "dynamodb:index:WriteCapacityUnits"
                    ],
                    "description": "The scalable dimension associated with the scalable target.",
                    "required": true,
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "service_namespace": {
                    "choices": [
                        "ecs",
                        "elasticmapreduce",
                        "ec2",
                        "appstream",
                        "dynamodb"
                    ],
                    "description": "The namespace of the AWS service.",
                    "required": true,
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "description": "Whether a policy should be C(present) or C(absent).",
                    "required": true,
                    "type": "str"
                },
                "step_scaling_policy_configuration": {
                    "description": "A step scaling policy. This parameter is required if you are creating a policy and I(policy_type=StepScaling).",
                    "required": false,
                    "type": "dict"
                },
                "target_tracking_scaling_policy_configuration": {
                    "description": [
                        "A target tracking policy. This parameter is required if you are creating a new policy and I(policy_type=TargetTrackingScaling).",
                        "Full documentation of the suboptions can be found in the API documentation:",
                        "U(https://docs.aws.amazon.com/autoscaling/application/APIReference/API_TargetTrackingScalingPolicyConfiguration.html)"
                    ],
                    "required": false,
                    "suboptions": {
                        "CustomizedMetricSpecification": {
                            "description": "The metric to use if using a customized metric.",
                            "type": "dict"
                        },
                        "DisableScaleIn": {
                            "description": "Whether scaling-in should be disabled.",
                            "type": "bool"
                        },
                        "PredefinedMetricSpecification": {
                            "description": "The metric to use if using a predefined metric.",
                            "type": "dict"
                        },
                        "ScaleInCooldown": {
                            "description": "The time (in seconds) to wait after scaling-in before another scaling action can occur.",
                            "type": "int"
                        },
                        "ScaleOutCooldown": {
                            "description": "The time (in seconds) to wait after scaling-out before another scaling action can occur.",
                            "type": "int"
                        },
                        "TargetValue": {
                            "description": "The target value for the metric.",
                            "type": "float"
                        }
                    },
                    "type": "dict"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "botocore",
                "json",
                "python >= 2.6"
            ],
            "short_description": "Manage Application Auto Scaling Scaling Policies",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Create step scaling policy for ECS Service\n- name: scaling_policy\n  community.aws.aws_application_scaling_policy:\n    state: present\n    policy_name: test_policy\n    service_namespace: ecs\n    resource_id: service/poc-pricing/test-as\n    scalable_dimension: ecs:service:DesiredCount\n    policy_type: StepScaling\n    minimum_tasks: 1\n    maximum_tasks: 6\n    step_scaling_policy_configuration:\n      AdjustmentType: ChangeInCapacity\n      StepAdjustments:\n        - MetricIntervalUpperBound: 123\n          ScalingAdjustment: 2\n        - MetricIntervalLowerBound: 123\n          ScalingAdjustment: -2\n      Cooldown: 123\n      MetricAggregationType: Average\n\n# Create target tracking scaling policy for ECS Service\n- name: scaling_policy\n  community.aws.aws_application_scaling_policy:\n    state: present\n    policy_name: test_policy\n    service_namespace: ecs\n    resource_id: service/poc-pricing/test-as\n    scalable_dimension: ecs:service:DesiredCount\n    policy_type: TargetTrackingScaling\n    minimum_tasks: 1\n    maximum_tasks: 6\n    target_tracking_scaling_policy_configuration:\n      TargetValue: 60\n      PredefinedMetricSpecification:\n        PredefinedMetricType: ECSServiceAverageCPUUtilization\n      ScaleOutCooldown: 60\n      ScaleInCooldown: 60\n\n# Remove scalable target for ECS Service\n- name: scaling_policy\n  community.aws.aws_application_scaling_policy:\n    state: absent\n    policy_name: test_policy\n    policy_type: StepScaling\n    service_namespace: ecs\n    resource_id: service/cluster-name/service-name\n    scalable_dimension: ecs:service:DesiredCount\n",
        "metadata": null,
        "return": {
            "alarms": {
                "contains": {
                    "alarm_arn": {
                        "description": "The Amazon Resource Name (ARN) of the alarm",
                        "returned": "when state present",
                        "type": "str"
                    },
                    "alarm_name": {
                        "description": "The name of the alarm",
                        "returned": "when state present",
                        "type": "str"
                    }
                },
                "description": "List of the CloudWatch alarms associated with the scaling policy",
                "returned": "when state present",
                "type": "complex"
            },
            "creation_time": {
                "description": "The Unix timestamp for when the scalable target was created.",
                "returned": "when state present",
                "sample": "2017-09-28T08:22:51.881000-03:00",
                "type": "str"
            },
            "max_capacity": {
                "description": "The maximum value to scale to in response to a scale out event. Required if I(state) is C(present).",
                "returned": "when state present",
                "sample": 2,
                "type": "int"
            },
            "min_capacity": {
                "description": "The minimum value to scale to in response to a scale in event. Required if I(state) is C(present).",
                "returned": "when state present",
                "sample": 1,
                "type": "int"
            },
            "policy_arn": {
                "description": "The Amazon Resource Name (ARN) of the scaling policy..",
                "returned": "when state present",
                "type": "str"
            },
            "policy_name": {
                "description": "The name of the scaling policy.",
                "returned": "when state present",
                "type": "str"
            },
            "policy_type": {
                "description": "The policy type.",
                "returned": "when state present",
                "type": "str"
            },
            "resource_id": {
                "description": "The identifier of the resource associated with the scalable target.",
                "returned": "when state present",
                "sample": "service/cluster-name/service-name",
                "type": "str"
            },
            "role_arn": {
                "description": "The ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your behalf. Required if I(state) is C(present).",
                "returned": "when state present",
                "sample": "arn:aws:iam::123456789123:role/roleName",
                "type": "str"
            },
            "scalable_dimension": {
                "description": "The scalable dimension associated with the scalable target.",
                "returned": "when state present",
                "sample": "ecs:service:DesiredCount",
                "type": "str"
            },
            "service_namespace": {
                "description": "The namespace of the AWS service.",
                "returned": "when state present",
                "sample": "ecs",
                "type": "str"
            },
            "step_scaling_policy_configuration": {
                "contains": {
                    "adjustment_type": {
                        "description": "The adjustment type",
                        "returned": "when state present and the policy type is StepScaling",
                        "sample": "ChangeInCapacity, PercentChangeInCapacity, ExactCapacity",
                        "type": "str"
                    },
                    "cooldown": {
                        "description": "The amount of time, in seconds, after a scaling activity completes where previous trigger-related scaling activities can influence future scaling events",
                        "returned": "when state present and the policy type is StepScaling",
                        "sample": 60,
                        "type": "int"
                    },
                    "metric_aggregation_type": {
                        "description": "The aggregation type for the CloudWatch metrics",
                        "returned": "when state present and the policy type is StepScaling",
                        "sample": "Average, Minimum, Maximum",
                        "type": "str"
                    },
                    "step_adjustments": {
                        "description": "A set of adjustments that enable you to scale based on the size of the alarm breach",
                        "elements": "dict",
                        "returned": "when state present and the policy type is StepScaling",
                        "type": "list"
                    }
                },
                "description": "The step scaling policy.",
                "returned": "when state present and the policy type is StepScaling",
                "type": "complex"
            },
            "target_tracking_scaling_policy_configuration": {
                "contains": {
                    "predefined_metric_specification": {
                        "contains": {
                            "predefined_metric_type": {
                                "description": "The metric type",
                                "returned": "when state present and the policy type is TargetTrackingScaling",
                                "sample": "ECSServiceAverageCPUUtilization, ECSServiceAverageMemoryUtilization",
                                "type": "str"
                            },
                            "resource_label": {
                                "description": "Identifies the resource associated with the metric type",
                                "returned": "when metric type is ALBRequestCountPerTarget",
                                "type": "str"
                            }
                        },
                        "description": "A predefined metric",
                        "returned": "when state present and the policy type is TargetTrackingScaling",
                        "type": "complex"
                    },
                    "scale_in_cooldown": {
                        "description": "The amount of time, in seconds, after a scale in activity completes before another scale in activity can start",
                        "returned": "when state present and the policy type is TargetTrackingScaling",
                        "sample": 60,
                        "type": "int"
                    },
                    "scale_out_cooldown": {
                        "description": "The amount of time, in seconds, after a scale out activity completes before another scale out activity can start",
                        "returned": "when state present and the policy type is TargetTrackingScaling",
                        "sample": 60,
                        "type": "int"
                    },
                    "target_value": {
                        "description": "The target value for the metric",
                        "returned": "when state present and the policy type is TargetTrackingScaling",
                        "sample": 70,
                        "type": "int"
                    }
                },
                "description": "The target tracking policy.",
                "returned": "when state present and the policy type is TargetTrackingScaling",
                "type": "complex"
            }
        }
    }
}
