{
    "dnf": {
        "doc": {
            "author": [
                "Igor Gnatenko (@ignatenkobrain) <i.gnatenko.brain@gmail.com>",
                "Cristian van Ee (@DJMuggs) <cristian at cvee.org>",
                "Berend De Schouwer (@berenddeschouwer)",
                "Adam Miller (@maxamillion) <admiller@redhat.com>"
            ],
            "collection": "ansible.builtin",
            "description": [
                "Installs, upgrade, removes, and lists packages and groups with the I(dnf) package manager."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/dnf.py",
            "has_action": false,
            "module": "dnf",
            "notes": [
                "When used with a `loop:` each package will be processed individually, it is much more efficient to pass the list directly to the `name` option.",
                "Group removal doesn't work if the group was installed with Ansible because upstream dnf's API doesn't properly mark groups as installed, therefore upon removal the module is unable to detect that the group is installed (https://bugzilla.redhat.com/show_bug.cgi?id=1620324)"
            ],
            "options": {
                "allow_downgrade": {
                    "default": "no",
                    "description": [
                        "Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction)."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "allowerasing": {
                    "default": "no",
                    "description": [
                        "If C(yes) it allows  erasing  of  installed  packages to resolve dependencies."
                    ],
                    "required": false,
                    "type": "bool",
                    "version_added": "2.10",
                    "version_added_collection": "ansible.builtin"
                },
                "autoremove": {
                    "default": "no",
                    "description": [
                        "If C(yes), removes all \"leaf\" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent)"
                    ],
                    "type": "bool",
                    "version_added": "2.4",
                    "version_added_collection": "ansible.builtin"
                },
                "bugfix": {
                    "default": "no",
                    "description": [
                        "If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related.",
                        "Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "conf_file": {
                    "description": [
                        "The remote dnf configuration file to use for the transaction."
                    ]
                },
                "disable_excludes": {
                    "description": [
                        "Disable the excludes defined in DNF config files.",
                        "If set to C(all), disables all excludes.",
                        "If set to C(main), disable excludes defined in [main] in dnf.conf.",
                        "If set to C(repoid), disable excludes defined for given repo id."
                    ],
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "disable_gpg_check": {
                    "default": "no",
                    "description": [
                        "Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).",
                        "This setting affects packages installed from a repository as well as \"local\" packages installed from the filesystem or a URL."
                    ],
                    "type": "bool"
                },
                "disable_plugin": {
                    "description": [
                        "I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction."
                    ],
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "disablerepo": {
                    "description": [
                        "I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."
                    ]
                },
                "download_dir": {
                    "description": [
                        "Specifies an alternate directory to store packages.",
                        "Has an effect only if I(download_only) is specified."
                    ],
                    "type": "str",
                    "version_added": "2.8",
                    "version_added_collection": "ansible.builtin"
                },
                "download_only": {
                    "default": "no",
                    "description": [
                        "Only download the packages, do not install them."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "enable_plugin": {
                    "description": [
                        "I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction."
                    ],
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "enablerepo": {
                    "description": [
                        "I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a \",\"."
                    ]
                },
                "exclude": {
                    "description": [
                        "Package name(s) to exclude when state=present, or latest. This can be a list or a comma separated string."
                    ],
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "install_repoquery": {
                    "default": "yes",
                    "description": [
                        "This is effectively a no-op in DNF as it is not needed with DNF, but is an accepted parameter for feature parity/compatibility with the I(yum) module."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "install_weak_deps": {
                    "default": "yes",
                    "description": [
                        "Will also install all packages linked by a weak dependency relation."
                    ],
                    "type": "bool",
                    "version_added": "2.8",
                    "version_added_collection": "ansible.builtin"
                },
                "installroot": {
                    "default": "/",
                    "description": [
                        "Specifies an alternative installroot, relative to which all packages will be installed."
                    ],
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "list": {
                    "description": [
                        "Various (non-idempotent) commands for usage with C(/usr/bin/ansible) and I(not) playbooks. See examples."
                    ]
                },
                "lock_timeout": {
                    "default": 30,
                    "description": [
                        "Amount of time to wait for the dnf lockfile to be freed."
                    ],
                    "required": false,
                    "type": "int",
                    "version_added": "2.8",
                    "version_added_collection": "ansible.builtin"
                },
                "name": {
                    "aliases": [
                        "pkg"
                    ],
                    "description": [
                        "A package name or package specifier with version, like C(name-1.0). When using state=latest, this can be '*' which means run: dnf -y update. You can also pass a url or a local path to a rpm file. To operate on several packages this can accept a comma separated string of packages or a list of packages."
                    ],
                    "elements": "str",
                    "required": true,
                    "type": "list"
                },
                "releasever": {
                    "description": [
                        "Specifies an alternative release from which all packages will be installed."
                    ],
                    "version_added": "2.6",
                    "version_added_collection": "ansible.builtin"
                },
                "security": {
                    "default": "no",
                    "description": [
                        "If set to C(yes), and C(state=latest) then only installs updates that have been marked security related.",
                        "Note that, similar to ``dnf upgrade-minimal``, this filter applies to dependencies as well."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "skip_broken": {
                    "default": "no",
                    "description": [
                        "Skip packages with broken dependencies(devsolve) and are causing problems."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present",
                        "installed",
                        "removed",
                        "latest"
                    ],
                    "description": [
                        "Whether to install (C(present), C(latest)), or remove (C(absent)) a package.",
                        "Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred."
                    ]
                },
                "update_cache": {
                    "aliases": [
                        "expire-cache"
                    ],
                    "default": "no",
                    "description": [
                        "Force dnf to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest)."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "update_only": {
                    "default": "no",
                    "description": [
                        "When using latest, only update installed packages. Do not install packages.",
                        "Has an effect only if state is I(latest)"
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "validate_certs": {
                    "default": "yes",
                    "description": [
                        "This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(no), the SSL certificates will not be validated.",
                        "This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site."
                    ],
                    "type": "bool",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "requirements": [
                "python >= 2.6",
                "python-dnf",
                "for the autoremove option you need dnf >= 2.0.1\""
            ],
            "short_description": "Manages packages with the I(dnf) package manager",
            "version_added": 1.9,
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n- name: Install the latest version of Apache\n  dnf:\n    name: httpd\n    state: latest\n\n- name: Install the latest version of Apache and MariaDB\n  dnf:\n    name:\n      - httpd\n      - mariadb-server\n    state: latest\n\n- name: Remove the Apache package\n  dnf:\n    name: httpd\n    state: absent\n\n- name: Install the latest version of Apache from the testing repo\n  dnf:\n    name: httpd\n    enablerepo: testing\n    state: present\n\n- name: Upgrade all packages\n  dnf:\n    name: \"*\"\n    state: latest\n\n- name: Install the nginx rpm from a remote repo\n  dnf:\n    name: 'http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm'\n    state: present\n\n- name: Install nginx rpm from a local file\n  dnf:\n    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n    state: present\n\n- name: Install the 'Development tools' package group\n  dnf:\n    name: '@Development tools'\n    state: present\n\n- name: Autoremove unneeded packages installed as dependencies\n  dnf:\n    autoremove: yes\n\n- name: Uninstall httpd but keep its dependencies\n  dnf:\n    name: httpd\n    state: absent\n    autoremove: no\n\n- name: Install a modularity appstream with defined stream and profile\n  dnf:\n    name: '@postgresql:9.6/client'\n    state: present\n\n- name: Install a modularity appstream with defined stream\n  dnf:\n    name: '@postgresql:9.6'\n    state: present\n\n- name: Install a modularity appstream with defined profile\n  dnf:\n    name: '@postgresql/client'\n    state: present\n",
        "metadata": null,
        "return": null
    }
}
