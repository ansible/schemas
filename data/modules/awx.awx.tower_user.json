{
    "awx.awx.tower_user": {
        "doc": {
            "author": "John Westcott IV (@john-westcott-iv)",
            "collection": "awx.awx",
            "description": [
                "Create, update, or destroy Ansible Tower users. See U(https://www.ansible.com/tower) for an overview."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/awx/awx/plugins/modules/tower_user.py",
            "has_action": false,
            "module": "tower_user",
            "notes": [
                "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your Tower host information.",
                "I(config_file) should contain Tower configuration in the following format host=hostname username=username password=password"
            ],
            "options": {
                "email": {
                    "description": [
                        "Email address of the user."
                    ],
                    "type": "str"
                },
                "first_name": {
                    "description": [
                        "First name of the user."
                    ],
                    "type": "str"
                },
                "is_superuser": {
                    "aliases": [
                        "superuser"
                    ],
                    "default": false,
                    "description": [
                        "Designates that this user has all permissions without explicitly assigning them."
                    ],
                    "type": "bool"
                },
                "is_system_auditor": {
                    "aliases": [
                        "auditor"
                    ],
                    "default": false,
                    "description": [
                        "User is a system wide auditor."
                    ],
                    "type": "bool"
                },
                "last_name": {
                    "description": [
                        "Last name of the user."
                    ],
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Write-only field used to change the password."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Desired state of the resource."
                    ],
                    "type": "str"
                },
                "tower_config_file": {
                    "description": [
                        "Path to the Tower or AWX config file.",
                        "If provided, the other locations for config files will not be considered."
                    ],
                    "type": "path"
                },
                "tower_host": {
                    "description": [
                        "URL to your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_HOST) and then config files",
                        "If value not specified by any means, the value of C(127.0.0.1) will be used"
                    ],
                    "type": "str"
                },
                "tower_oauthtoken": {
                    "description": [
                        "The Tower OAuth token to use.",
                        "This value can be in one of two formats.",
                        "A string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)",
                        "A dictionary structure as returned by the tower_token module.",
                        "If value not set, will try environment variable C(TOWER_OAUTH_TOKEN) and then config files"
                    ],
                    "type": "raw",
                    "version_added": "3.7",
                    "version_added_collection": "awx.awx"
                },
                "tower_password": {
                    "description": [
                        "Password for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_PASSWORD) and then config files"
                    ],
                    "type": "str"
                },
                "tower_username": {
                    "description": [
                        "Username for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_USERNAME) and then config files"
                    ],
                    "type": "str"
                },
                "update_secrets": {
                    "default": true,
                    "description": [
                        "C(true) will always change password if user specifies password, even if API gives $encrypted$ for password.",
                        "C(false) will only set the password if other values change too."
                    ],
                    "type": "bool"
                },
                "username": {
                    "description": [
                        "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."
                    ],
                    "required": true,
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "tower_verify_ssl"
                    ],
                    "description": [
                        "Whether to allow insecure connections to Tower or AWX.",
                        "If C(no), SSL certificates will not be validated.",
                        "This should only be used on personally controlled sites using self-signed certificates.",
                        "If value not set, will try environment variable C(TOWER_VERIFY_SSL) and then config files"
                    ],
                    "type": "bool"
                }
            },
            "short_description": "create, update, or destroy Ansible Tower users."
        },
        "examples": "\n- name: Add tower user\n  tower_user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    first_name: John\n    last_name: Doe\n    state: present\n    tower_config_file: \"~/tower_cli.cfg\"\n\n- name: Add tower user as a system administrator\n  tower_user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    superuser: yes\n    state: present\n    tower_config_file: \"~/tower_cli.cfg\"\n\n- name: Add tower user as a system auditor\n  tower_user:\n    username: jdoe\n    password: foobarbaz\n    email: jdoe@example.org\n    auditor: yes\n    state: present\n    tower_config_file: \"~/tower_cli.cfg\"\n\n- name: Delete tower user\n  tower_user:\n    username: jdoe\n    email: jdoe@example.org\n    state: absent\n    tower_config_file: \"~/tower_cli.cfg\"\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": null
    }
}
