{
    "community.mysql.mysql_user": {
        "doc": {
            "author": [
                "Jonathan Mainguy (@Jmainguy)",
                "Benjamin Malynovytch (@bmalynovytch)",
                "Lukasz Tomaszkiewicz (@tomaszkiewicz)"
            ],
            "collection": "community.mysql",
            "description": [
                "Adds or removes a user from a MySQL database."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/mysql/plugins/modules/mysql_user.py",
            "has_action": false,
            "module": "mysql_user",
            "notes": [
                "MySQL server installs with default I(login_user) of C(root) and no password. To secure this user as part of an idempotent playbook, you must create at least two tasks: 1) change the root user's password, without providing any I(login_user)/I(login_password) details, 2) drop a C(~/.my.cnf) file containing the new root credentials. Subsequent runs of the playbook will then succeed by reading the new credentials from the file.",
                "Currently, there is only support for the C(mysql_native_password) encrypted password hash module.",
                "Supports (check_mode).",
                "Requires the PyMySQL (Python 2.7 and Python 3.X) or MySQL-python (Python 2.X) package installed on the remote host. The Python package may be installed with apt-get install python-pymysql (Ubuntu; see M(ansible.builtin.apt)) or yum install python2-PyMySQL (RHEL/CentOS/Fedora; see M(ansible.builtin.yum)). You can also use dnf install python2-PyMySQL for newer versions of Fedora; see M(ansible.builtin.dnf).",
                "Be sure you have PyMySQL or MySQLdb library installed on the target machine for the Python interpreter Ansible uses, for example, if it is Python 3, you must install the library for Python 3. You can also change the interpreter. For more information, see U(https://docs.ansible.com/ansible/latest/reference_appendices/interpreter_discovery.html).",
                "Both C(login_password) and C(login_user) are required when you are passing credentials. If none are present, the module will attempt to read the credentials from C(~/.my.cnf), and finally fall back to using the MySQL default login of 'root' with no password.",
                "If there are problems with local connections, using I(login_unix_socket=/path/to/mysqld/socket) instead of I(login_host=localhost) might help. As an example, the default MariaDB installation of version 10.4 and later uses the unix_socket authentication plugin by default that without using I(login_unix_socket=/var/run/mysqld/mysqld.sock) (the default path) causes the error ``Host '127.0.0.1' is not allowed to connect to this MariaDB server``.",
                "Alternatively, you can use the mysqlclient library instead of MySQL-python (MySQLdb) which supports both Python 2.X and Python >=3.5. See U(https://pypi.org/project/mysqlclient/) how to install it."
            ],
            "options": {
                "append_privs": {
                    "default": false,
                    "description": [
                        "Append the privileges defined by priv to the existing ones for this user instead of overwriting existing ones."
                    ],
                    "type": "bool"
                },
                "ca_cert": {
                    "aliases": [
                        "ssl_ca"
                    ],
                    "description": [
                        "The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server."
                    ],
                    "type": "path"
                },
                "check_hostname": {
                    "description": [
                        "Whether to validate the server host name when an SSL connection is required. Corresponds to MySQL CLIs C(--ssl) switch.",
                        "Setting this to C(false) disables hostname verification. Use with caution.",
                        "Requires pymysql >= 0.7.11.",
                        "This optoin has no effect on MySQLdb."
                    ],
                    "type": "bool",
                    "version_added": "1.1.0",
                    "version_added_collection": "community.mysql"
                },
                "check_implicit_admin": {
                    "default": false,
                    "description": [
                        "Check if mysql allows login as root/nopassword before trying supplied credentials.",
                        "If success, passed I(login_user)/I(login_password) will be ignored."
                    ],
                    "type": "bool"
                },
                "client_cert": {
                    "aliases": [
                        "ssl_cert"
                    ],
                    "description": [
                        "The path to a client public key certificate."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "ssl_key"
                    ],
                    "description": [
                        "The path to the client private key."
                    ],
                    "type": "path"
                },
                "config_file": {
                    "default": "~/.my.cnf",
                    "description": [
                        "Specify a config file from which user and password are to be read."
                    ],
                    "type": "path"
                },
                "connect_timeout": {
                    "default": 30,
                    "description": [
                        "The connection timeout when connecting to the MySQL server."
                    ],
                    "type": "int"
                },
                "encrypted": {
                    "default": false,
                    "description": [
                        "Indicate that the 'password' field is a `mysql_native_password` hash."
                    ],
                    "type": "bool"
                },
                "host": {
                    "default": "localhost",
                    "description": [
                        "The 'host' part of the MySQL username."
                    ],
                    "type": "str"
                },
                "host_all": {
                    "default": false,
                    "description": [
                        "Override the host option, making ansible apply changes to all hostnames for a given user.",
                        "This option cannot be used when creating users."
                    ],
                    "type": "bool"
                },
                "login_host": {
                    "default": "localhost",
                    "description": [
                        "Host running the database.",
                        "In some cases for local connections the I(login_unix_socket=/path/to/mysqld/socket), that is usually C(/var/run/mysqld/mysqld.sock), needs to be used instead of I(login_host=localhost)."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_port": {
                    "default": 3306,
                    "description": [
                        "Port of the MySQL server. Requires I(login_host) be defined as other than localhost if login_port is used."
                    ],
                    "type": "int"
                },
                "login_unix_socket": {
                    "description": [
                        "The path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name of the user (role) to add or remove."
                    ],
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Set the user's password."
                    ],
                    "type": "str"
                },
                "plugin": {
                    "description": [
                        "User's plugin to authenticate (``CREATE USER user IDENTIFIED WITH plugin``)."
                    ],
                    "type": "str",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "plugin_auth_string": {
                    "description": [
                        "User's plugin auth_string (``CREATE USER user IDENTIFIED WITH plugin BY plugin_auth_string``)."
                    ],
                    "type": "str",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "plugin_hash_string": {
                    "description": [
                        "User's plugin hash string (``CREATE USER user IDENTIFIED WITH plugin AS plugin_hash_string``)."
                    ],
                    "type": "str",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "priv": {
                    "description": [
                        "MySQL privileges string in the format: C(db.table:priv1,priv2).",
                        "Multiple privileges can be specified by separating each one using a forward slash: C(db.table:priv/db.table:priv).",
                        "The format is based on MySQL C(GRANT) statement.",
                        "Database and table names can be quoted, MySQL-style.",
                        "If column privileges are used, the C(priv1,priv2) part must be exactly as returned by a C(SHOW GRANT) statement. If not followed, the module will always report changes. It includes grouping columns by permission (C(SELECT(col1,col2)) instead of C(SELECT(col1),SELECT(col2))).",
                        "Can be passed as a dictionary (see the examples)."
                    ],
                    "type": "raw"
                },
                "resource_limits": {
                    "description": [
                        "Limit the user for certain server resources. Provided since MySQL 5.6 / MariaDB 10.2.",
                        "Available options are C(MAX_QUERIES_PER_HOUR: num), C(MAX_UPDATES_PER_HOUR: num), C(MAX_CONNECTIONS_PER_HOUR: num), C(MAX_USER_CONNECTIONS: num).",
                        "Used when I(state=present), ignored otherwise."
                    ],
                    "type": "dict",
                    "version_added": "0.1.0",
                    "version_added_collection": "community.mysql"
                },
                "sql_log_bin": {
                    "default": true,
                    "description": [
                        "Whether binary logging should be enabled or disabled for the connection."
                    ],
                    "type": "bool"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Whether the user should exist.",
                        "When C(absent), removes the user."
                    ],
                    "type": "str"
                },
                "tls_requires": {
                    "description": [
                        "Set requirement for secure transport as a dictionary of requirements (see the examples).",
                        "Valid requirements are SSL, X509, SUBJECT, ISSUER, CIPHER.",
                        "SUBJECT, ISSUER and CIPHER are complementary, and mutually exclusive with SSL and X509.",
                        "U(https://mariadb.com/kb/en/securing-connections-for-client-and-server/#requiring-tls)."
                    ],
                    "type": "dict",
                    "version_added": "1.0.0",
                    "version_added_collection": "community.mysql"
                },
                "update_password": {
                    "choices": [
                        "always",
                        "on_create"
                    ],
                    "default": "always",
                    "description": [
                        "C(always) will update passwords if they differ.",
                        "C(on_create) will only set the password for newly created users."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "PyMySQL (Python 2.7 and Python 3.X), or",
                "MySQLdb (Python 2.x)"
            ],
            "seealso": [
                {
                    "module": "community.mysql.mysql_info"
                },
                {
                    "description": "Complete reference of the MySQL access control and account management documentation.",
                    "link": "https://dev.mysql.com/doc/refman/8.0/en/access-control.html",
                    "name": "MySQL access control and account management reference"
                },
                {
                    "description": "Complete reference of the MySQL provided privileges documentation.",
                    "link": "https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html",
                    "name": "MySQL provided privileges reference"
                }
            ],
            "short_description": "Adds or removes a user from a MySQL database"
        },
        "examples": "\n- name: Removes anonymous user account for localhost\n  community.mysql.mysql_user:\n    name: ''\n    host: localhost\n    state: absent\n\n- name: Removes all anonymous user accounts\n  community.mysql.mysql_user:\n    name: ''\n    host_all: yes\n    state: absent\n\n- name: Create database user with name 'bob' and password '12345' with all database privileges\n  community.mysql.mysql_user:\n    name: bob\n    password: 12345\n    priv: '*.*:ALL'\n    state: present\n\n- name: Create database user using hashed password with all database privileges\n  community.mysql.mysql_user:\n    name: bob\n    password: '*EE0D72C1085C46C5278932678FBE2C6A782821B4'\n    encrypted: yes\n    priv: '*.*:ALL'\n    state: present\n\n- name: Create database user with password and all database privileges and 'WITH GRANT OPTION'\n  community.mysql.mysql_user:\n    name: bob\n    password: 12345\n    priv: '*.*:ALL,GRANT'\n    state: present\n\n- name: Create user with password, all database privileges and 'WITH GRANT OPTION' in db1 and db2\n  community.mysql.mysql_user:\n    state: present\n    name: bob\n    password: 12345dd\n    priv:\n      'db1.*': 'ALL,GRANT'\n      'db2.*': 'ALL,GRANT'\n\n# Note that REQUIRESSL is a special privilege that should only apply to *.* by itself.\n# Setting this privilege in this manner is deprecated.\n# Use 'tls_requires' instead.\n- name: Modify user to require SSL connections\n  community.mysql.mysql_user:\n    name: bob\n    append_privs: yes\n    priv: '*.*:REQUIRESSL'\n    state: present\n\n- name: Modify user to require TLS connection with a valid client certificate\n  community.mysql.mysql_user:\n    name: bob\n    tls_requires:\n      x509:\n    state: present\n\n- name: Modify user to require TLS connection with a specific client certificate and cipher\n  community.mysql.mysql_user:\n    name: bob\n    tls_requires:\n      subject: '/CN=alice/O=MyDom, Inc./C=US/ST=Oregon/L=Portland'\n      cipher: 'ECDHE-ECDSA-AES256-SHA384'\n\n- name: Modify user to no longer require SSL\n  community.mysql.mysql_user:\n    name: bob\n    tls_requires:\n\n- name: Ensure no user named 'sally'@'localhost' exists, also passing in the auth credentials\n  community.mysql.mysql_user:\n    login_user: root\n    login_password: 123456\n    name: sally\n    state: absent\n\n# check_implicit_admin example\n- name: >\n    Ensure no user named 'sally'@'localhost' exists, also passing in the auth credentials.\n    If mysql allows root/nopassword login, try it without the credentials first.\n    If it's not allowed, pass the credentials\n  community.mysql.mysql_user:\n    check_implicit_admin: yes\n    login_user: root\n    login_password: 123456\n    name: sally\n    state: absent\n\n- name: Ensure no user named 'sally' exists at all\n  community.mysql.mysql_user:\n    name: sally\n    host_all: yes\n    state: absent\n\n- name: Specify grants composed of more than one word\n  community.mysql.mysql_user:\n    name: replication\n    password: 12345\n    priv: \"*.*:REPLICATION CLIENT\"\n    state: present\n\n- name: Revoke all privileges for user 'bob' and password '12345'\n  community.mysql.mysql_user:\n    name: bob\n    password: 12345\n    priv: \"*.*:USAGE\"\n    state: present\n\n# Example privileges string format\n# mydb.*:INSERT,UPDATE/anotherdb.*:SELECT/yetanotherdb.*:ALL\n\n- name: Example using login_unix_socket to connect to server\n  community.mysql.mysql_user:\n    name: root\n    password: abc123\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n\n- name: Example of skipping binary logging while adding user 'bob'\n  community.mysql.mysql_user:\n    name: bob\n    password: 12345\n    priv: \"*.*:USAGE\"\n    state: present\n    sql_log_bin: no\n\n- name: Create user 'bob' authenticated with plugin 'AWSAuthenticationPlugin'\n  community.mysql.mysql_user:\n    name: bob\n    plugin: AWSAuthenticationPlugin\n    plugin_hash_string: RDS\n    priv: '*.*:ALL'\n    state: present\n\n- name: Limit bob's resources to 10 queries per hour and 5 connections per hour\n  community.mysql.mysql_user:\n    name: bob\n    resource_limits:\n      MAX_QUERIES_PER_HOUR: 10\n      MAX_CONNECTIONS_PER_HOUR: 5\n\n# Example .my.cnf file for setting the root password\n# [client]\n# user=root\n# password=n<_665{vS43y\n",
        "metadata": null,
        "return": null
    }
}
