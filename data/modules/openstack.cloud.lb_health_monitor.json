{
    "openstack.cloud.lb_health_monitor": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Add or Remove a health monitor to/from a pool in the OpenStack load-balancer service."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/lb_health_monitor.py",
            "has_action": false,
            "module": "lb_health_monitor",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "admin_state_up": {
                    "default": true,
                    "description": [
                        "The admin state of the helath monitor true for up or false for down"
                    ],
                    "type": "bool"
                },
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "delay": {
                    "description": [
                        "the interval, in seconds, between health checks."
                    ],
                    "required": true,
                    "type": "str"
                },
                "expected_codes": {
                    "default": 200,
                    "description": [
                        "The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values A single value, such as 200 A list, such as 200, 202 A range, such as 200-204"
                    ],
                    "type": "str"
                },
                "http_method": {
                    "choices": [
                        "GET",
                        "CONNECT",
                        "DELETE",
                        "HEAD",
                        "OPTIONS",
                        "PATCH",
                        "POST",
                        "PUT",
                        "TRACE"
                    ],
                    "default": "GET",
                    "description": [
                        "The HTTP method that the health monitor uses for requests. One of CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, or TRACE. The default is GET."
                    ],
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "max_retries": {
                    "description": [
                        "The number of successful checks before changing the operating status of the member to ONLINE."
                    ],
                    "required": true,
                    "type": "str"
                },
                "max_retries_down": {
                    "default": 3,
                    "description": [
                        "The number of allowed check failures before changing the operating status of the member to ERROR. A valid value is from 1 to 10. The default is 3."
                    ],
                    "type": "str"
                },
                "name": {
                    "description": [
                        "Name that has to be given to the health monitor"
                    ],
                    "required": true,
                    "type": "str"
                },
                "pool": {
                    "description": [
                        "The pool name or id to monitor by the health monitor."
                    ],
                    "required": true,
                    "type": "str"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "resp_timeout": {
                    "description": [
                        "The time, in seconds, after which a health check times out. Must be less than delay"
                    ],
                    "required": true,
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Should the resource be present or absent."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "How long should ansible wait for the requested resource."
                    ],
                    "type": "int"
                },
                "type": {
                    "choices": [
                        "HTTP",
                        "HTTPS",
                        "PING",
                        "SCTP",
                        "TCP",
                        "TLS-HELLO",
                        "UDP-CONNECT"
                    ],
                    "default": "HTTP",
                    "description": [
                        "One of HTTP, HTTPS, PING, SCTP, TCP, TLS-HELLO, or UDP-CONNECT."
                    ],
                    "type": "str"
                },
                "url_path": {
                    "default": "/",
                    "description": [
                        "The HTTP URL path of the request sent by the monitor to test the health of a backend member. Must be a string that begins with a forward slash (/). The default URL path is /."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Add/Delete a health m nonitor to a pool in the load balancing service from OpenStack Cloud"
        },
        "examples": "\n#Create a healtmonitor named healthmonitor01 with method HEAD url_path /status and expect code 200\n- openstack.cloud.lb_health_monitor:\n    auth:\n      auth_url: \"{{keystone_url}}\"\n      username: \"{{username}}\"\n      password: \"{{password}}\"\n      project_domain_name: \"{{domain_name}}\"\n      user_domain_name: \"{{domain_name}}\"\n      project_name: \"{{project_name}}\"\n    wait: true\n    admin_state_up: True\n    expected_codes: '200'\n    max_retries_down: '4'\n    http_method: GET\n    url_path: \"/status\"\n    pool: '{{pool_id}}'\n    name: 'healthmonitor01'\n    delay: '10'\n    max_retries: '3'\n    resp_timeout: '5'\n    state: present\n",
        "metadata": null,
        "return": {
            "health_monitor": {
                "contains": {
                    "admin_state_up": {
                        "description": "The administrative state of the resource.",
                        "returned": "On success when C(state=present)",
                        "type": "bool"
                    },
                    "created_at": {
                        "description": "The UTC date and timestamp when the resource was created.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "delay": {
                        "description": "The time, in seconds, between sending probes to members.",
                        "returned": "On success when C(state=present)",
                        "type": "int"
                    },
                    "expected_codes": {
                        "description": "The list of HTTP status codes expected in response from the member to declare it healthy.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "http_method": {
                        "description": "The HTTP method that the health monitor uses for requests.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "id": {
                        "description": "The health monitor UUID.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "max_retries": {
                        "description": "The number of successful checks before changing the operating status of the member to ONLINE.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "max_retries_down": {
                        "description": "The number of allowed check failures before changing the operating status of the member to ERROR.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "name": {
                        "description": "Human-readable name of the resource.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "operating_status": {
                        "description": "The operating status of the resource.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "pool_id": {
                        "description": "The id of the pool.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "project_id": {
                        "description": "The ID of the project owning this resource.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "provisioning_status": {
                        "description": "The provisioning status of the resource.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "timeout": {
                        "description": "The maximum time, in seconds, that a monitor waits to connect before it times out.",
                        "returned": "On success when C(state=present)",
                        "type": "int"
                    },
                    "type": {
                        "description": "The type of health monitor.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "updated_at": {
                        "description": "The UTC date and timestamp when the resource was last updated.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    },
                    "url_path": {
                        "description": "The HTTP URL path of the request sent by the monitor to test the health of a backend member.",
                        "returned": "On success when C(state=present)",
                        "type": "str"
                    }
                },
                "description": "Dictionary describing the health monitor.",
                "returned": "On success when C(state=present)",
                "type": "complex"
            }
        }
    }
}
