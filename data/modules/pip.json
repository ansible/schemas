{
    "pip": {
        "doc": {
            "author": [
                "Matt Wright (@mattupstate)"
            ],
            "collection": "ansible.builtin",
            "description": [
                "Manage Python library dependencies. To use this module, one of the following keys is required: C(name) or C(requirements)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/pip.py",
            "has_action": false,
            "module": "pip",
            "notes": [
                "The virtualenv (U(http://www.virtualenv.org/)) must be installed on the remote host if the virtualenv parameter is specified and the virtualenv needs to be created.",
                "Although it executes using the Ansible Python interpreter, the pip module shells out to run the actual pip command, so it can use any pip version you specify with I(executable). By default, it uses the pip version for the Ansible Python interpreter. For example, pip3 on python 3, and pip2 or pip on python 2.",
                "The interpreter used by Ansible (see :ref:`ansible_python_interpreter<ansible_python_interpreter>`) requires the setuptools package, regardless of the version of pip set with the I(executable) option."
            ],
            "options": {
                "chdir": {
                    "description": [
                        "cd into this directory before running the command"
                    ],
                    "type": "path",
                    "version_added": "1.3",
                    "version_added_collection": "ansible.builtin"
                },
                "editable": {
                    "default": "no",
                    "description": [
                        "Pass the editable flag."
                    ],
                    "type": "bool",
                    "version_added": "2.0",
                    "version_added_collection": "ansible.builtin"
                },
                "executable": {
                    "description": [
                        "The explicit executable or pathname for the pip executable, if different from the Ansible Python interpreter. For example C(pip3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation.",
                        "Mutually exclusive with I(virtualenv) (added in 2.1).",
                        "Does not affect the Ansible Python interpreter.",
                        "The setuptools package must be installed for both the Ansible Python interpreter and for the version of Python specified by this option."
                    ],
                    "type": "path",
                    "version_added": "1.3",
                    "version_added_collection": "ansible.builtin"
                },
                "extra_args": {
                    "description": [
                        "Extra arguments passed to pip."
                    ],
                    "type": "str",
                    "version_added": "1.0",
                    "version_added_collection": "ansible.builtin"
                },
                "name": {
                    "description": [
                        "The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.",
                        "This can be a list (since 2.2) and contain version specifiers (since 2.7)."
                    ],
                    "type": "list"
                },
                "requirements": {
                    "description": [
                        "The path to a pip requirements file, which should be local to the remote system. File can be specified as a relative path if using the chdir option."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "forcereinstall",
                        "latest",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "The state of module",
                        "The 'forcereinstall' option is only available in Ansible 2.1 and above."
                    ],
                    "type": "str"
                },
                "umask": {
                    "description": [
                        "The system umask to apply before installing the pip package. This is useful, for example, when installing on systems that have a very restrictive umask by default (e.g., \"0077\") and you want to pip install packages which are to be used by all users. Note that this requires you to specify desired umask mode as an octal string, (e.g., \"0022\")."
                    ],
                    "type": "str",
                    "version_added": "2.1",
                    "version_added_collection": "ansible.builtin"
                },
                "version": {
                    "description": [
                        "The version number to install of the Python library specified in the I(name) parameter."
                    ],
                    "type": "str"
                },
                "virtualenv": {
                    "description": [
                        "An optional path to a I(virtualenv) directory to install into. It cannot be specified together with the 'executable' parameter (added in 2.1). If the virtualenv does not exist, it will be created before installing packages. The optional virtualenv_site_packages, virtualenv_command, and virtualenv_python options affect the creation of the virtualenv."
                    ],
                    "type": "path"
                },
                "virtualenv_command": {
                    "default": "virtualenv",
                    "description": [
                        "The command or a pathname to the command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv)."
                    ],
                    "type": "path",
                    "version_added": "1.1",
                    "version_added_collection": "ansible.builtin"
                },
                "virtualenv_python": {
                    "description": [
                        "The Python executable used for creating the virtual environment. For example C(python3.5), C(python2.7). When not specified, the Python version used to run the ansible module is used. This parameter should not be used when C(virtualenv_command) is using C(pyvenv) or the C(-m venv) module."
                    ],
                    "type": "str",
                    "version_added": "2.0",
                    "version_added_collection": "ansible.builtin"
                },
                "virtualenv_site_packages": {
                    "default": "no",
                    "description": [
                        "Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created."
                    ],
                    "type": "bool",
                    "version_added": "1.0",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "requirements": [
                "pip",
                "virtualenv",
                "setuptools"
            ],
            "short_description": "Manages Python library dependencies",
            "version_added": "0.7",
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n- name: Install bottle python package\n  pip:\n    name: bottle\n\n- name: Install bottle python package on version 0.11\n  pip:\n    name: bottle==0.11\n\n- name: Install bottle python package with version specifiers\n  pip:\n    name: bottle>0.10,<0.20,!=0.11\n\n- name: Install multi python packages with version specifiers\n  pip:\n    name:\n      - django>1.11.0,<1.12.0\n      - bottle>0.10,<0.20,!=0.11\n\n- name: Install python package using a proxy\n  # Pip doesn't use the standard environment variables, please use the CAPITALIZED ones below\n  pip:\n    name: six\n  environment:\n    HTTP_PROXY: '127.0.0.1:8080'\n    HTTPS_PROXY: '127.0.0.1:8080'\n\n# You do not have to supply '-e' option in extra_args\n- name: Install MyApp using one of the remote protocols (bzr+,hg+,git+,svn+)\n  pip:\n    name: svn+http://myrepo/svn/MyApp#egg=MyApp\n\n- name: Install MyApp using one of the remote protocols (bzr+,hg+,git+)\n  pip:\n    name: git+http://myrepo/app/MyApp\n\n- name: Install MyApp from local tarball\n  pip:\n    name: file:///path/to/MyApp.tar.gz\n\n- name: Install bottle into the specified (virtualenv), inheriting none of the globally installed modules\n  pip:\n    name: bottle\n    virtualenv: /my_app/venv\n\n- name: Install bottle into the specified (virtualenv), inheriting globally installed modules\n  pip:\n    name: bottle\n    virtualenv: /my_app/venv\n    virtualenv_site_packages: yes\n\n- name: Install bottle into the specified (virtualenv), using Python 2.7\n  pip:\n    name: bottle\n    virtualenv: /my_app/venv\n    virtualenv_command: virtualenv-2.7\n\n- name: Install bottle within a user home directory\n  pip:\n    name: bottle\n    extra_args: --user\n\n- name: Install specified python requirements\n  pip:\n    requirements: /my_app/requirements.txt\n\n- name: Install specified python requirements in indicated (virtualenv)\n  pip:\n    requirements: /my_app/requirements.txt\n    virtualenv: /my_app/venv\n\n- name: Install specified python requirements and custom Index URL\n  pip:\n    requirements: /my_app/requirements.txt\n    extra_args: -i https://example.com/pypi/simple\n\n- name: Install specified python requirements offline from a local directory with downloaded packages\n  pip:\n    requirements: /my_app/requirements.txt\n    extra_args: \"--no-index --find-links=file:///my_downloaded_packages_dir\"\n\n- name: Install bottle for Python 3.3 specifically, using the 'pip3.3' executable\n  pip:\n    name: bottle\n    executable: pip3.3\n\n- name: Install bottle, forcing reinstallation if it's already installed\n  pip:\n    name: bottle\n    state: forcereinstall\n\n- name: Install bottle while ensuring the umask is 0022 (to ensure other users can use it)\n  pip:\n    name: bottle\n    umask: \"0022\"\n  become: True\n",
        "metadata": null,
        "return": {
            "cmd": {
                "description": "pip command used by the module",
                "returned": "success",
                "sample": "pip2 install ansible six",
                "type": "str"
            },
            "name": {
                "description": "list of python modules targetted by pip",
                "returned": "success",
                "sample": [
                    "ansible",
                    "six"
                ],
                "type": "list"
            },
            "requirements": {
                "description": "Path to the requirements file",
                "returned": "success, if a requirements file was provided",
                "sample": "/srv/git/project/requirements.txt",
                "type": "str"
            },
            "version": {
                "description": "Version of the package specified in 'name'",
                "returned": "success, if a name and version were provided",
                "sample": "2.5.1",
                "type": "str"
            },
            "virtualenv": {
                "description": "Path to the virtualenv",
                "returned": "success, if a virtualenv path was provided",
                "sample": "/tmp/virtualenv",
                "type": "str"
            }
        }
    }
}
