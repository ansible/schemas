{
    "cisco.nxos.nxos_vrf": {
        "doc": {
            "author": [
                "Jason Edelman (@jedelman8)",
                "Gabriele Gerbino (@GGabriele)",
                "Trishna Guha (@trishnaguha)"
            ],
            "collection": "cisco.nxos",
            "description": [
                "This module provides declarative management of VRFs on CISCO NXOS network devices."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/nxos/plugins/modules/nxos_vrf.py",
            "has_action": true,
            "module": "nxos_vrf",
            "notes": [
                "Tested against NXOSv 7.3.(0)D1(1) on VIRL",
                "Cisco NX-OS creates the default VRF by itself. Therefore, you're not allowed to use default as I(vrf) name in this module.",
                "C(vrf) name must be shorter than 32 chars.",
                "VRF names are not case sensible in NX-OS. Anyway, the name is stored just like it's inserted by the user and it'll not be changed again unless the VRF is removed and re-created. i.e. C(vrf=NTC) will create a VRF named NTC, but running it again with C(vrf=ntc) will not cause a configuration change.",
                "For information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`",
                "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
                "For more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_."
            ],
            "options": {
                "admin_state": {
                    "choices": [
                        "up",
                        "down"
                    ],
                    "default": "up",
                    "description": [
                        "Administrative state of the VRF."
                    ],
                    "type": "str"
                },
                "aggregate": {
                    "description": "List of VRFs definitions.",
                    "elements": "dict",
                    "suboptions": {
                        "admin_state": {
                            "choices": [
                                "up",
                                "down"
                            ],
                            "description": [
                                "Administrative state of the VRF."
                            ],
                            "type": "str"
                        },
                        "associated_interfaces": {
                            "description": [
                                "This is a intent option and checks the operational state of the for given vrf C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vrf interfaces on device it will result in failure."
                            ],
                            "elements": "str",
                            "type": "list"
                        },
                        "delay": {
                            "description": [
                                "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments."
                            ],
                            "type": "int"
                        },
                        "description": {
                            "description": [
                                "Description of the VRF or keyword 'default'."
                            ],
                            "type": "str"
                        },
                        "interfaces": {
                            "description": [
                                "List of interfaces to check the VRF has been configured correctly or keyword 'default'."
                            ],
                            "elements": "str",
                            "type": "list"
                        },
                        "name": {
                            "aliases": [
                                "vrf"
                            ],
                            "description": [
                                "Name of VRF to be managed."
                            ],
                            "type": "str"
                        },
                        "rd": {
                            "description": [
                                "VPN Route Distinguisher (RD). Valid values are a string in one of the route-distinguisher formats (ASN2:NN, ASN4:NN, or IPV4:NN); the keyword 'auto', or the keyword 'default'."
                            ],
                            "type": "str"
                        },
                        "state": {
                            "choices": [
                                "present",
                                "absent"
                            ],
                            "description": [
                                "Manages desired state of the resource."
                            ],
                            "type": "str"
                        },
                        "vni": {
                            "description": [
                                "Specify virtual network identifier. Valid values are Integer or keyword 'default'."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "list"
                },
                "associated_interfaces": {
                    "description": [
                        "This is a intent option and checks the operational state of the for given vrf C(name) for associated interfaces. If the value in the C(associated_interfaces) does not match with the operational state of vrf interfaces on device it will result in failure."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "delay": {
                    "default": 10,
                    "description": [
                        "Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments."
                    ],
                    "type": "int"
                },
                "description": {
                    "description": [
                        "Description of the VRF or keyword 'default'."
                    ],
                    "type": "str"
                },
                "interfaces": {
                    "description": [
                        "List of interfaces to check the VRF has been configured correctly or keyword 'default'."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "name": {
                    "aliases": [
                        "vrf"
                    ],
                    "description": [
                        "Name of VRF to be managed."
                    ],
                    "type": "str"
                },
                "provider": {
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli).",
                        "Starting with Ansible 2.6 we recommend using C(connection: httpapi) for NX-API.",
                        "This option will be removed in a release after 2022-06-01.",
                        "For more information please see the L(NXOS Platform Options guide, ../network/user_guide/platform_nxos.html).",
                        "HORIZONTALLINE",
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "auth_pass": {
                            "description": [
                                "Specifies the password to use if required to enter privileged mode on the remote device.  If I(authorize) is false, then this argument does nothing. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTH_PASS) will be used instead."
                            ],
                            "type": "str"
                        },
                        "authorize": {
                            "default": false,
                            "description": [
                                "Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_AUTHORIZE) will be used instead."
                            ],
                            "type": "bool"
                        },
                        "host": {
                            "description": [
                                "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport."
                            ],
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote device.  This is a common argument used for either I(cli) or I(nxapi) transports. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead."
                            ],
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Specifies the port to use when building the connection to the remote device.  This value applies to either I(cli) or I(nxapi).  The port value will default to the appropriate transport common port if none is provided in the task.  (cli=22, http=80, https=443)."
                            ],
                            "type": "int"
                        },
                        "ssh_keyfile": {
                            "description": [
                                "Specifies the SSH key to use to authenticate the connection to the remote device.  This argument is only used for the I(cli) transport. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead."
                            ],
                            "type": "str"
                        },
                        "timeout": {
                            "description": [
                                "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc)."
                            ],
                            "type": "int"
                        },
                        "transport": {
                            "choices": [
                                "cli",
                                "nxapi"
                            ],
                            "default": "cli",
                            "description": [
                                "Configures the transport connection to use when connecting to the remote device.  The transport argument supports connectivity to the device over cli (ssh) or nxapi."
                            ],
                            "type": "str"
                        },
                        "use_proxy": {
                            "default": true,
                            "description": [
                                "If C(no), the environment variables C(http_proxy) and C(https_proxy) will be ignored."
                            ],
                            "type": "bool"
                        },
                        "use_ssl": {
                            "default": false,
                            "description": [
                                "Configures the I(transport) to use SSL if set to C(yes) only when the C(transport=nxapi), otherwise this value is ignored."
                            ],
                            "type": "bool"
                        },
                        "username": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate either the CLI login or the nxapi authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead."
                            ],
                            "type": "str"
                        },
                        "validate_certs": {
                            "default": false,
                            "description": [
                                "If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.  If the transport argument is not nxapi, this value is ignored."
                            ],
                            "type": "bool"
                        }
                    },
                    "type": "dict"
                },
                "purge": {
                    "default": false,
                    "description": [
                        "Purge VRFs not defined in the I(aggregate) parameter."
                    ],
                    "type": "bool"
                },
                "rd": {
                    "description": [
                        "VPN Route Distinguisher (RD). Valid values are a string in one of the route-distinguisher formats (ASN2:NN, ASN4:NN, or IPV4:NN); the keyword 'auto', or the keyword 'default'."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Manages desired state of the resource."
                    ],
                    "type": "str"
                },
                "vni": {
                    "description": [
                        "Specify virtual network identifier. Valid values are Integer or keyword 'default'."
                    ],
                    "type": "str"
                }
            },
            "short_description": "Manages global VRF configuration.",
            "version_added": "1.0.0",
            "version_added_collection": "cisco.nxos"
        },
        "examples": "\n- name: Ensure ntc VRF exists on switch\n  cisco.nxos.nxos_vrf:\n    name: ntc\n    description: testing\n    state: present\n\n- name: Aggregate definition of VRFs\n  cisco.nxos.nxos_vrf:\n    aggregate:\n    - {name: test1, description: Testing, admin_state: down}\n    - {name: test2, interfaces: Ethernet1/2}\n\n- name: Aggregate definitions of VRFs with Purge\n  cisco.nxos.nxos_vrf:\n    aggregate:\n    - {name: ntc1, description: purge test1}\n    - {name: ntc2, description: purge test2}\n    state: present\n    purge: yes\n\n- name: Delete VRFs exist on switch\n  cisco.nxos.nxos_vrf:\n    aggregate:\n    - {name: ntc1}\n    - {name: ntc2}\n    state: absent\n\n- name: Assign interfaces to VRF declaratively\n  cisco.nxos.nxos_vrf:\n    name: test1\n    interfaces:\n    - Ethernet2/3\n    - Ethernet2/5\n\n- name: Check interfaces assigned to VRF\n  cisco.nxos.nxos_vrf:\n    name: test1\n    associated_interfaces:\n    - Ethernet2/3\n    - Ethernet2/5\n\n- name: Ensure VRF is tagged with interface Ethernet2/5 only (Removes from Ethernet2/3)\n  cisco.nxos.nxos_vrf:\n    name: test1\n    interfaces:\n    - Ethernet2/5\n\n- name: Delete VRF\n  cisco.nxos.nxos_vrf:\n    name: ntc\n    state: absent\n",
        "metadata": null,
        "return": {
            "commands": {
                "description": "commands sent to the device",
                "returned": "always",
                "sample": [
                    "vrf context ntc",
                    "no shutdown",
                    "interface Ethernet1/2",
                    "no switchport",
                    "vrf member test2"
                ],
                "type": "list"
            }
        }
    }
}
