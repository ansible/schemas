{
    "openstack.cloud.os_security_group_rule": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Add or Remove rule from an existing security group"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/security_group_rule.py",
            "has_action": false,
            "module": "security_group_rule",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "direction": {
                    "choices": [
                        "egress",
                        "ingress"
                    ],
                    "default": "ingress",
                    "description": [
                        "The direction in which the security group rule is applied. Not all providers support egress."
                    ],
                    "type": "str"
                },
                "ethertype": {
                    "choices": [
                        "IPv4",
                        "IPv6"
                    ],
                    "default": "IPv4",
                    "description": [
                        "Must be IPv4 or IPv6, and addresses represented in CIDR must match the ingress or egress rules. Not all providers support IPv6."
                    ],
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "port_range_max": {
                    "description": [
                        "Ending port"
                    ],
                    "type": "int"
                },
                "port_range_min": {
                    "description": [
                        "Starting port"
                    ],
                    "type": "int"
                },
                "project": {
                    "description": [
                        "Unique name or ID of the project."
                    ],
                    "required": false,
                    "type": "str"
                },
                "protocol": {
                    "description": [
                        "IP protocols ANY TCP UDP ICMP and others, also number in range 0-255"
                    ],
                    "type": "str"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "remote_group": {
                    "description": [
                        "Name or ID of the Security group to link (exclusive with remote_ip_prefix)"
                    ],
                    "type": "str"
                },
                "remote_ip_prefix": {
                    "description": [
                        "Source IP address(es) in CIDR notation (exclusive with remote_group)"
                    ],
                    "type": "str"
                },
                "security_group": {
                    "description": [
                        "Name or ID of the security group"
                    ],
                    "required": true,
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Should the resource be present or absent."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "How long should ansible wait for the requested resource."
                    ],
                    "type": "int"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "wait": {
                    "default": true,
                    "description": [
                        "Should ansible wait until the requested resource is complete."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Add/Delete rule from an existing security group"
        },
        "examples": "\n# Create a security group rule\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    port_range_min: 80\n    port_range_max: 80\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a security group rule for ping\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    remote_ip_prefix: 0.0.0.0/0\n\n# Another way to create the ping rule\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    port_range_min: -1\n    port_range_max: -1\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a TCP rule covering all ports\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    port_range_min: 1\n    port_range_max: 65535\n    remote_ip_prefix: 0.0.0.0/0\n\n# Another way to create the TCP rule above (defaults to all ports)\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: tcp\n    remote_ip_prefix: 0.0.0.0/0\n\n# Create a rule for VRRP with numbered protocol 112\n- openstack.cloud.security_group_rule:\n    security_group: loadbalancer_sg\n    protocol: 112\n    remote_group: loadbalancer-node_sg\n\n# Create a security group rule for a given project\n- openstack.cloud.security_group_rule:\n    cloud: mordred\n    security_group: foo\n    protocol: icmp\n    remote_ip_prefix: 0.0.0.0/0\n    project: myproj\n\n# Remove the default created egress rule for IPv4\n- openstack.cloud.security_group_rule:\n   cloud: mordred\n   security_group: foo\n   protocol: any\n   remote_ip_prefix: 0.0.0.0/0\n",
        "metadata": null,
        "return": {
            "direction": {
                "description": "The direction in which the security group rule is applied.",
                "returned": "state == present",
                "sample": "egress",
                "type": "str"
            },
            "ethertype": {
                "description": "One of IPv4 or IPv6.",
                "returned": "state == present",
                "sample": "IPv4",
                "type": "str"
            },
            "id": {
                "description": "Unique rule UUID.",
                "returned": "state == present",
                "type": "str"
            },
            "port_range_max": {
                "description": "The maximum port number in the range that is matched by the security group rule.",
                "returned": "state == present",
                "sample": 8000,
                "type": "int"
            },
            "port_range_min": {
                "description": "The minimum port number in the range that is matched by the security group rule.",
                "returned": "state == present",
                "sample": 8000,
                "type": "int"
            },
            "protocol": {
                "description": "The protocol that is matched by the security group rule.",
                "returned": "state == present",
                "sample": "tcp",
                "type": "str"
            },
            "remote_ip_prefix": {
                "description": "The remote IP prefix to be associated with this security group rule.",
                "returned": "state == present",
                "sample": "0.0.0.0/0",
                "type": "str"
            },
            "security_group_id": {
                "description": "The security group ID to associate with this security group rule.",
                "returned": "state == present",
                "type": "str"
            }
        }
    }
}
