{
    "ansible.windows.win_reboot": {
        "doc": {
            "author": [
                "Matt Davis (@nitzmahone)"
            ],
            "collection": "ansible.windows",
            "description": [
                "Reboot a Windows machine, wait for it to go down, come back up, and respond to commands.",
                "For non-Windows targets, use the M(ansible.builtin.reboot) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ansible/windows/plugins/modules/win_reboot.py",
            "has_action": true,
            "module": "win_reboot",
            "notes": [
                "If a shutdown was already scheduled on the system, M(ansible.windows.win_reboot) will abort the scheduled shutdown and enforce its own shutdown.",
                "Beware that when M(ansible.windows.win_reboot) returns, the Windows system may not have settled yet and some base services could be in limbo. This can result in unexpected behavior. Check the examples for ways to mitigate this.",
                "The connection user must have the C(SeRemoteShutdownPrivilege) privilege enabled, see U(https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/force-shutdown-from-a-remote-system) for more information."
            ],
            "options": {
                "boot_time_command": {
                    "default": "(Get-WmiObject -ClassName Win32_OperatingSystem).LastBootUpTime",
                    "description": [
                        "Command to run that returns a unique string indicating the last time the system was booted.",
                        "Setting this to a command that has different output each time it is run will cause the task to fail."
                    ],
                    "type": "str"
                },
                "connect_timeout": {
                    "aliases": [
                        "connect_timeout_sec"
                    ],
                    "default": 5,
                    "description": [
                        "Maximum seconds to wait for a single successful TCP connection to the WinRM endpoint before trying again."
                    ],
                    "type": "int"
                },
                "msg": {
                    "default": "Reboot initiated by Ansible",
                    "description": [
                        "Message to display to users."
                    ],
                    "type": "str"
                },
                "post_reboot_delay": {
                    "aliases": [
                        "post_reboot_delay_sec"
                    ],
                    "default": 0,
                    "description": [
                        "Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.",
                        "This is useful if you want wait for something to settle despite your connection already working."
                    ],
                    "type": "int"
                },
                "pre_reboot_delay": {
                    "aliases": [
                        "pre_reboot_delay_sec"
                    ],
                    "default": 2,
                    "description": [
                        "Seconds to wait before reboot. Passed as a parameter to the reboot command."
                    ],
                    "type": "int"
                },
                "reboot_timeout": {
                    "aliases": [
                        "reboot_timeout_sec"
                    ],
                    "default": 600,
                    "description": [
                        "Maximum seconds to wait for machine to re-appear on the network and respond to a test command.",
                        "This timeout is evaluated separately for both reboot verification and test command success so maximum clock time is actually twice this value."
                    ],
                    "type": "int"
                },
                "test_command": {
                    "default": "whoami",
                    "description": [
                        "Command to expect success for to determine the machine is ready for management."
                    ],
                    "type": "str"
                }
            },
            "seealso": [
                {
                    "module": "ansible.builtin.reboot"
                }
            ],
            "short_description": "Reboot a windows machine"
        },
        "examples": "\n- name: Reboot the machine with all defaults\n  ansible.windows.win_reboot:\n\n- name: Reboot a slow machine that might have lots of updates to apply\n  ansible.windows.win_reboot:\n    reboot_timeout: 3600\n\n# Install a Windows feature and reboot if necessary\n- name: Install IIS Web-Server\n  ansible.windows.win_feature:\n    name: Web-Server\n  register: iis_install\n\n- name: Reboot when Web-Server feature requires it\n  ansible.windows.win_reboot:\n  when: iis_install.reboot_required\n\n# One way to ensure the system is reliable, is to set WinRM to a delayed startup\n- name: Ensure WinRM starts when the system has settled and is ready to work reliably\n  ansible.windows.win_service:\n    name: WinRM\n    start_mode: delayed\n\n\n# Additionally, you can add a delay before running the next task\n- name: Reboot a machine that takes time to settle after being booted\n  ansible.windows.win_reboot:\n    post_reboot_delay: 120\n\n# Or you can make win_reboot validate exactly what you need to work before running the next task\n- name: Validate that the netlogon service has started, before running the next task\n  ansible.windows.win_reboot:\n    test_command: 'exit (Get-Service -Name Netlogon).Status -ne \"Running\"'\n",
        "metadata": null,
        "return": {
            "elapsed": {
                "description": "The number of seconds that elapsed waiting for the system to be rebooted.",
                "returned": "always",
                "sample": 23.2,
                "type": "float"
            },
            "rebooted": {
                "description": "True if the machine was rebooted.",
                "returned": "always",
                "sample": true,
                "type": "bool"
            }
        }
    }
}
