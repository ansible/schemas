{
    "community.skydive.skydive_edge": {
        "doc": {
            "author": [
                "Sumit Jaiswal (@sjaiswal)"
            ],
            "collection": "community.skydive",
            "description": [
                "This module handles setting up edges between two nodes based on the relationship type to the Skydive topology."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/skydive/plugins/modules/skydive_edge.py",
            "has_action": false,
            "module": "skydive_edge",
            "notes": [
                "This module must be run locally, which can be achieved by specifying C(connection: local)."
            ],
            "options": {
                "child_node": {
                    "description": [
                        "To defined the second node of the link, it can be either an ID or a gremlin expression"
                    ],
                    "required": true
                },
                "host": {
                    "default": "",
                    "description": [
                        "To define the host of the node."
                    ],
                    "required": false
                },
                "metadata": {
                    "description": [
                        "To define metadata for the edge."
                    ],
                    "required": false
                },
                "parent_node": {
                    "description": [
                        "To defined the first node of the link, it can be either an ID or a gremlin expression"
                    ],
                    "required": true
                },
                "provider": {
                    "description": [
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "endpoint": {
                            "description": [
                                "Specifies the hostname/address along with the port as C(localhost:8082)for connecting to the remote instance of SKYDIVE client over the REST API."
                            ],
                            "required": true
                        },
                        "insecure": {
                            "default": false,
                            "description": [
                                "Ignore SSL certification verification."
                            ],
                            "type": "bool"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote instance of SKYDIVE client."
                            ]
                        },
                        "ssl": {
                            "default": false,
                            "description": [
                                "Specifies the ssl parameter that decides if the connection type shall be http or https."
                            ],
                            "type": "bool"
                        },
                        "user": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote instance of SKYDIVE client."
                            ]
                        }
                    }
                },
                "relation_type": {
                    "description": [
                        "To define relation type of the node I(ownership, layer2, layer3)."
                    ],
                    "required": true
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "State of the Skydive Edge. If value is I(present) new edge will be created else if it is I(absent) it will be deleted."
                    ]
                }
            },
            "requirements": [
                "skydive-client"
            ],
            "short_description": "Module to add edges to Skydive topology"
        },
        "examples": "\n- name: create tor\n  community.skydive.skydive_node:\n    name: 'TOR'\n    node_type: \"fabric\"\n    seed: TOR\n    metadata:\n      Model: Cisco xxxx\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n  register: tor_result\n\n- name: create port 1\n  community.skydive.skydive_node:\n    name: 'PORT1'\n    node_type: 'fabric'\n    seed: PORT1\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n  register: port1_result\n\n- name: create port 2\n  community.skydive.skydive_node:\n    name: 'PORT2'\n    node_type: 'fabric'\n    seed: PORT2\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n  register: port2_result\n\n- name: link node tor and port 1\n  community.skydive.skydive_edge:\n    parent_node: \"{{ tor_result.UUID }}\"\n    child_node: \"{{ port1_result.UUID }}\"\n    relation_type: ownership\n    state: present\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n\n- name: link node tor and port 2\n  community.skydive.skydive_edge:\n    parent_node: \"{{ tor_result.UUID }}\"\n    child_node: \"{{ port2_result.UUID }}\"\n    relation_type: ownership\n    state: present\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n\n- name: update link node tor and port 1 relation\n  community.skydive.skydive_edge:\n    parent_node: \"{{ tor_result.UUID }}\"\n    child_node: \"{{ port2_result.UUID }}\"\n    relation_type: layer2\n    state: upadte\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n\n- name: Unlink tor and port 2\n  community.skydive.skydive_edge:\n    parent_node: \"{{ tor_result.UUID }}\"\n    child_node: \"{{ port2_result.UUID }}\"\n    relation_type: ownership\n    state: absent\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n\n- name: link tor and port 2 via Gremlin expression\n  community.skydive.skydive_edge:\n    parent_node: G.V().Has('Name', 'TOR')\n    child_node: G.V().Has('Name', 'PORT2')\n    relation_type: ownership\n    state: present\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n\n- name: Unlink tor and port 2 via Gremlin expression\n  community.skydive.skydive_edge:\n    parent_node: G.V().Has('Name', 'TOR')\n    child_node: G.V().Has('Name', 'PORT2')\n    relation_type: ownership\n    state: absent\n    provider:\n      endpoint: localhost:8082\n      username: admin\n      password: admin\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "network"
        },
        "return": null
    }
}
