{
    "community.windows.win_nssm": {
        "doc": {
            "author": [
                "Adam Keech (@smadam813)",
                "George Frank (@georgefrank)",
                "Hans-Joachim Kliemeck (@h0nIg)",
                "Michael Wild (@themiwi)",
                "Kevin Subileau (@ksubileau)",
                "Shachaf Goldstein (@Shachaf92)"
            ],
            "collection": "community.windows",
            "description": [
                "Install a Windows service using the NSSM wrapper.",
                "NSSM is a service helper which doesn't suck. See U(https://nssm.cc/) for more information."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/windows/plugins/modules/win_nssm.py",
            "has_action": false,
            "module": "win_nssm",
            "notes": [
                "The service will NOT be started after its creation when C(state=present).",
                "Once the service is created, you can use the M(ansible.windowswin_service) module to start it or configure some additionals properties, such as its startup type, dependencies, service account, and so on."
            ],
            "options": {
                "app_environment": {
                    "description": [
                        "Key/Value pairs which will be added to the environment of the service application."
                    ],
                    "type": "dict",
                    "version_added": "1.2.0",
                    "version_added_collection": "community.windows"
                },
                "app_parameters": {
                    "description": [
                        "A string representing a dictionary of parameters to be passed to the application when it starts.",
                        "DEPRECATED since v2.8, please use I(arguments) instead.",
                        "This is mutually exclusive with I(arguments)."
                    ],
                    "type": "str"
                },
                "app_rotate_bytes": {
                    "default": 104858,
                    "description": [
                        "NSSM will not rotate any file which is smaller than the configured number of bytes."
                    ],
                    "type": "int"
                },
                "app_rotate_online": {
                    "choices": [
                        0,
                        1
                    ],
                    "default": 0,
                    "description": [
                        "If set to 1, nssm can rotate files which grow to the configured file size limit while the service is running."
                    ],
                    "type": "int"
                },
                "app_stop_method_console": {
                    "description": [
                        "Time to wait after sending Control-C."
                    ],
                    "type": "int"
                },
                "app_stop_method_skip": {
                    "choices": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "description": [
                        "To disable service shutdown methods, set to the sum of one or more of the numbers",
                        "1 - Don't send Control-C to the console.",
                        "2 - Don't send WM_CLOSE to windows.",
                        "4 - Don't send WM_QUIT to threads.",
                        "8 - Don't call TerminateProcess()."
                    ],
                    "type": "int"
                },
                "application": {
                    "description": [
                        "The application binary to run as a service",
                        "Required when I(state) is C(present), C(started), C(stopped), or C(restarted)."
                    ],
                    "type": "path"
                },
                "arguments": {
                    "aliases": [
                        "app_parameters_free_form"
                    ],
                    "description": [
                        "Parameters to be passed to the application when it starts.",
                        "This can be either a simple string or a list.",
                        "This is mutually exclusive with I(app_parameters)."
                    ],
                    "type": "str"
                },
                "dependencies": {
                    "description": [
                        "Service dependencies that has to be started to trigger startup, separated by comma.",
                        "DEPRECATED, will be removed in a major release after C(2021-07-01), please use the M(ansible.windows.win_service) module instead."
                    ],
                    "type": "list"
                },
                "description": {
                    "description": [
                        "The description to set for the service."
                    ],
                    "type": "str"
                },
                "display_name": {
                    "description": [
                        "The display name to set for the service."
                    ],
                    "type": "str"
                },
                "executable": {
                    "default": "nssm.exe",
                    "description": [
                        "The location of the NSSM utility (in case it is not located in your PATH)."
                    ],
                    "type": "path"
                },
                "name": {
                    "description": [
                        "Name of the service to operate on."
                    ],
                    "required": true,
                    "type": "str"
                },
                "password": {
                    "description": [
                        "Password to be used for service startup.",
                        "DEPRECATED, will be removed in a major release after C(2021-07-01), please use the M(ansible.windows.win_service) module instead."
                    ],
                    "type": "str"
                },
                "start_mode": {
                    "choices": [
                        "auto",
                        "delayed",
                        "disabled",
                        "manual"
                    ],
                    "default": "auto",
                    "description": [
                        "If C(auto) is selected, the service will start at bootup.",
                        "C(delayed) causes a delayed but automatic start after boot.",
                        "C(manual) means that the service will start only when another service needs it.",
                        "C(disabled) means that the service will stay off, regardless if it is needed or not.",
                        "DEPRECATED, will be removed in a major release after C(2021-07-01), please use the M(ansible.windows.win_service) module instead."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present",
                        "started",
                        "stopped",
                        "restarted"
                    ],
                    "default": "present",
                    "description": [
                        "State of the service on the system.",
                        "Values C(started), C(stopped), and C(restarted) are deprecated and will be removed on a major release after C(2021-07-01). Please use the M(ansible.windows.win_service) module instead to start, stop or restart the service."
                    ],
                    "type": "str"
                },
                "stderr_file": {
                    "description": [
                        "Path to receive error output."
                    ],
                    "type": "path"
                },
                "stdout_file": {
                    "description": [
                        "Path to receive output."
                    ],
                    "type": "path"
                },
                "user": {
                    "description": [
                        "User to be used for service startup.",
                        "DEPRECATED, will be removed in a major release after C(2021-07-01), please use the M(ansible.windows.win_service) module instead."
                    ],
                    "type": "str"
                },
                "working_directory": {
                    "aliases": [
                        "app_directory",
                        "chdir"
                    ],
                    "description": [
                        "The working directory to run the service executable from (defaults to the directory containing the application binary)"
                    ],
                    "type": "path"
                }
            },
            "requirements": [
                "nssm >= 2.24.0 # (install via M(chocolatey.chocolatey.win_chocolatey)) C(win_chocolatey: name=nssm)"
            ],
            "seealso": [
                {
                    "module": "ansible.windows.win_service"
                }
            ],
            "short_description": "Install a service using NSSM"
        },
        "examples": "\n- name: Install the foo service\n  community.windows.win_nssm:\n    name: foo\n    application: C:\\windows\\foo.exe\n\n# This will yield the following command: C:\\windows\\foo.exe bar \"true\"\n- name: Install the Consul service with a list of parameters\n  community.windows.win_nssm:\n    name: Consul\n    application: C:\\consul\\consul.exe\n    arguments:\n      - agent\n      - -config-dir=C:\\consul\\config\n\n# This is strictly equivalent to the previous example\n- name: Install the Consul service with an arbitrary string of parameters\n  community.windows.win_nssm:\n    name: Consul\n    application: C:\\consul\\consul.exe\n    arguments: agent -config-dir=C:\\consul\\config\n\n\n# Install the foo service, and then configure and start it with win_service\n- name: Install the foo service, redirecting stdout and stderr to the same file\n  community.windows.win_nssm:\n    name: foo\n    application: C:\\windows\\foo.exe\n    stdout_file: C:\\windows\\foo.log\n    stderr_file: C:\\windows\\foo.log\n\n- name: Configure and start the foo service using win_service\n  ansible.windows.win_service:\n    name: foo\n    dependencies: [ adf, tcpip ]\n    username: foouser\n    password: secret\n    start_mode: manual\n    state: started\n\n- name: Install a script based service and define custom environment variables\n  community.windows.win_nssm:\n    name: <ServiceName>\n    application: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    arguments:\n      - <path-to-script>\n      - <script arg>\n    app_environment:\n      AUTH_TOKEN: <token value>\n      SERVER_URL: https://example.com\n      PATH: \"<path-prepends>;{{ ansible_env.PATH }};<path-appends>\"\n\n- name: Remove the foo service\n  community.windows.win_nssm:\n    name: foo\n    state: absent\n",
        "metadata": null,
        "return": null
    }
}
