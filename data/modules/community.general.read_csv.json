{
    "community.general.read_csv": {
        "doc": {
            "author": [
                "Dag Wieers (@dagwieers)"
            ],
            "collection": "community.general",
            "description": [
                "Read a CSV file and return a list or a dictionary, containing one dictionary per row."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/read_csv.py",
            "has_action": false,
            "module": "read_csv",
            "notes": [
                "Ansible also ships with the C(csvfile) lookup plugin, which can be used to do selective lookups in CSV files from Jinja."
            ],
            "options": {
                "delimiter": {
                    "description": [
                        "A one-character string used to separate fields.",
                        "When using this parameter, you change the default value used by C(dialect).",
                        "The default value depends on the dialect used."
                    ],
                    "type": "str"
                },
                "dialect": {
                    "default": "excel",
                    "description": [
                        "The CSV dialect to use when parsing the CSV file.",
                        "Possible values include C(excel), C(excel-tab) or C(unix)."
                    ],
                    "type": "str"
                },
                "fieldnames": {
                    "description": [
                        "A list of field names for every column.",
                        "This is needed if the CSV does not have a header."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "key": {
                    "description": [
                        "The column name used as a key for the resulting dictionary.",
                        "If C(key) is unset, the module returns a list of dictionaries, where each dictionary is a row in the CSV file."
                    ],
                    "type": "str"
                },
                "path": {
                    "aliases": [
                        "filename"
                    ],
                    "description": [
                        "The CSV filename to read data from."
                    ],
                    "required": true,
                    "type": "path"
                },
                "skipinitialspace": {
                    "description": [
                        "Whether to ignore any whitespaces immediately following the delimiter.",
                        "When using this parameter, you change the default value used by C(dialect).",
                        "The default value depends on the dialect used."
                    ],
                    "type": "bool"
                },
                "strict": {
                    "description": [
                        "Whether to raise an exception on bad CSV input.",
                        "When using this parameter, you change the default value used by C(dialect).",
                        "The default value depends on the dialect used."
                    ],
                    "type": "bool"
                },
                "unique": {
                    "default": true,
                    "description": [
                        "Whether the C(key) used is expected to be unique."
                    ],
                    "type": "bool"
                }
            },
            "short_description": "Read a CSV file"
        },
        "examples": "\n# Example CSV file with header\n#\n#   name,uid,gid\n#   dag,500,500\n#   jeroen,501,500\n\n# Read a CSV file and access user 'dag'\n- name: Read users from CSV file and return a dictionary\n  community.general.read_csv:\n    path: users.csv\n    key: name\n  register: users\n  delegate_to: localhost\n\n- ansible.builtin.debug:\n    msg: 'User {{ users.dict.dag.name }} has UID {{ users.dict.dag.uid }} and GID {{ users.dict.dag.gid }}'\n\n# Read a CSV file and access the first item\n- name: Read users from CSV file and return a list\n  community.general.read_csv:\n    path: users.csv\n  register: users\n  delegate_to: localhost\n\n- ansible.builtin.debug:\n    msg: 'User {{ users.list.1.name }} has UID {{ users.list.1.uid }} and GID {{ users.list.1.gid }}'\n\n# Example CSV file without header and semi-colon delimiter\n#\n#   dag;500;500\n#   jeroen;501;500\n\n# Read a CSV file without headers\n- name: Read users from CSV file and return a list\n  community.general.read_csv:\n    path: users.csv\n    fieldnames: name,uid,gid\n    delimiter: ';'\n  register: users\n  delegate_to: localhost\n",
        "metadata": null,
        "return": {
            "dict": {
                "description": "The CSV content as a dictionary.",
                "returned": "success",
                "sample": {
                    "dag": {
                        "gid": 500,
                        "name": "dag",
                        "uid": 500
                    },
                    "jeroen": {
                        "gid": 500,
                        "name": "jeroen",
                        "uid": 501
                    }
                },
                "type": "dict"
            },
            "list": {
                "description": "The CSV content as a list.",
                "returned": "success",
                "sample": [
                    {
                        "gid": 500,
                        "name": "dag",
                        "uid": 500
                    },
                    {
                        "gid": 500,
                        "name": "jeroen",
                        "uid": 501
                    }
                ],
                "type": "list"
            }
        }
    }
}
