{
    "cisco.iosxr.iosxr_facts": {
        "doc": {
            "author": [
                "Ricardo Carrillo Cruz (@rcarrillocruz)",
                "Nilashish Chakraborty (@Nilashishc)"
            ],
            "collection": "cisco.iosxr",
            "description": [
                "Collects facts from network devices running the iosxr operating system. This module places the facts gathered in the fact tree keyed by the respective resource name.  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/iosxr/plugins/modules/iosxr_facts.py",
            "has_action": true,
            "module": "iosxr_facts",
            "notes": [
                "Tested against IOS-XR 6.1.3.",
                "This module works with connection C(network_cli). See L(the IOS-XR Platform Options,../network/user_guide/platform_iosxr.html).",
                "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
                "For more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_."
            ],
            "options": {
                "gather_network_resources": {
                    "description": [
                        "When supplied, this argument will restrict the facts collected to a given subset. Possible values for this argument include all and the resources like interfaces, lacp etc. Can specify a list of values to include a larger subset. Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected. Valid subsets are 'all', 'lacp', 'lacp_interfaces', 'lldp_global', 'lldp_interfaces', 'interfaces', 'l2_interfaces', 'l3_interfaces', 'lag_interfaces', 'acls', 'acl_interfaces', 'static_routes', 'ospfv2'."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "gather_subset": {
                    "default": "!config",
                    "description": [
                        "When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all, hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an initial C(M(!)) to specify that a specific subset should not be collected."
                    ],
                    "elements": "str",
                    "required": false,
                    "type": "list"
                },
                "provider": {
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli).",
                        "For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-protocols).",
                        "HORIZONTALLINE",
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "host": {
                            "description": [
                                "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport."
                            ],
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead."
                            ],
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Specifies the port to use when building the connection to the remote device."
                            ],
                            "type": "int"
                        },
                        "ssh_keyfile": {
                            "description": [
                                "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead."
                            ],
                            "type": "path"
                        },
                        "timeout": {
                            "description": [
                                "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error."
                            ],
                            "type": "int"
                        },
                        "transport": {
                            "choices": [
                                "cli",
                                "netconf"
                            ],
                            "default": "cli",
                            "description": [
                                "Specifies the type of connection based transport."
                            ],
                            "type": "str"
                        },
                        "username": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                }
            },
            "short_description": "Get facts about iosxr devices.",
            "version_added": "1.0.0",
            "version_added_collection": "cisco.iosxr"
        },
        "examples": "\n# Gather all facts\n- cisco.iosxr.iosxr_facts:\n    gather_subset: all\n    gather_network_resources: all\n\n# Collect only the config and default facts\n- cisco.iosxr.iosxr_facts:\n    gather_subset:\n    - config\n\n# Do not collect hardware facts\n- cisco.iosxr.iosxr_facts:\n    gather_subset:\n    - '!hardware'\n\n# Collect only the lacp facts\n- cisco.iosxr.iosxr_facts:\n    gather_subset:\n    - '!all'\n    - '!min'\n    gather_network_resources:\n    - lacp\n\n# Do not collect lacp_interfaces facts\n- cisco.iosxr.iosxr_facts:\n    gather_network_resources:\n    - '!lacp_interfaces'\n\n# Collect lacp and minimal default facts\n- cisco.iosxr.iosxr_facts:\n    gather_subset: min\n    gather_network_resources: lacp\n\n# Collect only the interfaces facts\n- cisco.iosxr.iosxr_facts:\n    gather_subset:\n    - '!all'\n    - '!min'\n    gather_network_resources:\n    - interfaces\n    - l2_interfaces\n",
        "metadata": null,
        "return": {
            "ansible_net_all_ipv4_addresses": {
                "description": "All IPv4 addresses configured on the device",
                "returned": "when interfaces is configured",
                "type": "list"
            },
            "ansible_net_all_ipv6_addresses": {
                "description": "All IPv6 addresses configured on the device",
                "returned": "when interfaces is configured",
                "type": "list"
            },
            "ansible_net_api": {
                "description": "The name of the transport",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_config": {
                "description": "The current active config from the device",
                "returned": "when config is configured",
                "type": "str"
            },
            "ansible_net_filesystems": {
                "description": "All file system names available on the device",
                "returned": "when hardware is configured",
                "type": "list"
            },
            "ansible_net_gather_network_resources": {
                "description": "The list of fact resource subsets collected from the device",
                "returned": "always",
                "type": "list"
            },
            "ansible_net_gather_subset": {
                "description": "The list of fact subsets collected from the device",
                "returned": "always",
                "type": "list"
            },
            "ansible_net_hostname": {
                "description": "The configured hostname of the device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_image": {
                "description": "The image file the device is running",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_interfaces": {
                "description": "A hash of all interfaces running on the system",
                "returned": "when interfaces is configured",
                "type": "dict"
            },
            "ansible_net_memfree_mb": {
                "description": "The available free memory on the remote device in Mb",
                "returned": "when hardware is configured",
                "type": "int"
            },
            "ansible_net_memtotal_mb": {
                "description": "The total memory on the remote device in Mb",
                "returned": "when hardware is configured",
                "type": "int"
            },
            "ansible_net_model": {
                "description": "The model name returned from the device",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_neighbors": {
                "description": "The list of LLDP neighbors from the remote device",
                "returned": "when interfaces is configured",
                "type": "dict"
            },
            "ansible_net_python_version": {
                "description": "The Python version Ansible controller is using",
                "returned": "always",
                "type": "str"
            },
            "ansible_net_version": {
                "description": "The operating system version running on the remote device",
                "returned": "always",
                "type": "str"
            }
        }
    }
}
