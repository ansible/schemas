{
    "community.vmware.vmware_host_powerstate": {
        "doc": {
            "author": [
                "Abhijeet Kasurde (@Akasurde)"
            ],
            "collection": "community.vmware",
            "description": [
                "This module can be used to manage power states of host systems in given vCenter infrastructure.",
                "User can set power state to 'power-down-to-standby', 'power-up-from-standby', 'shutdown-host' and 'reboot-host'.",
                "State 'reboot-host', 'shutdown-host' and 'power-down-to-standby' are not supported by all the host systems."
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/community/vmware/plugins/modules/vmware_host_powerstate.py",
            "has_action": false,
            "module": "vmware_host_powerstate",
            "options": {
                "cluster_name": {
                    "description": [
                        "Name of the cluster from which all host systems will be used.",
                        "This is required parameter if C(esxi_hostname) is not specified."
                    ],
                    "type": "str"
                },
                "esxi_hostname": {
                    "description": [
                        "Name of the host system to work with.",
                        "This is required parameter if C(cluster_name) is not specified."
                    ],
                    "type": "str"
                },
                "force": {
                    "default": false,
                    "description": [
                        "This parameter specify if the host should be proceeding with user defined powerstate regardless of whether it is in maintenance mode.",
                        "If C(state) set to C(reboot-host) and C(force) as C(true), then host system is rebooted regardless of whether it is in maintenance mode.",
                        "If C(state) set to C(shutdown-host) and C(force) as C(true), then host system is shutdown regardless of whether it is in maintenance mode.",
                        "If C(state) set to C(power-down-to-standby) and C(force) to C(true), then all powered off VMs will evacuated.",
                        "Not applicable if C(state) set to C(power-up-from-standby)."
                    ],
                    "type": "bool"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_HOST) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "password": {
                    "aliases": [
                        "pass",
                        "pwd"
                    ],
                    "description": [
                        "The password of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PASSWORD) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "port": {
                    "default": 443,
                    "description": [
                        "The port number of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PORT) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "int"
                },
                "proxy_host": {
                    "description": [
                        "Address of a proxy that will receive all HTTPS requests and relay them.",
                        "The format is a hostname or a IP.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_HOST) will be used instead.",
                        "This feature depends on a version of pyvmomi greater than v6.7.1.2018.12"
                    ],
                    "required": false,
                    "type": "str"
                },
                "proxy_port": {
                    "description": [
                        "Port of the HTTP proxy that will receive all HTTPS requests and relay them.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_PROXY_PORT) will be used instead."
                    ],
                    "required": false,
                    "type": "int"
                },
                "state": {
                    "choices": [
                        "power-down-to-standby",
                        "power-up-from-standby",
                        "shutdown-host",
                        "reboot-host"
                    ],
                    "default": "shutdown-host",
                    "description": [
                        "Set the state of the host system."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 600,
                    "description": [
                        "This parameter defines timeout for C(state) set to C(power-down-to-standby) or C(power-up-from-standby).",
                        "Ignored if C(state) set to C(reboot-host) or C(shutdown-host).",
                        "This parameter is defined in seconds."
                    ],
                    "type": "int"
                },
                "username": {
                    "aliases": [
                        "admin",
                        "user"
                    ],
                    "description": [
                        "The username of the vSphere vCenter or ESXi server.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_USER) will be used instead.",
                        "Environment variable support added in Ansible 2.6."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "Allows connection when SSL certificates are not valid. Set to C(false) when certificates are not trusted.",
                        "If the value is not specified in the task, the value of environment variable C(VMWARE_VALIDATE_CERTS) will be used instead.",
                        "Environment variable support added in Ansible 2.6.",
                        "If set to C(yes), please make sure Python >= 2.7.9 is installed on the given machine."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "PyVmomi"
            ],
            "short_description": "Manages power states of host systems in vCenter"
        },
        "examples": "\n- name: Set the state of a host system to reboot\n  community.vmware.vmware_host_powerstate:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    validate_certs: no\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: reboot-host\n  delegate_to: localhost\n  register: reboot_host\n\n- name: Set the state of a host system to power down to standby\n  community.vmware.vmware_host_powerstate:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    validate_certs: no\n    esxi_hostname: '{{ esxi_hostname }}'\n    state: power-down-to-standby\n  delegate_to: localhost\n  register: power_down\n\n- name: Set the state of all host systems from cluster to reboot\n  community.vmware.vmware_host_powerstate:\n    hostname: '{{ vcenter_hostname }}'\n    username: '{{ vcenter_username }}'\n    password: '{{ vcenter_password }}'\n    validate_certs: no\n    cluster_name: '{{ cluster_name }}'\n    state: reboot-host\n  delegate_to: localhost\n  register: reboot_host\n",
        "metadata": null,
        "return": {
            "result": {
                "description": "metadata about host system's state",
                "returned": "always",
                "sample": {
                    "esxi01": {
                        "error": "",
                        "msg": "power down 'esxi01' to standby"
                    }
                },
                "type": "dict"
            }
        }
    }
}
