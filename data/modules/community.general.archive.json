{
    "community.general.archive": {
        "doc": {
            "author": [
                "Ben Doherty (@bendoh)"
            ],
            "collection": "community.general",
            "description": [
                "Creates or extends an archive.",
                "The source and archive are on the remote host, and the archive I(is not) copied to the local host.",
                "Source files can be deleted after archival by specifying I(remove=True)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/archive.py",
            "has_action": false,
            "module": "archive",
            "notes": [
                "Requires tarfile, zipfile, gzip and bzip2 packages on target host.",
                "Requires lzma or backports.lzma if using xz format.",
                "Can produce I(gzip), I(bzip2), I(lzma) and I(zip) compressed files or archives."
            ],
            "options": {
                "attributes": {
                    "aliases": [
                        "attr"
                    ],
                    "description": [
                        "The attributes the resulting file or directory should have.",
                        "To get supported flags look at the man page for I(chattr) on the target system.",
                        "This string should contain the attributes in the same order as the one displayed by I(lsattr).",
                        "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."
                    ],
                    "type": "str",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "dest": {
                    "description": [
                        "The file name of the destination archive. The parent directory must exists on the remote host.",
                        "This is required when C(path) refers to multiple files by either specifying a glob, a directory or multiple paths in a list.",
                        "If the destination archive already exists, it will be truncated and overwritten."
                    ],
                    "type": "path"
                },
                "exclude_path": {
                    "description": [
                        "Remote absolute path, glob, or list of paths or globs for the file or files to exclude from I(path) list and glob expansion."
                    ],
                    "elements": "path",
                    "type": "list"
                },
                "force_archive": {
                    "default": false,
                    "description": [
                        "Allows you to force the module to treat this as an archive even if only a single file is specified.",
                        "By default when a single file is specified it is compressed only (not archived).",
                        "Enable this if you want to use M(ansible.builtin.unarchive) on an archive of a single file created with this module."
                    ],
                    "type": "bool"
                },
                "format": {
                    "choices": [
                        "bz2",
                        "gz",
                        "tar",
                        "xz",
                        "zip"
                    ],
                    "default": "gz",
                    "description": [
                        "The type of compression to use.",
                        "Support for xz was added in Ansible 2.5."
                    ],
                    "type": "str"
                },
                "group": {
                    "description": [
                        "Name of the group that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "mode": {
                    "description": [
                        "The permissions the resulting file or directory should have.",
                        "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.",
                        "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.",
                        "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
                    ],
                    "type": "raw"
                },
                "owner": {
                    "description": [
                        "Name of the user that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "path": {
                    "description": [
                        "Remote absolute path, glob, or list of paths or globs for the file or files to compress or archive."
                    ],
                    "elements": "path",
                    "required": true,
                    "type": "list"
                },
                "remove": {
                    "default": false,
                    "description": [
                        "Remove any added source files and trees after adding to archive."
                    ],
                    "type": "bool"
                },
                "selevel": {
                    "description": [
                        "The level part of the SELinux file context.",
                        "This is the MLS/MCS attribute, sometimes known as the C(range).",
                        "When set to C(_default), it will use the C(level) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "serole": {
                    "description": [
                        "The role part of the SELinux file context.",
                        "When set to C(_default), it will use the C(role) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "setype": {
                    "description": [
                        "The type part of the SELinux file context.",
                        "When set to C(_default), it will use the C(type) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "seuser": {
                    "description": [
                        "The user part of the SELinux file context.",
                        "By default it uses the C(system) policy, where applicable.",
                        "When set to C(_default), it will use the C(user) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "unsafe_writes": {
                    "default": false,
                    "description": [
                        "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.",
                        "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.",
                        "This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).",
                        "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."
                    ],
                    "type": "bool",
                    "version_added": "2.2",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "seealso": [
                {
                    "module": "ansible.builtin.unarchive"
                }
            ],
            "short_description": "Creates a compressed archive of one or more files or trees"
        },
        "examples": "\n- name: Compress directory /path/to/foo/ into /path/to/foo.tgz\n  community.general.archive:\n    path: /path/to/foo\n    dest: /path/to/foo.tgz\n\n- name: Compress regular file /path/to/foo into /path/to/foo.gz and remove it\n  community.general.archive:\n    path: /path/to/foo\n    remove: yes\n\n- name: Create a zip archive of /path/to/foo\n  community.general.archive:\n    path: /path/to/foo\n    format: zip\n\n- name: Create a bz2 archive of multiple files, rooted at /path\n  community.general.archive:\n    path:\n    - /path/to/foo\n    - /path/wong/foo\n    dest: /path/file.tar.bz2\n    format: bz2\n\n- name: Create a bz2 archive of a globbed path, while excluding specific dirnames\n  community.general.archive:\n    path:\n    - /path/to/foo/*\n    dest: /path/file.tar.bz2\n    exclude_path:\n    - /path/to/foo/bar\n    - /path/to/foo/baz\n    format: bz2\n\n- name: Create a bz2 archive of a globbed path, while excluding a glob of dirnames\n  community.general.archive:\n    path:\n    - /path/to/foo/*\n    dest: /path/file.tar.bz2\n    exclude_path:\n    - /path/to/foo/ba*\n    format: bz2\n\n- name: Use gzip to compress a single archive (i.e don't archive it first with tar)\n  community.general.archive:\n    path: /path/to/foo/single.file\n    dest: /path/file.gz\n    format: gz\n\n- name: Create a tar.gz archive of a single file.\n  community.general.archive:\n    path: /path/to/foo/single.file\n    dest: /path/file.tar.gz\n    format: gz\n    force_archive: true\n",
        "metadata": null,
        "return": {
            "archived": {
                "description": "Any files that were compressed or added to the archive.",
                "returned": "success",
                "type": "list"
            },
            "arcroot": {
                "description": "The archive root.",
                "returned": "always",
                "type": "str"
            },
            "expanded_exclude_paths": {
                "description": "The list of matching exclude paths from the exclude_path argument.",
                "returned": "always",
                "type": "list"
            },
            "expanded_paths": {
                "description": "The list of matching paths from paths argument.",
                "returned": "always",
                "type": "list"
            },
            "missing": {
                "description": "Any files that were missing from the source.",
                "returned": "success",
                "type": "list"
            },
            "state": {
                "description": "The current state of the archived file. If 'absent', then no source files were found and the archive does not exist. If 'compress', then the file source file is in the compressed state. If 'archive', then the source file or paths are currently archived. If 'incomplete', then an archive was created, but not all source paths were found.",
                "returned": "always",
                "type": "str"
            }
        }
    }
}
