{
    "ansible.windows.win_domain_controller": {
        "doc": {
            "author": [
                "Matt Davis (@nitzmahone)"
            ],
            "collection": "ansible.windows",
            "description": [
                "Ensure that a Windows Server 2012+ host is configured as a domain controller or demoted to member server.",
                "This module may require subsequent use of the M(ansible.windows.win_reboot) action if changes are made."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/ansible/windows/plugins/modules/win_domain_controller.py",
            "has_action": false,
            "module": "win_domain_controller",
            "options": {
                "database_path": {
                    "description": [
                        "The path to a directory on a fixed disk of the Windows host where the domain database will be created..",
                        "If not set then the default path is C(%SYSTEMROOT%\\NTDS)."
                    ],
                    "type": "path"
                },
                "dns_domain_name": {
                    "description": [
                        "When C(state) is C(domain_controller), the DNS name of the domain for which the targeted Windows host should be a DC."
                    ],
                    "type": "str"
                },
                "domain_admin_password": {
                    "description": [
                        "Password for the specified C(domain_admin_user)."
                    ],
                    "required": true,
                    "type": "str"
                },
                "domain_admin_user": {
                    "description": [
                        "Username of a domain admin for the target domain (necessary to promote or demote a domain controller)."
                    ],
                    "required": true,
                    "type": "str"
                },
                "domain_log_path": {
                    "description": [
                        "Specified the fully qualified, non-UNC path to a directory on a fixed disk of the local computer that will contain the domain log files."
                    ],
                    "type": "path"
                },
                "install_dns": {
                    "description": [
                        "Whether to install the DNS service when creating the domain controller.",
                        "If not specified then the C(-InstallDns) option is not supplied to C(Install-ADDSDomainController) command, see U(https://docs.microsoft.com/en-us/powershell/module/addsdeployment/install-addsdomaincontroller)."
                    ],
                    "type": "bool"
                },
                "install_media_path": {
                    "description": [
                        "The path to a directory on a fixed disk of the Windows host where the Install From Media C(IFC) data will be used.",
                        "See the L(Install using IFM guide,https://social.technet.microsoft.com/wiki/contents/articles/8630.active-directory-step-by-step-guide-to-install-an-additional-domain-controller-using-ifm.aspx) for more information."
                    ],
                    "type": "path"
                },
                "local_admin_password": {
                    "description": [
                        "Password to be assigned to the local C(Administrator) user (required when C(state) is C(member_server))."
                    ],
                    "type": "str"
                },
                "log_path": {
                    "description": [
                        "The path to log any debug information when running the module.",
                        "This option is deprecated and should not be used, it will be removed on the major release after C(2022-07-01).",
                        "This does not relate to the C(-LogPath) paramter of the install controller cmdlet."
                    ],
                    "type": "str"
                },
                "read_only": {
                    "default": false,
                    "description": [
                        "Whether to install the domain controller as a read only replica for an existing domain."
                    ],
                    "type": "bool"
                },
                "safe_mode_password": {
                    "description": [
                        "Safe mode password for the domain controller (required when C(state) is C(domain_controller))."
                    ],
                    "type": "str"
                },
                "site_name": {
                    "description": [
                        "Specifies the name of an existing site where you can place the new domain controller.",
                        "This option is required when I(read_only) is C(yes)."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "domain_controller",
                        "member_server"
                    ],
                    "description": [
                        "Whether the target host should be a domain controller or a member server."
                    ],
                    "required": true,
                    "type": "str"
                },
                "sysvol_path": {
                    "description": [
                        "The path to a directory on a fixed disk of the Windows host where the Sysvol folder will be created.",
                        "If not set then the default path is C(%SYSTEMROOT%\\SYSVOL)."
                    ],
                    "type": "path"
                }
            },
            "seealso": [
                {
                    "module": "ansible.windows.win_domain"
                },
                {
                    "module": "ansible.windows.win_domain_computer"
                },
                {
                    "module": "community.windows.win_domain_group"
                },
                {
                    "module": "ansible.windows.win_domain_membership"
                },
                {
                    "module": "community.windows.win_domain_user"
                }
            ],
            "short_description": "Manage domain controller/member server state for a Windows host"
        },
        "examples": "\n- name: Ensure a server is a domain controller\n  ansible.windows.win_domain_controller:\n    dns_domain_name: ansible.vagrant\n    domain_admin_user: testguy@ansible.vagrant\n    domain_admin_password: password123!\n    safe_mode_password: password123!\n    state: domain_controller\n\n# note that without an action wrapper, in the case where a DC is demoted,\n# the task will fail with a 401 Unauthorized, because the domain credential\n# becomes invalid to fetch the final output over WinRM. This requires win_async\n# with credential switching (or other clever credential-switching\n# mechanism to get the output and trigger the required reboot)\n- name: Ensure a server is not a domain controller\n  ansible.windows.win_domain_controller:\n    domain_admin_user: testguy@ansible.vagrant\n    domain_admin_password: password123!\n    local_admin_password: password123!\n    state: member_server\n\n- name: Promote server as a read only domain controller\n  ansible.windows.win_domain_controller:\n    dns_domain_name: ansible.vagrant\n    domain_admin_user: testguy@ansible.vagrant\n    domain_admin_password: password123!\n    safe_mode_password: password123!\n    state: domain_controller\n    read_only: yes\n    site_name: London\n\n- name: Promote server with custom paths\n  ansible.windows.win_domain_controller:\n    dns_domain_name: ansible.vagrant\n    domain_admin_user: testguy@ansible.vagrant\n    domain_admin_password: password123!\n    safe_mode_password: password123!\n    state: domain_controller\n    sysvol_path: D:\\SYSVOL\n    database_path: D:\\NTDS\n    domain_log_path: D:\\NTDS\n  register: dc_promotion\n\n- name: Reboot after promotion\n  ansible.windows.win_reboot:\n  when: dc_promotion.reboot_required\n",
        "metadata": null,
        "return": {
            "reboot_required": {
                "description": "True if changes were made that require a reboot.",
                "returned": "always",
                "sample": true,
                "type": "bool"
            }
        }
    }
}
