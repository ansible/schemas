{
    "openstack.cloud.loadbalancer": {
        "doc": {
            "author": "OpenStack Ansible SIG",
            "collection": "openstack.cloud",
            "description": [
                "Add or Remove load balancer from the OpenStack load-balancer service(Octavia). Load balancer update is not supported for now."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/openstack/cloud/plugins/modules/loadbalancer.py",
            "has_action": false,
            "module": "loadbalancer",
            "notes": [
                "The standard OpenStack environment variables, such as C(OS_USERNAME) may be used instead of providing explicit values.",
                "Auth information is driven by openstacksdk, which means that values can come from a yaml config file in /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment variables, then finally by explicit parameters in plays. More information can be found at U(https://docs.openstack.org/openstacksdk/)"
            ],
            "options": {
                "api_timeout": {
                    "description": [
                        "How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests library."
                    ],
                    "type": "int"
                },
                "auth": {
                    "description": [
                        "Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default I(password) plugin, this would contain I(auth_url), I(username), I(password), I(project_name) and any information about domains (for example, I(user_domain_name) or I(project_domain_name)) if the cloud supports them. For other plugins, this param will need to contain whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_* environment variables are present."
                    ],
                    "type": "dict"
                },
                "auth_type": {
                    "description": [
                        "Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be indicated here and the contents of the I(auth) parameter should be updated accordingly."
                    ],
                    "type": "str"
                },
                "auto_public_ip": {
                    "default": "no",
                    "description": [
                        "Allocate a public IP address and associate with the VIP automatically."
                    ],
                    "type": "bool"
                },
                "availability_zone": {
                    "description": [
                        "Ignored. Present for backwards compatibility"
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "cacert"
                    ],
                    "description": [
                        "A path to a CA Cert bundle that can be used as part of verifying SSL API requests."
                    ],
                    "type": "str"
                },
                "client_cert": {
                    "aliases": [
                        "cert"
                    ],
                    "description": [
                        "A path to a client certificate to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "client_key": {
                    "aliases": [
                        "key"
                    ],
                    "description": [
                        "A path to a client key to use as part of the SSL transaction."
                    ],
                    "type": "str"
                },
                "cloud": {
                    "description": [
                        "Named cloud or cloud config to operate against. If I(cloud) is a string, it references a named cloud config as defined in an OpenStack clouds.yaml file. Provides default values for I(auth) and I(auth_type). This parameter is not needed if I(auth) is provided or if OpenStack OS_* environment variables are present. If I(cloud) is a dict, it contains a complete cloud configuration like would be in a section of clouds.yaml."
                    ],
                    "type": "raw"
                },
                "delete_public_ip": {
                    "default": "no",
                    "description": [
                        "When C(state=absent) and this option is true, any public IP address associated with the VIP will be deleted along with the load balancer."
                    ],
                    "type": "bool"
                },
                "flavor": {
                    "description": [
                        "The flavor of the load balancer."
                    ],
                    "type": "str"
                },
                "interface": {
                    "aliases": [
                        "endpoint_type"
                    ],
                    "choices": [
                        "admin",
                        "internal",
                        "public"
                    ],
                    "default": "public",
                    "description": [
                        "Endpoint URL type to fetch from the service catalog."
                    ],
                    "type": "str"
                },
                "listeners": {
                    "description": [
                        "A list of listeners that attached to the load balancer."
                    ],
                    "elements": "dict",
                    "suboptions": {
                        "allowed_cidrs": {
                            "default": [],
                            "description": [
                                "A list of IPv4, IPv6 or mix of both CIDRs to be allowed access to the listener. The default is all allowed. When a list of CIDRs is provided, the default switches to deny all. Ignored on unsupported Octavia versions (less than 2.12)"
                            ]
                        },
                        "name": {
                            "description": [
                                "The listener name or ID."
                            ]
                        },
                        "pool": {
                            "description": [
                                "The pool attached to the listener."
                            ],
                            "suboptions": {
                                "lb_algorithm": {
                                    "default": "ROUND_ROBIN",
                                    "description": [
                                        "The load balancing algorithm for the pool."
                                    ]
                                },
                                "members": {
                                    "description": [
                                        "A list of members that added to the pool."
                                    ],
                                    "suboptions": {
                                        "address": {
                                            "description": [
                                                "The IP address of the member."
                                            ]
                                        },
                                        "name": {
                                            "description": [
                                                "The member name or ID."
                                            ]
                                        },
                                        "protocol_port": {
                                            "default": 80,
                                            "description": [
                                                "The protocol port number for the member."
                                            ]
                                        },
                                        "subnet": {
                                            "description": [
                                                "The name or ID of the subnet the member service is accessible from."
                                            ]
                                        }
                                    }
                                },
                                "name": {
                                    "description": [
                                        "The pool name or ID."
                                    ]
                                },
                                "protocol": {
                                    "default": "HTTP",
                                    "description": [
                                        "The protocol for the pool."
                                    ]
                                }
                            }
                        },
                        "protocol": {
                            "default": "HTTP",
                            "description": [
                                "The protocol for the listener."
                            ]
                        },
                        "protocol_port": {
                            "default": 80,
                            "description": [
                                "The protocol port number for the listener."
                            ]
                        }
                    },
                    "type": "list"
                },
                "name": {
                    "description": [
                        "The name of the load balancer."
                    ],
                    "required": true,
                    "type": "str"
                },
                "public_ip_address": {
                    "description": [
                        "Public IP address associated with the VIP."
                    ],
                    "type": "str"
                },
                "public_network": {
                    "description": [
                        "The name or ID of a Neutron external network."
                    ],
                    "type": "str"
                },
                "region_name": {
                    "description": [
                        "Name of the region."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Should the resource be present or absent."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 180,
                    "description": [
                        "The amount of time the module should wait."
                    ],
                    "type": "int"
                },
                "validate_certs": {
                    "aliases": [
                        "verify"
                    ],
                    "default": false,
                    "description": [
                        "Whether or not SSL API requests should be verified.",
                        "Before Ansible 2.3 this defaulted to C(yes)."
                    ],
                    "type": "bool"
                },
                "vip_address": {
                    "description": [
                        "IP address of the load balancer virtual IP."
                    ],
                    "type": "str"
                },
                "vip_network": {
                    "description": [
                        "The name or id of the network for the virtual IP of the load balancer. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation."
                    ],
                    "type": "str"
                },
                "vip_port": {
                    "description": [
                        "The name or id of the load balancer virtual IP port. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation."
                    ],
                    "type": "str"
                },
                "vip_subnet": {
                    "description": [
                        "The name or id of the subnet for the virtual IP of the load balancer. One of I(vip_network), I(vip_subnet), or I(vip_port) must be specified for creation."
                    ],
                    "type": "str"
                },
                "wait": {
                    "default": "yes",
                    "description": [
                        "If the module should wait for the load balancer to be created or deleted."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "openstacksdk",
                "openstacksdk >= 0.12.0",
                "python >= 3.6"
            ],
            "short_description": "Add/Delete load balancer from OpenStack Cloud"
        },
        "examples": "\n# Create a load balancer by specifying the VIP subnet.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: present\n    name: my_lb\n    vip_subnet: my_subnet\n    timeout: 150\n\n# Create a load balancer by specifying the VIP network and the IP address.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: present\n    name: my_lb\n    vip_network: my_network\n    vip_address: 192.168.0.11\n\n# Create a load balancer together with its sub-resources in the 'all in one'\n# way. A public IP address is also allocated to the load balancer VIP.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    name: lingxian_test\n    state: present\n    vip_subnet: kong_subnet\n    auto_public_ip: yes\n    public_network: public\n    listeners:\n      - name: lingxian_80\n        protocol: TCP\n        protocol_port: 80\n        pool:\n          name: lingxian_80_pool\n          protocol: TCP\n          members:\n            - name: mywebserver1\n              address: 192.168.2.81\n              protocol_port: 80\n              subnet: webserver_subnet\n      - name: lingxian_8080\n        protocol: TCP\n        protocol_port: 8080\n        pool:\n          name: lingxian_8080-pool\n          protocol: TCP\n          members:\n            - name: mywebserver2\n              address: 192.168.2.82\n              protocol_port: 8080\n    wait: yes\n    timeout: 600\n\n# Delete a load balancer(and all its related resources)\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: absent\n    name: my_lb\n\n# Delete a load balancer(and all its related resources) together with the\n# public IP address(if any) attached to it.\n- openstack.cloud.loadbalancer:\n    auth:\n      auth_url: https://identity.example.com\n      username: admin\n      password: passme\n      project_name: admin\n    state: absent\n    name: my_lb\n    delete_public_ip: yes\n",
        "metadata": null,
        "return": {
            "id": {
                "description": "The load balancer UUID.",
                "returned": "On success when C(state=present)",
                "sample": "39007a7e-ee4f-4d13-8283-b4da2e037c69",
                "type": "str"
            },
            "loadbalancer": {
                "contains": {
                    "id": {
                        "description": "Unique UUID.",
                        "sample": "39007a7e-ee4f-4d13-8283-b4da2e037c69",
                        "type": "str"
                    },
                    "is_admin_state_up": {
                        "description": "The administrative state of the load balancer.",
                        "sample": true,
                        "type": "bool"
                    },
                    "listeners": {
                        "description": "The associated listener IDs, if any.",
                        "sample": [
                            {
                                "id": "7aa1b380-beec-459c-a8a7-3a4fb6d30645"
                            },
                            {
                                "id": "692d06b8-c4f8-4bdb-b2a3-5a263cc23ba6"
                            }
                        ],
                        "type": "list"
                    },
                    "name": {
                        "description": "Name given to the load balancer.",
                        "sample": "lingxian_test",
                        "type": "str"
                    },
                    "operating_status": {
                        "description": "The operating status of the load balancer.",
                        "sample": "ONLINE",
                        "type": "str"
                    },
                    "pools": {
                        "description": "The associated pool IDs, if any.",
                        "sample": [
                            {
                                "id": "27b78d92-cee1-4646-b831-e3b90a7fa714"
                            },
                            {
                                "id": "befc1fb5-1992-4697-bdb9-eee330989344"
                            }
                        ],
                        "type": "list"
                    },
                    "provisioning_status": {
                        "description": "The provisioning status of the load balancer.",
                        "sample": "ACTIVE",
                        "type": "str"
                    },
                    "public_vip_address": {
                        "description": "The load balancer public VIP address.",
                        "sample": "10.17.8.254",
                        "type": "str"
                    },
                    "vip_address": {
                        "description": "The load balancer virtual IP address.",
                        "sample": "192.168.2.88",
                        "type": "str"
                    },
                    "vip_network_id": {
                        "description": "Network ID the load balancer virtual IP port belongs in.",
                        "sample": "f171db43-56fd-41cf-82d7-4e91d741762e",
                        "type": "str"
                    },
                    "vip_port_id": {
                        "description": "The load balancer virtual IP port ID.",
                        "sample": "2061395c-1c01-47ab-b925-c91b93df9c1d",
                        "type": "str"
                    },
                    "vip_subnet_id": {
                        "description": "Subnet ID the load balancer virtual IP port belongs in.",
                        "sample": "c53e3c70-9d62-409a-9f71-db148e7aa853",
                        "type": "str"
                    }
                },
                "description": "Dictionary describing the load balancer.",
                "returned": "On success when C(state=present)",
                "type": "complex"
            }
        }
    }
}
