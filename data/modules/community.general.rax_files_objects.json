{
    "community.general.rax_files_objects": {
        "doc": {
            "author": "Paul Durivage (@angstwad)",
            "collection": "community.general",
            "description": [
                "Upload, download, and delete objects in Rackspace Cloud Files"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/rax_files_objects.py",
            "has_action": false,
            "module": "rax_files_objects",
            "notes": [
                "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).",
                "C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)",
                "C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file",
                "C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)",
                "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).",
                "C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)",
                "C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file",
                "C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)"
            ],
            "options": {
                "api_key": {
                    "aliases": [
                        "password"
                    ],
                    "description": [
                        "Rackspace API key, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "auth_endpoint": {
                    "description": [
                        "The URI of the authentication service.",
                        "If not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)"
                    ],
                    "type": "str"
                },
                "clear_meta": {
                    "default": "no",
                    "description": [
                        "Optionally clear existing metadata when applying metadata to existing objects. Selecting this option is only appropriate when setting type=meta"
                    ],
                    "type": "bool"
                },
                "container": {
                    "description": [
                        "The container to use for file object operations."
                    ],
                    "required": true,
                    "type": "str"
                },
                "credentials": {
                    "aliases": [
                        "creds_file"
                    ],
                    "description": [
                        "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided."
                    ],
                    "type": "path"
                },
                "dest": {
                    "description": [
                        "The destination of a \"get\" operation; i.e. a local directory, \"/home/user/myfolder\". Used to specify the destination of an operation on a remote object; i.e. a file name, \"file1\", or a comma-separated list of remote objects, \"file1,file2,file17\""
                    ],
                    "type": "str"
                },
                "env": {
                    "description": [
                        "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration)."
                    ],
                    "type": "str"
                },
                "expires": {
                    "description": [
                        "Used to set an expiration on a file or folder uploaded to Cloud Files. Requires an integer, specifying expiration in seconds"
                    ],
                    "type": "int"
                },
                "identity_type": {
                    "default": "rackspace",
                    "description": [
                        "Authentication mechanism to use, such as rackspace or keystone."
                    ],
                    "type": "str"
                },
                "meta": {
                    "description": [
                        "A hash of items to set as metadata values on an uploaded file or folder"
                    ],
                    "type": "dict"
                },
                "method": {
                    "choices": [
                        "get",
                        "put",
                        "delete"
                    ],
                    "default": "get",
                    "description": [
                        "The method of operation to be performed.  For example, put to upload files to Cloud Files, get to download files from Cloud Files or delete to delete remote objects in Cloud Files"
                    ],
                    "type": "str"
                },
                "region": {
                    "description": [
                        "Region to create an instance in."
                    ],
                    "type": "str"
                },
                "src": {
                    "description": [
                        "Source from which to upload files.  Used to specify a remote object as a source for an operation, i.e. a file name, \"file1\", or a comma-separated list of remote objects, \"file1,file2,file17\".  src and dest are mutually exclusive on remote-only object operations"
                    ],
                    "type": "str"
                },
                "structure": {
                    "default": "yes",
                    "description": [
                        "Used to specify whether to maintain nested directory structure when downloading objects from Cloud Files.  Setting to false downloads the contents of a container to a single, flat directory"
                    ],
                    "type": "bool"
                },
                "tenant_id": {
                    "description": [
                        "The tenant ID used for authentication."
                    ],
                    "type": "str"
                },
                "tenant_name": {
                    "description": [
                        "The tenant name used for authentication."
                    ],
                    "type": "str"
                },
                "type": {
                    "choices": [
                        "file",
                        "meta"
                    ],
                    "default": "file",
                    "description": [
                        "Type of object to do work on",
                        "Metadata object or a file object"
                    ],
                    "type": "str"
                },
                "username": {
                    "description": [
                        "Rackspace username, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "description": [
                        "Whether or not to require SSL validation of API endpoints."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "pyrax",
                "python >= 2.6"
            ],
            "short_description": "Upload, download, and delete objects in Rackspace Cloud Files"
        },
        "examples": "\n- name: \"Test Cloud Files Objects\"\n  hosts: local\n  gather_facts: False\n  tasks:\n    - name: \"Get objects from test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        dest: ~/Downloads/testcont\n\n    - name: \"Get single object from test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        src: file1\n        dest: ~/Downloads/testcont\n\n    - name: \"Get several objects from test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        src: file1,file2,file3\n        dest: ~/Downloads/testcont\n\n    - name: \"Delete one object in test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n        dest: file1\n\n    - name: \"Delete several objects in test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n        dest: file2,file3,file4\n\n    - name: \"Delete all objects in test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n\n    - name: \"Upload all files to test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: put\n        src: ~/Downloads/onehundred\n\n    - name: \"Upload one file to test container\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: put\n        src: ~/Downloads/testcont/file1\n\n    - name: \"Upload one file to test container with metadata\"\n      community.general.rax_files_objects:\n        container: testcont\n        src: ~/Downloads/testcont/file2\n        method: put\n        meta:\n          testkey: testdata\n          who_uploaded_this: someuser@example.com\n\n    - name: \"Upload one file to test container with TTL of 60 seconds\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: put\n        src: ~/Downloads/testcont/file3\n        expires: 60\n\n    - name: \"Attempt to get remote object that does not exist\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: get\n        src: FileThatDoesNotExist.jpg\n        dest: ~/Downloads/testcont\n      ignore_errors: yes\n\n    - name: \"Attempt to delete remote object that does not exist\"\n      community.general.rax_files_objects:\n        container: testcont\n        method: delete\n        dest: FileThatDoesNotExist.jpg\n      ignore_errors: yes\n\n- name: \"Test Cloud Files Objects Metadata\"\n  hosts: local\n  gather_facts: false\n  tasks:\n    - name: \"Get metadata on one object\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        dest: file2\n\n    - name: \"Get metadata on several objects\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        src: file2,file1\n\n    - name: \"Set metadata on an object\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        dest: file17\n        method: put\n        meta:\n          key1: value1\n          key2: value2\n        clear_meta: true\n\n    - name: \"Verify metadata is set\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        src: file17\n\n    - name: \"Delete metadata\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n        dest: file17\n        method: delete\n        meta:\n          key1: ''\n          key2: ''\n\n    - name: \"Get metadata on all objects\"\n      community.general.rax_files_objects:\n        container: testcont\n        type: meta\n",
        "metadata": null,
        "return": null
    }
}
