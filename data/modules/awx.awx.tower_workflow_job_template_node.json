{
    "awx.awx.tower_workflow_job_template_node": {
        "doc": {
            "author": "John Westcott IV (@john-westcott-iv)",
            "collection": "awx.awx",
            "description": [
                "Create, update, or destroy Ansible Tower workflow job template nodes.",
                "Use this to build a graph for a workflow, which dictates what the workflow runs.",
                "Replaces the deprecated tower_workflow_template module schema command.",
                "You can create nodes first, and link them afterwards, and not worry about ordering. For failsafe referencing of a node, specify identifier, WFJT, and organization. With those specified, you can choose to modify or not modify any other parameter."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/awx/awx/plugins/modules/tower_workflow_job_template_node.py",
            "has_action": false,
            "module": "tower_workflow_job_template_node",
            "notes": [
                "If no I(config_file) is provided we will attempt to use the tower-cli library defaults to find your Tower host information.",
                "I(config_file) should contain Tower configuration in the following format host=hostname username=username password=password"
            ],
            "options": {
                "all_parents_must_converge": {
                    "description": [
                        "If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node"
                    ],
                    "type": "bool"
                },
                "always_nodes": {
                    "description": [
                        "Nodes that will run after this node completes.",
                        "List of node identifiers."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "approval_node": {
                    "description": [
                        "A dictionary of Name, description, and timeout values for the approval node.",
                        "This parameter is mutually exclusive with C(unified_job_template)."
                    ],
                    "suboptions": {
                        "description": {
                            "description": [
                                "Optional description of this workflow approval template."
                            ],
                            "type": "str"
                        },
                        "name": {
                            "description": [
                                "Name of this workflow approval template."
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "timeout": {
                            "description": [
                                "The amount of time (in seconds) before the approval node expires and fails."
                            ],
                            "type": "int"
                        }
                    },
                    "type": "dict"
                },
                "credentials": {
                    "description": [
                        "Credentials to be applied to job as launch-time prompts.",
                        "List of credential names.",
                        "Uniqueness is not handled rigorously."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "diff_mode": {
                    "description": [
                        "Run diff mode, applied as a prompt, if job template prompts for diff mode"
                    ],
                    "type": "bool"
                },
                "extra_data": {
                    "default": {},
                    "description": [
                        "Variables to apply at launch time.",
                        "Will only be accepted if job template prompts for vars or has a survey asking for those vars."
                    ],
                    "type": "dict"
                },
                "failure_nodes": {
                    "description": [
                        "Nodes that will run after this node on failure.",
                        "List of node identifiers."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "identifier": {
                    "description": [
                        "An identifier for this node that is unique within its workflow.",
                        "It is copied to workflow job nodes corresponding to this node."
                    ],
                    "required": true,
                    "type": "str"
                },
                "inventory": {
                    "description": [
                        "Inventory applied as a prompt, if job template prompts for inventory"
                    ],
                    "type": "str"
                },
                "job_tags": {
                    "description": [
                        "Job tags applied as a prompt, if job template prompts for job tags"
                    ],
                    "type": "str"
                },
                "job_type": {
                    "choices": [
                        "run",
                        "check"
                    ],
                    "description": [
                        "Job type applied as a prompt, if job template prompts for job type"
                    ],
                    "type": "str"
                },
                "limit": {
                    "description": [
                        "Limit to act on, applied as a prompt, if job template prompts for limit"
                    ],
                    "type": "str"
                },
                "organization": {
                    "description": [
                        "The organization of the workflow job template the node exists in.",
                        "Used for looking up the workflow, not a direct model field."
                    ],
                    "type": "str"
                },
                "scm_branch": {
                    "description": [
                        "SCM branch applied as a prompt, if job template prompts for SCM branch"
                    ],
                    "type": "str"
                },
                "skip_tags": {
                    "description": [
                        "Tags to skip, applied as a prompt, if job tempalte prompts for job tags"
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Desired state of the resource."
                    ],
                    "type": "str"
                },
                "success_nodes": {
                    "description": [
                        "Nodes that will run after this node on success.",
                        "List of node identifiers."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "tower_config_file": {
                    "description": [
                        "Path to the Tower or AWX config file.",
                        "If provided, the other locations for config files will not be considered."
                    ],
                    "type": "path"
                },
                "tower_host": {
                    "description": [
                        "URL to your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_HOST) and then config files",
                        "If value not specified by any means, the value of C(127.0.0.1) will be used"
                    ],
                    "type": "str"
                },
                "tower_oauthtoken": {
                    "description": [
                        "The Tower OAuth token to use.",
                        "This value can be in one of two formats.",
                        "A string which is the token itself. (i.e. bqV5txm97wqJqtkxlMkhQz0pKhRMMX)",
                        "A dictionary structure as returned by the tower_token module.",
                        "If value not set, will try environment variable C(TOWER_OAUTH_TOKEN) and then config files"
                    ],
                    "type": "raw",
                    "version_added": "3.7",
                    "version_added_collection": "awx.awx"
                },
                "tower_password": {
                    "description": [
                        "Password for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_PASSWORD) and then config files"
                    ],
                    "type": "str"
                },
                "tower_username": {
                    "description": [
                        "Username for your Tower or AWX instance.",
                        "If value not set, will try environment variable C(TOWER_USERNAME) and then config files"
                    ],
                    "type": "str"
                },
                "unified_job_template": {
                    "description": [
                        "Name of unified job template to run in the workflow.",
                        "Can be a job template, project, inventory source, etc.",
                        "Omit if creating an approval node.",
                        "This parameter is mutually exclusive with C(approval_node)."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "tower_verify_ssl"
                    ],
                    "description": [
                        "Whether to allow insecure connections to Tower or AWX.",
                        "If C(no), SSL certificates will not be validated.",
                        "This should only be used on personally controlled sites using self-signed certificates.",
                        "If value not set, will try environment variable C(TOWER_VERIFY_SSL) and then config files"
                    ],
                    "type": "bool"
                },
                "verbosity": {
                    "choices": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5"
                    ],
                    "description": [
                        "Verbosity applied as a prompt, if job template prompts for verbosity"
                    ],
                    "type": "str"
                },
                "workflow_job_template": {
                    "aliases": [
                        "workflow"
                    ],
                    "description": [
                        "The workflow job template the node exists in.",
                        "Used for looking up the node, cannot be modified after creation."
                    ],
                    "required": true,
                    "type": "str"
                }
            },
            "short_description": "create, update, or destroy Ansible Tower workflow job template nodes."
        },
        "examples": "\n- name: Create a node, follows tower_workflow_job_template example\n  tower_workflow_job_template_node:\n    identifier: my-first-node\n    workflow: example-workflow\n    unified_job_template: jt-for-node-use\n    organization: Default  # organization of workflow job template\n    extra_data:\n      foo_key: bar_value\n\n- name: Create parent node for prior node\n  tower_workflow_job_template_node:\n    identifier: my-root-node\n    workflow: example-workflow\n    unified_job_template: jt-for-node-use\n    organization: Default\n    success_nodes:\n      - my-first-node\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": null
    }
}
