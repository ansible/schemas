{
    "ssbarnea.dlrn.dlrn_api": {
        "doc": {
            "author": "jpena <jpena@redhat.com>",
            "collection": "ssbarnea.dlrn",
            "description": [
                "Ansible module to manage the DLRN API"
            ],
            "filename": "/Users/ssbarnea/.ansible/collections/ansible_collections/ssbarnea/dlrn/plugins/modules/dlrn_api.py",
            "has_action": false,
            "module": "dlrn_api",
            "options": {
                "action": {
                    "choices": [
                        "repo-get",
                        "repo-use",
                        "repo-status",
                        "report-result",
                        "repo-promote",
                        "commit-import",
                        "promotion-get",
                        "build-metrics"
                    ],
                    "description": [
                        "Action to take"
                    ],
                    "required": true
                },
                "commit_hash": {
                    "description": [
                        "If action is repo-status, commit_hash of the repo to fetch information for.",
                        "If action is report-result, commit_hash of tested repo.",
                        "If action is repo-promote, commit_hash of the repo to be promoted.",
                        "If action is promotion-get, filter results for this commit hash."
                    ]
                },
                "distro_hash": {
                    "description": [
                        "If action is repo-status, distro_hash of the repo to fetch information for.",
                        "If action is report-result, distro_hash of tested repo.",
                        "If action is repo-promote, distro_hash of the repo to be promoted.",
                        "If action is promotion-get, filter results for this distro hash."
                    ]
                },
                "end_date": {
                    "description": [
                        "If action is build-metrics, end date to consider for the metrics, in YYYY-mm-dd format."
                    ]
                },
                "host": {
                    "description": [
                        "URL for the DLRN API host"
                    ],
                    "required": true
                },
                "info_url": {
                    "description": [
                        "If action is report-result, URL where to find additional information from the CI execution."
                    ]
                },
                "job_id": {
                    "description": [
                        "If action is repo-get or repo-use, name of the CI that sent the vote. If not set, no filter will be set on CI.",
                        "If action is report-result, name of the CI sending the vote"
                    ]
                },
                "max_age": {
                    "default": 0,
                    "description": [
                        "If action is repo-get or repo-use, maximum age in hours for the repo to be considered."
                    ]
                },
                "notes": {
                    "description": [
                        "If action is report-result, additional notes."
                    ]
                },
                "package_name": {
                    "description": [
                        "If action is build-metrics, filter results for this package."
                    ]
                },
                "password": {
                    "description": [
                        "Password for operations requiring authentication. Mandatory if action is repo-use, report-result, repo-promote or commit-import"
                    ]
                },
                "previous_job_id": {
                    "description": [
                        "If sequential_mode is set to true, look for jobs tested by the CI identified by previous_job_id."
                    ]
                },
                "promote_name": {
                    "description": [
                        "If action is repo-promote, name to be used for the promotion.",
                        "If action is promotion-get, filter results by this promotion name."
                    ]
                },
                "repo_url": {
                    "description": [
                        "If action is commit-import, base repository URL for imported remote repo"
                    ]
                },
                "reporting_job_id": {
                    "description": [
                        "If action is repo-use, name of the CI that will add the \"in progress\" entry in the CI job table."
                    ]
                },
                "sequential_mode": {
                    "default": false,
                    "description": [
                        "If action is repo-get or repo-use, use the sequential mode algorithm. In this case, return the last tested repo within that timeframe for the CI job described by previous_job_id."
                    ]
                },
                "start_date": {
                    "description": [
                        "If action is build-metrics, start date to consider for the metrics, in YYYY-mm-dd format."
                    ]
                },
                "success": {
                    "description": [
                        "If action is repo-get or repo-use, find repos with a successful/unsuccessful vote (as specified). If not set, any tested repo will be considered.",
                        "If action is report-result, was the CI execution successful?"
                    ]
                },
                "timestamp": {
                    "description": [
                        "If action is report-result, timestamp (in seconds since the epoch) for the CI execution"
                    ]
                },
                "user": {
                    "description": [
                        "Username for operations requiring authentication. Mandatory if action is repo-use, report-result, repo-promote or commit-import"
                    ]
                }
            },
            "requirements": [
                "python >= 2.6",
                "python-dlrnapi_client"
            ],
            "short_description": "Ansible module to manage the DLRN API",
            "version_added": "1.0",
            "version_added_collection": "ssbarnea.dlrn"
        },
        "examples": "\n# Get the last repo tested by any CI\n- dlrn_api:\n    action: repo-get\n    host: http://dlrn.example.com:5000\n  register: result\n\n# Get the last repo tested by any CI in the last 4 hours\n- dlrn_api:\n    action: repo-get\n    host: http://dlrn.example.com:5000\n    max_age: 4\n  register: result\n\n# Get the last repo, successfully tested by the foo-ci CI, in the last 24 hours\n- dlrn_api:\n    action: repo-get\n    host: http://dlrn.example.com:5000\n    max_age: 24\n    job_id: foo-ci\n    success: true\n  register: result\n\n# Get and start using the last repo, that failed testing by the foo-ci CI, in\n# the last 6 hours, and mark it as being used by the bar-ci CI\n- dlrn_api:\n    action: repo-use\n    host: http://dlrn.example.com:5000\n    user: myuser\n    password: mypasswd\n    max_age: 6\n    reporting_job_id: bar-ci\n    job_id: foo-ci\n    success: false\n  register: result\n\n# Get the CI reports for a specific commit\n- dlrn_api:\n    action: repo-status\n    host: http://dlrn.example.com:5000\n    commit_hash: 3a9326f251b9a4162eb0dfa9f1c924ef47c2c55a\n    distro_hash: 024e24f0cf4366c2290c22f24e42de714d1addd1\n  register: result\n\n# Get the promotions for a specific job\n- dlrn_api:\n    action: promotion-get\n    host: http://dlrn.example.com:5000\n    promote_name: foo-ci\n  register: result\n\n# Report result on a CI job ran by foo-ci\n- dlrn_api:\n    action: report-result\n    host: http://dlrn.example.com:5000\n    user: myuser\n    password: mypasswd\n    job_id: foo-ci\n    commit_hash: 3a9326f251b9a4162eb0dfa9f1c924ef47c2c55a\n    distro_hash: 024e24f0cf4366c2290c22f24e42de714d1addd1\n    info_url: http://ci.example.com/job_id?1\n    timestamp: 1431949433\n    success: true\n    notes: blablabla\n\n# Promote a repository\n- dlrn_api:\n    action: repo-promote\n    host: http://dlrn.example.com:5000\n    user: myuser\n    password: mypasswd\n    commit_hash: 3a9326f251b9a4162eb0dfa9f1c924ef47c2c55a\n    distro_hash: 024e24f0cf4366c2290c22f24e42de714d1addd1\n    promote_name: current-passed-ci\n\n# Import a remote commit\n- dlrn_api:\n    action: commit-import\n    host: http://dlrn.example.com:5000\n    user: myuser\n    password: mypasswd\n    repo_url: http://builder.example.com/3a9326f251b9a4162eb0_024e24f0\n",
        "metadata": null,
        "return": null
    }
}
