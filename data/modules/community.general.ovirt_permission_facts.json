{
    "community.general.ovirt_permission_facts": {
        "doc": {
            "author": "Ondra Machacek (@machacekondra)",
            "collection": "community.general",
            "deprecated": {
                "alternative": "Use M(ovirt.ovirt.ovirt_permission_info) instead.",
                "removed_from_collection": "community.general",
                "removed_in": "3.0.0",
                "why": "When migrating to collection we decided to use only _info modules."
            },
            "description": [
                "Retrieve information about one or more oVirt/RHV permissions."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/ovirt_permission_facts.py",
            "has_action": false,
            "module": "ovirt_permission_facts",
            "notes": [
                "This module returns a variable C(ovirt_permissions), which contains a list of permissions. You need to register the result with the I(register) keyword to use it.",
                "In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can create the following task: ansible.builtin.pip: name=ovirt-engine-sdk-python version=4.3.0"
            ],
            "options": {
                "auth": {
                    "description": [
                        "Dictionary with values needed to create HTTP/HTTPS connection to oVirt:",
                        "C(username)[I(required)] - The name of the user, something like I(admin@internal). Default value is set by I(OVIRT_USERNAME) environment variable.",
                        "C(password)[I(required)] - The password of the user. Default value is set by I(OVIRT_PASSWORD) environment variable.",
                        "C(url)- A string containing the API URL of the server, usually something like `I(https://server.example.com/ovirt-engine/api)`. Default value is set by I(OVIRT_URL) environment variable. Either C(url) or C(hostname) is required.",
                        "C(hostname) - A string containing the hostname of the server, usually something like `I(server.example.com)`. Default value is set by I(OVIRT_HOSTNAME) environment variable. Either C(url) or C(hostname) is required.",
                        "C(token) - Token to be used instead of login with username/password. Default value is set by I(OVIRT_TOKEN) environment variable.",
                        "C(insecure) - A boolean flag that indicates if the server TLS certificate and host name should be checked.",
                        "C(ca_file) - A PEM file containing the trusted CA certificates. The certificate presented by the server will be verified using these CA certificates. If `C(ca_file)` parameter is not set, system wide CA certificate store is used. Default value is set by I(OVIRT_CAFILE) environment variable.",
                        "C(kerberos) - A boolean flag indicating if Kerberos authentication should be used instead of the default basic authentication.",
                        "C(headers) - Dictionary of HTTP headers to be added to each API call."
                    ],
                    "required": true,
                    "type": "dict"
                },
                "authz_name": {
                    "aliases": [
                        "domain"
                    ],
                    "description": [
                        "Authorization provider of the user/group. In previous versions of oVirt/RHV known as domain."
                    ],
                    "required": true
                },
                "fetch_nested": {
                    "default": false,
                    "description": [
                        "If I(yes) the module will fetch additional data from the API.",
                        "It will fetch only IDs of nested entity. It doesn't fetch multiple levels of nested attributes. Only the attributes of the current entity. User can configure to fetch other attributes of the nested entities by specifying C(nested_attributes)."
                    ],
                    "type": "bool"
                },
                "group_name": {
                    "description": [
                        "Name of the group to manage."
                    ]
                },
                "namespace": {
                    "description": [
                        "Namespace of the authorization provider, where user/group resides."
                    ],
                    "required": false
                },
                "nested_attributes": {
                    "description": [
                        "Specifies list of the attributes which should be fetched from the API.",
                        "This parameter apply only when C(fetch_nested) is I(true)."
                    ],
                    "type": "list"
                },
                "user_name": {
                    "description": [
                        "Username of the user to manage. In most LDAPs it's I(uid) of the user, but in Active Directory you must specify I(UPN) of the user."
                    ]
                }
            },
            "requirements": [
                "python >= 2.7",
                "ovirt-engine-sdk-python >= 4.3.0"
            ],
            "short_description": "Retrieve information about one or more oVirt/RHV permissions"
        },
        "examples": "\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n- name: Gather information about all permissions of user with username john\n  ovirt_permission_info:\n    user_name: john\n    authz_name: example.com-authz\n  register: result\n\n- name: Print gathered information\n  ansible.builtin.debug:\n    msg: \"{{ result.ovirt_permissions }}\"\n",
        "metadata": null,
        "return": {
            "ovirt_permissions": {
                "description": "List of dictionaries describing the permissions. Permission attributes are mapped to dictionary keys, all permissions attributes can be found at following url: http://ovirt.github.io/ovirt-engine-api-model/master/#types/permission.",
                "returned": "On success.",
                "type": "list"
            }
        }
    }
}
