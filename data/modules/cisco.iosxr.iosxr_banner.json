{
    "cisco.iosxr.iosxr_banner": {
        "doc": {
            "author": [
                "Trishna Guha (@trishnaguha)",
                "Kedar Kekan (@kedarX)"
            ],
            "collection": "cisco.iosxr",
            "description": [
                "This module will configure both exec and motd banners on remote device running Cisco IOS XR. It allows playbooks to add or remove banner text from the running configuration."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/cisco/iosxr/plugins/modules/iosxr_banner.py",
            "has_action": true,
            "module": "iosxr_banner",
            "notes": [
                "Tested against IOS XRv 6.1.3.",
                "This module works with connection C(network_cli) and C(netconf). See L(the IOS-XR Platform Options,../network/user_guide/platform_iosxr.html).",
                "For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`",
                "For more information on using Ansible to manage Cisco devices see the `Cisco integration page <https://www.ansible.com/integrations/networks/cisco>`_."
            ],
            "options": {
                "banner": {
                    "choices": [
                        "login",
                        "motd"
                    ],
                    "description": [
                        "Specifies the type of banner to configure on remote device."
                    ],
                    "required": true,
                    "type": "str"
                },
                "provider": {
                    "description": [
                        "B(Deprecated)",
                        "Starting with Ansible 2.5 we recommend using C(connection: network_cli).",
                        "For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-protocols).",
                        "HORIZONTALLINE",
                        "A dict object containing connection details."
                    ],
                    "suboptions": {
                        "host": {
                            "description": [
                                "Specifies the DNS host name or address for connecting to the remote device over the specified transport.  The value of host is used as the destination address for the transport."
                            ],
                            "type": "str"
                        },
                        "password": {
                            "description": [
                                "Specifies the password to use to authenticate the connection to the remote device.   This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD) will be used instead."
                            ],
                            "type": "str"
                        },
                        "port": {
                            "description": [
                                "Specifies the port to use when building the connection to the remote device."
                            ],
                            "type": "int"
                        },
                        "ssh_keyfile": {
                            "description": [
                                "Specifies the SSH key to use to authenticate the connection to the remote device.   This value is the path to the key used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead."
                            ],
                            "type": "path"
                        },
                        "timeout": {
                            "description": [
                                "Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands.  If the timeout is exceeded before the operation is completed, the module will error."
                            ],
                            "type": "int"
                        },
                        "transport": {
                            "choices": [
                                "cli",
                                "netconf"
                            ],
                            "default": "cli",
                            "description": [
                                "Specifies the type of connection based transport."
                            ],
                            "type": "str"
                        },
                        "username": {
                            "description": [
                                "Configures the username to use to authenticate the connection to the remote device.  This value is used to authenticate the SSH session. If the value is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME) will be used instead."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Existential state of the configuration on the device."
                    ],
                    "type": "str"
                },
                "text": {
                    "description": [
                        "Banner text to be configured. Accepts multi line string, without empty lines. When using a multi line string, the first and last characters must be the start and end delimiters for the banner Requires I(state=present)."
                    ],
                    "type": "str"
                }
            },
            "requirements": [
                "ncclient >= 0.5.3 when using netconf",
                "lxml >= 4.1.1 when using netconf"
            ],
            "short_description": "Manage multiline banners on Cisco IOS XR devices",
            "version_added": "1.0.0",
            "version_added_collection": "cisco.iosxr"
        },
        "examples": "\n- name: configure the login banner\n  cisco.iosxr.iosxr_banner:\n    banner: login\n    text: |\n      @this is my login banner\n      that contains a multiline\n      string@\n    state: present\n- name: remove the motd banner\n  cisco.iosxr.iosxr_banner:\n    banner: motd\n    state: absent\n- name: Configure banner from file\n  cisco.iosxr.iosxr_banner:\n    banner: motd\n    text: \"{{ lookup('file', './config_partial/raw_banner.cfg') }}\"\n    state: present\n",
        "metadata": null,
        "return": {
            "commands": {
                "description": "The list of configuration mode commands sent to device with transport C(cli)",
                "returned": "always (empty list when no commands to send)",
                "sample": [
                    "banner login",
                    "@this is my login banner",
                    "that contains a multiline",
                    "string@"
                ],
                "type": "list"
            },
            "xml": {
                "description": "NetConf rpc xml sent to device with transport C(netconf)",
                "returned": "always (empty list when no xml rpc to send)",
                "sample": [
                    "<config xmlns:xc=\"urn:ietf:params:xml:ns:netconf:base:1.0\"> <banners xmlns=\"http://cisco.com/ns/yang/Cisco-IOS-XR-infra-infra-cfg\"> <banner xc:operation=\"merge\"> <banner-name>motd</banner-name> <banner-text>Ansible banner example</banner-text> </banner> </banners> </config>"
                ],
                "type": "list"
            }
        }
    }
}
