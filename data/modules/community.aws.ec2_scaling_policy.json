{
    "community.aws.ec2_scaling_policy": {
        "doc": {
            "author": [
                "Zacharie Eakin (@zeekin)",
                "Will Thames (@willthames)"
            ],
            "collection": "community.aws",
            "description": [
                "Can create or delete scaling policies for autoscaling groups.",
                "Referenced autoscaling groups must already exist."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/ec2_scaling_policy.py",
            "has_action": false,
            "module": "ec2_scaling_policy",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "adjustment_type": {
                    "choices": [
                        "ChangeInCapacity",
                        "ExactCapacity",
                        "PercentChangeInCapacity"
                    ],
                    "description": [
                        "The type of change in capacity of the autoscaling group.",
                        "Required if I(state) is C(present)."
                    ],
                    "type": "str"
                },
                "asg_name": {
                    "description": [
                        "Name of the associated autoscaling group.",
                        "Required if I(state) is C(present)."
                    ],
                    "type": "str"
                },
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "cooldown": {
                    "description": [
                        "The minimum period of time (in seconds) between which autoscaling actions can take place.",
                        "Only used when I(policy_type) is C(SimpleScaling)."
                    ],
                    "type": "int"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "estimated_instance_warmup": {
                    "description": [
                        "The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics."
                    ],
                    "type": "int"
                },
                "metric_aggregation": {
                    "choices": [
                        "Minimum",
                        "Maximum",
                        "Average"
                    ],
                    "default": "Average",
                    "description": [
                        "The aggregation type for the CloudWatch metrics.",
                        "Only used when I(policy_type) is not C(SimpleScaling)."
                    ],
                    "type": "str"
                },
                "min_adjustment_step": {
                    "description": [
                        "Minimum amount of adjustment when policy is triggered.",
                        "Only used when I(adjustment_type) is C(PercentChangeInCapacity)."
                    ],
                    "type": "int"
                },
                "name": {
                    "description": [
                        "Unique name for the scaling policy."
                    ],
                    "required": true,
                    "type": "str"
                },
                "policy_type": {
                    "choices": [
                        "StepScaling",
                        "SimpleScaling"
                    ],
                    "default": "SimpleScaling",
                    "description": [
                        "Auto scaling adjustment policy."
                    ],
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "scaling_adjustment": {
                    "description": [
                        "The amount by which the autoscaling group is adjusted by the policy.",
                        "A negative number has the effect of scaling down the ASG.",
                        "Units are numbers of instances for C(ExactCapacity) or C(ChangeInCapacity) or percent of existing instances for C(PercentChangeInCapacity).",
                        "Required when I(policy_type) is C(SimpleScaling)."
                    ],
                    "type": "int"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Register or deregister the policy."
                    ],
                    "type": "str"
                },
                "step_adjustments": {
                    "description": [
                        "list of dicts containing I(lower_bound), I(upper_bound) and I(scaling_adjustment)",
                        "Intervals must not overlap or have a gap between them.",
                        "At most, one item can have an undefined I(lower_bound). If any item has a negative lower_bound, then there must be a step adjustment with an undefined I(lower_bound).",
                        "At most, one item can have an undefined I(upper_bound). If any item has a positive upper_bound, then there must be a step adjustment with an undefined I(upper_bound).",
                        "The bounds are the amount over the alarm threshold at which the adjustment will trigger. This means that for an alarm threshold of 50, triggering at 75 requires a lower bound of 25. See U(http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_StepAdjustment.html)."
                    ],
                    "elements": "dict",
                    "suboptions": {
                        "lower_bound": {
                            "description": [
                                "The lower bound for the difference between the alarm threshold and the CloudWatch metric."
                            ],
                            "type": "int"
                        },
                        "scaling_adjustment": {
                            "description": [
                                "The amount by which to scale."
                            ],
                            "required": true,
                            "type": "int"
                        },
                        "upper_bound": {
                            "description": [
                                "The upper bound for the difference between the alarm threshold and the CloudWatch metric."
                            ],
                            "type": "int"
                        }
                    },
                    "type": "list"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "boto"
            ],
            "short_description": "Create or delete AWS scaling policies for Autoscaling groups",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n- name: Simple Scale Down policy\n  community.aws.ec2_scaling_policy:\n    state: present\n    region: US-XXX\n    name: \"scaledown-policy\"\n    adjustment_type: \"ChangeInCapacity\"\n    asg_name: \"application-asg\"\n    scaling_adjustment: -1\n    min_adjustment_step: 1\n    cooldown: 300\n\n# For an alarm with a breach threshold of 20, the\n# following creates a stepped policy:\n# From 20-40 (0-20 above threshold), increase by 50% of existing capacity\n# From 41-infinity, increase by 100% of existing capacity\n- community.aws.ec2_scaling_policy:\n    state: present\n    region: US-XXX\n    name: \"step-scale-up-policy\"\n    policy_type: StepScaling\n    metric_aggregation: Maximum\n    step_adjustments:\n      - upper_bound: 20\n        scaling_adjustment: 50\n      - lower_bound: 20\n        scaling_adjustment: 100\n    adjustment_type: \"PercentChangeInCapacity\"\n    asg_name: \"application-asg\"\n",
        "metadata": null,
        "return": {
            "adjustment_type": {
                "description": "Scaling policy adjustment type",
                "returned": "always",
                "sample": "PercentChangeInCapacity",
                "type": "str"
            },
            "alarms": {
                "contains": {
                    "alarm_arn": {
                        "description": "ARN of the Cloudwatch alarm",
                        "returned": "always",
                        "sample": "arn:aws:cloudwatch:us-east-2:1234567890:alarm:cpu-very-high",
                        "type": "str"
                    },
                    "alarm_name": {
                        "description": "name of the Cloudwatch alarm",
                        "returned": "always",
                        "sample": "cpu-very-high",
                        "type": "str"
                    }
                },
                "description": "Cloudwatch alarms related to the policy",
                "returned": "always",
                "type": "complex"
            },
            "arn": {
                "description": "ARN of the scaling policy. Provided for backward compatibility, value is the same as I(policy_arn)",
                "returned": "always",
                "sample": "arn:aws:autoscaling:us-east-2:123456789012:scalingPolicy:59e37526-bd27-42cf-adca-5cd3d90bc3b9:autoScalingGroupName/app-asg:policyName/app-policy",
                "type": "str"
            },
            "as_name": {
                "description": "Auto Scaling Group name. Provided for backward compatibility, value is the same as I(auto_scaling_group_name)",
                "returned": "always",
                "sample": "app-asg",
                "type": "str"
            },
            "auto_scaling_group_name": {
                "description": "Name of Auto Scaling Group",
                "returned": "always",
                "sample": "app-asg",
                "type": "str"
            },
            "metric_aggregation_type": {
                "description": "Method used to aggregate metrics",
                "returned": "when I(policy_type) is C(StepScaling)",
                "sample": "Maximum",
                "type": "str"
            },
            "name": {
                "description": "Name of the scaling policy. Provided for backward compatibility, value is the same as I(policy_name)",
                "returned": "always",
                "sample": "app-policy",
                "type": "str"
            },
            "policy_arn": {
                "description": "ARN of scaling policy.",
                "returned": "always",
                "sample": "arn:aws:autoscaling:us-east-2:123456789012:scalingPolicy:59e37526-bd27-42cf-adca-5cd3d90bc3b9:autoScalingGroupName/app-asg:policyName/app-policy",
                "type": "str"
            },
            "policy_name": {
                "description": "Name of scaling policy",
                "returned": "always",
                "sample": "app-policy",
                "type": "str"
            },
            "policy_type": {
                "description": "Type of auto scaling policy",
                "returned": "always",
                "sample": "StepScaling",
                "type": "str"
            },
            "scaling_adjustment": {
                "description": "Adjustment to make when alarm is triggered",
                "returned": "When I(policy_type) is C(SimpleScaling)",
                "sample": 1,
                "type": "int"
            },
            "step_adjustments": {
                "contains": {
                    "metric_interval_lower_bound": {
                        "description": "Lower bound for metric interval",
                        "returned": "if step has a lower bound",
                        "sample": 20.0,
                        "type": "float"
                    },
                    "metric_interval_upper_bound": {
                        "description": "Upper bound for metric interval",
                        "returned": "if step has an upper bound",
                        "sample": 40.0,
                        "type": "float"
                    },
                    "scaling_adjustment": {
                        "description": "Adjustment to make if this step is reached",
                        "returned": "always",
                        "sample": 50,
                        "type": "int"
                    }
                },
                "description": "List of step adjustments",
                "returned": "always",
                "type": "complex"
            }
        }
    }
}
