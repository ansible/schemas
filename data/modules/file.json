{
    "file": {
        "doc": {
            "author": [
                "Ansible Core Team",
                "Michael DeHaan"
            ],
            "collection": "ansible.builtin",
            "description": [
                "Set attributes of files, symlinks or directories.",
                "Alternatively, remove files, symlinks or directories.",
                "Many other modules support the same options as the C(file) module - including M(ansible.builtin.copy), M(ansible.builtin.template), and M(ansible.builtin.assemble).",
                "For Windows targets, use the M(ansible.windows.win_file) module instead."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible/modules/file.py",
            "has_action": false,
            "module": "file",
            "notes": [
                "Supports C(check_mode)."
            ],
            "options": {
                "access_time": {
                    "description": [
                        "This parameter indicates the time the file's access time should be set to.",
                        "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).",
                        "Default is C(None) meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."
                    ],
                    "type": "str",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "access_time_format": {
                    "default": "%Y%m%d%H%M.%S",
                    "description": [
                        "When used with C(access_time), indicates the time format that must be used.",
                        "Based on default Python format (see time.strftime doc)."
                    ],
                    "type": "str",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "attributes": {
                    "aliases": [
                        "attr"
                    ],
                    "description": [
                        "The attributes the resulting file or directory should have.",
                        "To get supported flags look at the man page for I(chattr) on the target system.",
                        "This string should contain the attributes in the same order as the one displayed by I(lsattr).",
                        "The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string."
                    ],
                    "type": "str",
                    "version_added": "2.3",
                    "version_added_collection": "ansible.builtin"
                },
                "follow": {
                    "default": true,
                    "description": [
                        "This flag indicates that filesystem links, if they exist, should be followed.",
                        "Previous to Ansible 2.5, this was C(no) by default."
                    ],
                    "type": "bool",
                    "version_added": "1.8",
                    "version_added_collection": "ansible.builtin"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the C(path) file and create symlink to the C(src) file in place of it).\n"
                    ],
                    "type": "bool"
                },
                "group": {
                    "description": [
                        "Name of the group that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "mode": {
                    "description": [
                        "The permissions the resulting file or directory should have.",
                        "For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.",
                        "Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.",
                        "As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r))."
                    ],
                    "type": "raw"
                },
                "modification_time": {
                    "description": [
                        "This parameter indicates the time the file's modification time should be set to.",
                        "Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now).",
                        "Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)."
                    ],
                    "type": "str",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "modification_time_format": {
                    "default": "%Y%m%d%H%M.%S",
                    "description": [
                        "When used with C(modification_time), indicates the time format that must be used.",
                        "Based on default Python format (see time.strftime doc)."
                    ],
                    "type": "str",
                    "version_added": "2.7",
                    "version_added_collection": "ansible.builtin"
                },
                "owner": {
                    "description": [
                        "Name of the user that should own the file/directory, as would be fed to I(chown)."
                    ],
                    "type": "str"
                },
                "path": {
                    "aliases": [
                        "dest",
                        "name"
                    ],
                    "description": [
                        "Path to the file being managed."
                    ],
                    "required": true,
                    "type": "path"
                },
                "recurse": {
                    "default": false,
                    "description": [
                        "Recursively set the specified file attributes on directory contents.",
                        "This applies only when C(state) is set to C(directory)."
                    ],
                    "type": "bool",
                    "version_added": "1.1",
                    "version_added_collection": "ansible.builtin"
                },
                "selevel": {
                    "description": [
                        "The level part of the SELinux file context.",
                        "This is the MLS/MCS attribute, sometimes known as the C(range).",
                        "When set to C(_default), it will use the C(level) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "serole": {
                    "description": [
                        "The role part of the SELinux file context.",
                        "When set to C(_default), it will use the C(role) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "setype": {
                    "description": [
                        "The type part of the SELinux file context.",
                        "When set to C(_default), it will use the C(type) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "seuser": {
                    "description": [
                        "The user part of the SELinux file context.",
                        "By default it uses the C(system) policy, where applicable.",
                        "When set to C(_default), it will use the C(user) portion of the policy if available."
                    ],
                    "type": "str"
                },
                "src": {
                    "description": [
                        "Path of the file to link to.",
                        "This applies only to C(state=link) and C(state=hard).",
                        "For C(state=link), this will also accept a non-existing path.",
                        "Relative paths are relative to the file being created (C(path)) which is how the Unix command C(ln -s SRC DEST) treats relative paths."
                    ],
                    "type": "path"
                },
                "state": {
                    "choices": [
                        "absent",
                        "directory",
                        "file",
                        "hard",
                        "link",
                        "touch"
                    ],
                    "default": "file",
                    "description": [
                        "If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if C(diff) is declared, you will see the files and folders deleted listed under C(path_contents). Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change.",
                        "If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions.",
                        "If C(file), without any other options this works mostly as a 'stat' and will return the current state of C(path). Even with other options (i.e C(mode)), the file will be modified but will NOT be created if it does not exist; see the C(touch) value or the M(ansible.builtin.copy) or M(ansible.builtin.template) module if you want that behavior.",
                        "If C(hard), the hard link will be created or changed.",
                        "If C(link), the symbolic link will be created or changed.",
                        "If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way C(touch) works from the command line)."
                    ],
                    "type": "str"
                },
                "unsafe_writes": {
                    "default": false,
                    "description": [
                        "Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.",
                        "By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.",
                        "This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes).",
                        "IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption."
                    ],
                    "type": "bool",
                    "version_added": "2.2",
                    "version_added_collection": "ansible.builtin"
                }
            },
            "seealso": [
                {
                    "module": "ansible.builtin.assemble"
                },
                {
                    "module": "ansible.builtin.copy"
                },
                {
                    "module": "ansible.builtin.stat"
                },
                {
                    "module": "ansible.builtin.template"
                },
                {
                    "module": "ansible.windows.win_file"
                }
            ],
            "short_description": "Manage files and file properties",
            "version_added": "historical",
            "version_added_collection": "ansible.builtin"
        },
        "examples": "\n- name: Change file ownership, group and permissions\n  ansible.builtin.file:\n    path: /etc/foo.conf\n    owner: foo\n    group: foo\n    mode: '0644'\n\n- name: Give insecure permissions to an existing file\n  ansible.builtin.file:\n    path: /work\n    owner: root\n    group: root\n    mode: '1777'\n\n- name: Create a symbolic link\n  ansible.builtin.file:\n    src: /file/to/link/to\n    dest: /path/to/symlink\n    owner: foo\n    group: foo\n    state: link\n\n- name: Create two hard links\n  ansible.builtin.file:\n    src: '/tmp/{{ item.src }}'\n    dest: '{{ item.dest }}'\n    state: hard\n  loop:\n    - { src: x, dest: y }\n    - { src: z, dest: k }\n\n- name: Touch a file, using symbolic modes to set the permissions (equivalent to 0644)\n  ansible.builtin.file:\n    path: /etc/foo.conf\n    state: touch\n    mode: u=rw,g=r,o=r\n\n- name: Touch the same file, but add/remove some permissions\n  ansible.builtin.file:\n    path: /etc/foo.conf\n    state: touch\n    mode: u+rw,g-wx,o-rwx\n\n- name: Touch again the same file, but do not change times this makes the task idempotent\n  ansible.builtin.file:\n    path: /etc/foo.conf\n    state: touch\n    mode: u+rw,g-wx,o-rwx\n    modification_time: preserve\n    access_time: preserve\n\n- name: Create a directory if it does not exist\n  ansible.builtin.file:\n    path: /etc/some_directory\n    state: directory\n    mode: '0755'\n\n- name: Update modification and access time of given file\n  ansible.builtin.file:\n    path: /etc/some_file\n    state: file\n    modification_time: now\n    access_time: now\n\n- name: Set access time based on seconds from epoch value\n  ansible.builtin.file:\n    path: /etc/another_file\n    state: file\n    access_time: '{{ \"%Y%m%d%H%M.%S\" | strftime(stat_var.stat.atime) }}'\n\n- name: Recursively change ownership of a directory\n  ansible.builtin.file:\n    path: /etc/foo\n    state: directory\n    recurse: yes\n    owner: foo\n    group: foo\n\n- name: Remove file (delete file)\n  ansible.builtin.file:\n    path: /etc/foo.txt\n    state: absent\n\n- name: Recursively remove directory\n  ansible.builtin.file:\n    path: /etc/foo\n    state: absent\n\n",
        "metadata": null,
        "return": {
            "dest": {
                "description": "Destination file/path, equal to the value passed to I(path).",
                "returned": "state=touch, state=hard, state=link",
                "sample": "/path/to/file.txt",
                "type": "str"
            },
            "path": {
                "description": "Destination file/path, equal to the value passed to I(path).",
                "returned": "state=absent, state=directory, state=file",
                "sample": "/path/to/file.txt",
                "type": "str"
            }
        }
    }
}
