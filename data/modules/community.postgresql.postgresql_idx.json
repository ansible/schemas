{
    "community.postgresql.postgresql_idx": {
        "doc": {
            "author": [
                "Andrew Klychkov (@Andersson007)",
                "Thomas O'Donnell (@andytom)"
            ],
            "collection": "community.postgresql",
            "description": [
                "Create or drop indexes from a PostgreSQL database."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/postgresql/plugins/modules/postgresql_idx.py",
            "has_action": false,
            "module": "postgresql_idx",
            "notes": [
                "Supports C(check_mode).",
                "The index building process can affect database performance.",
                "To avoid table locks on production databases, use I(concurrent=yes) (default behavior).",
                "The default authentication assumes that you are either logging in as or sudo'ing to the C(postgres) account on the host.",
                "To avoid \"Peer authentication failed for user postgres\" error, use postgres user as a I(become_user).",
                "This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.",
                "If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.",
                "For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.",
                "The ca_cert parameter requires at least Postgres version 8.4 and I(psycopg2) version 2.4.3."
            ],
            "options": {
                "ca_cert": {
                    "aliases": [
                        "ssl_rootcert"
                    ],
                    "description": [
                        "Specifies the name of a file containing SSL certificate authority (CA) certificate(s).",
                        "If the file exists, the server's certificate will be verified to be signed by one of these authorities."
                    ],
                    "type": "str"
                },
                "cascade": {
                    "default": false,
                    "description": [
                        "Automatically drop objects that depend on the index, and in turn all objects that depend on those objects.",
                        "It used only with I(state=absent).",
                        "Mutually exclusive with I(concurrent=yes)."
                    ],
                    "type": "bool"
                },
                "columns": {
                    "aliases": [
                        "column"
                    ],
                    "description": [
                        "List of index columns that need to be covered by index.",
                        "Mutually exclusive with I(state=absent)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "concurrent": {
                    "default": true,
                    "description": [
                        "Enable or disable concurrent mode (CREATE / DROP INDEX CONCURRENTLY).",
                        "Pay attention, if I(concurrent=no), the table will be locked (ACCESS EXCLUSIVE) during the building process. For more information about the lock levels see U(https://www.postgresql.org/docs/current/explicit-locking.html).",
                        "If the building process was interrupted for any reason when I(cuncurrent=yes), the index becomes invalid. In this case it should be dropped and created again.",
                        "Mutually exclusive with I(cascade=yes)."
                    ],
                    "type": "bool"
                },
                "cond": {
                    "description": [
                        "Index conditions.",
                        "Mutually exclusive with I(state=absent)."
                    ],
                    "type": "str"
                },
                "db": {
                    "aliases": [
                        "login_db"
                    ],
                    "description": [
                        "Name of database to connect to and where the index will be created/dropped."
                    ],
                    "type": "str"
                },
                "idxname": {
                    "aliases": [
                        "name"
                    ],
                    "description": [
                        "Name of the index to create or drop."
                    ],
                    "required": true,
                    "type": "str"
                },
                "idxtype": {
                    "aliases": [
                        "type"
                    ],
                    "description": [
                        "Index type (like btree, gist, gin, etc.).",
                        "Mutually exclusive with I(state=absent)."
                    ],
                    "type": "str"
                },
                "login_host": {
                    "description": [
                        "Host running the database."
                    ],
                    "type": "str"
                },
                "login_password": {
                    "description": [
                        "The password used to authenticate with."
                    ],
                    "type": "str"
                },
                "login_unix_socket": {
                    "description": [
                        "Path to a Unix domain socket for local connections."
                    ],
                    "type": "str"
                },
                "login_user": {
                    "default": "postgres",
                    "description": [
                        "The username used to authenticate with."
                    ],
                    "type": "str"
                },
                "port": {
                    "aliases": [
                        "login_port"
                    ],
                    "default": 5432,
                    "description": [
                        "Database port to connect to."
                    ],
                    "type": "int"
                },
                "schema": {
                    "description": [
                        "Name of a database schema where the index will be created."
                    ],
                    "type": "str"
                },
                "session_role": {
                    "description": [
                        "Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.",
                        "Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally."
                    ],
                    "type": "str"
                },
                "ssl_mode": {
                    "choices": [
                        "allow",
                        "disable",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer",
                    "description": [
                        "Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.",
                        "See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.",
                        "Default of C(prefer) matches libpq default."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Index state.",
                        "C(present) implies the index will be created if it does not exist.",
                        "C(absent) implies the index will be dropped if it exists."
                    ],
                    "type": "str"
                },
                "storage_params": {
                    "description": [
                        "Storage parameters like fillfactor, vacuum_cleanup_index_scale_factor, etc.",
                        "Mutually exclusive with I(state=absent)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "table": {
                    "description": [
                        "Table to create index on it.",
                        "Mutually exclusive with I(state=absent)."
                    ],
                    "type": "str"
                },
                "tablespace": {
                    "description": [
                        "Set a tablespace for the index.",
                        "Mutually exclusive with I(state=absent)."
                    ],
                    "type": "str"
                },
                "trust_input": {
                    "default": true,
                    "description": [
                        "If C(no), check whether values of parameters I(idxname), I(session_role), I(schema), I(table), I(columns), I(tablespace), I(storage_params), I(cond) are potentially dangerous.",
                        "It makes sense to use C(no) only when SQL injections via the parameters are possible."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                },
                "unique": {
                    "default": false,
                    "description": [
                        "Enable unique index.",
                        "Only btree currently supports unique indexes."
                    ],
                    "type": "bool",
                    "version_added": "0.2.0",
                    "version_added_collection": "community.postgresql"
                }
            },
            "requirements": [
                "psycopg2"
            ],
            "seealso": [
                {
                    "module": "community.postgresql.postgresql_table"
                },
                {
                    "module": "community.postgresql.postgresql_tablespace"
                },
                {
                    "description": "General information about PostgreSQL indexes.",
                    "link": "https://www.postgresql.org/docs/current/indexes.html",
                    "name": "PostgreSQL indexes reference"
                },
                {
                    "description": "Complete reference of the CREATE INDEX command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-createindex.html",
                    "name": "CREATE INDEX reference"
                },
                {
                    "description": "Complete reference of the ALTER INDEX command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-alterindex.html",
                    "name": "ALTER INDEX reference"
                },
                {
                    "description": "Complete reference of the DROP INDEX command documentation.",
                    "link": "https://www.postgresql.org/docs/current/sql-dropindex.html",
                    "name": "DROP INDEX reference"
                }
            ],
            "short_description": "Create or drop indexes from a PostgreSQL database"
        },
        "examples": "\n- name: Create btree index if not exists test_idx concurrently covering columns id and name of table products\n  community.postgresql.postgresql_idx:\n    db: acme\n    table: products\n    columns: id,name\n    name: test_idx\n\n- name: Create btree index test_idx concurrently with tablespace called ssd and storage parameter\n  community.postgresql.postgresql_idx:\n    db: acme\n    table: products\n    columns:\n    - id\n    - name\n    idxname: test_idx\n    tablespace: ssd\n    storage_params:\n    - fillfactor=90\n\n- name: Create gist index test_gist_idx concurrently on column geo_data of table map\n  community.postgresql.postgresql_idx:\n    db: somedb\n    table: map\n    idxtype: gist\n    columns: geo_data\n    idxname: test_gist_idx\n\n# Note: for the example below pg_trgm extension must be installed for gin_trgm_ops\n- name: Create gin index gin0_idx not concurrently on column comment of table test\n  community.postgresql.postgresql_idx:\n    idxname: gin0_idx\n    table: test\n    columns: comment gin_trgm_ops\n    concurrent: no\n    idxtype: gin\n\n- name: Drop btree test_idx concurrently\n  community.postgresql.postgresql_idx:\n    db: mydb\n    idxname: test_idx\n    state: absent\n\n- name: Drop test_idx cascade\n  community.postgresql.postgresql_idx:\n    db: mydb\n    idxname: test_idx\n    state: absent\n    cascade: yes\n    concurrent: no\n\n- name: Create btree index test_idx concurrently on columns id,comment where column id > 1\n  community.postgresql.postgresql_idx:\n    db: mydb\n    table: test\n    columns: id,comment\n    idxname: test_idx\n    cond: id > 1\n\n- name: Create unique btree index if not exists test_unique_idx on column name of table products\n  community.postgresql.postgresql_idx:\n    db: acme\n    table: products\n    columns: name\n    name: test_unique_idx\n    unique: yes\n    concurrent: no\n",
        "metadata": null,
        "return": {
            "name": {
                "description": "Index name.",
                "returned": "always",
                "sample": "foo_idx",
                "type": "str"
            },
            "query": {
                "description": "Query that was tried to be executed.",
                "returned": "always",
                "sample": "CREATE INDEX CONCURRENTLY foo_idx ON test_table USING BTREE (id)",
                "type": "str"
            },
            "schema": {
                "description": "Schema where index exists.",
                "returned": "always",
                "sample": "public",
                "type": "str"
            },
            "state": {
                "description": "Index state.",
                "returned": "always",
                "sample": "present",
                "type": "str"
            },
            "storage_params": {
                "description": "Index storage parameters.",
                "returned": "always",
                "sample": [
                    "fillfactor=90"
                ],
                "type": "list"
            },
            "tablespace": {
                "description": "Tablespace where index exists.",
                "returned": "always",
                "sample": "ssd",
                "type": "str"
            },
            "valid": {
                "description": "Index validity.",
                "returned": "always",
                "sample": true,
                "type": "bool"
            }
        }
    }
}
