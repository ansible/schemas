{
    "community.general.rax_mon_check": {
        "doc": {
            "author": "Ash Wilson (@smashwilson)",
            "collection": "community.general",
            "description": [
                "Create or delete a Rackspace Cloud Monitoring check associated with an existing rax_mon_entity. A check is a specific test or measurement that is performed, possibly from different monitoring zones, on the systems you monitor. Rackspace monitoring module flow | rax_mon_entity -> *rax_mon_check* -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm"
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/general/plugins/modules/rax_mon_check.py",
            "has_action": false,
            "module": "rax_mon_check",
            "notes": [
                "The following environment variables can be used, C(RAX_USERNAME), C(RAX_API_KEY), C(RAX_CREDS_FILE), C(RAX_CREDENTIALS), C(RAX_REGION).",
                "C(RAX_CREDENTIALS) and C(RAX_CREDS_FILE) points to a credentials file appropriate for pyrax. See U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating)",
                "C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file",
                "C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)"
            ],
            "options": {
                "api_key": {
                    "aliases": [
                        "password"
                    ],
                    "description": [
                        "Rackspace API key, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "auth_endpoint": {
                    "description": [
                        "The URI of the authentication service.",
                        "If not specified will be set to U(https://identity.api.rackspacecloud.com/v2.0/)"
                    ],
                    "type": "str"
                },
                "check_type": {
                    "description": [
                        "The type of check to create. C(remote.) checks may be created on any rax_mon_entity. C(agent.) checks may only be created on rax_mon_entities that have a non-null C(agent_id).",
                        "Choices for this option are:\n- C(remote.dns)\n- C(remote.ftp-banner)\n- C(remote.http)\n- C(remote.imap-banner)\n- C(remote.mssql-banner)\n- C(remote.mysql-banner)\n- C(remote.ping)\n- C(remote.pop3-banner)\n- C(remote.postgresql-banner)\n- C(remote.smtp-banner)\n- C(remote.smtp)\n- C(remote.ssh)\n- C(remote.tcp)\n- C(remote.telnet-banner)\n- C(agent.filesystem)\n- C(agent.memory)\n- C(agent.load_average)\n- C(agent.cpu)\n- C(agent.disk)\n- C(agent.network)\n- C(agent.plugin)\n"
                    ],
                    "required": true,
                    "type": "str"
                },
                "credentials": {
                    "aliases": [
                        "creds_file"
                    ],
                    "description": [
                        "File to find the Rackspace credentials in. Ignored if I(api_key) and I(username) are provided."
                    ],
                    "type": "path"
                },
                "details": {
                    "description": [
                        "Additional details specific to the check type. Must be a hash of strings between 1 and 255 characters long, or an array or object containing 0 to 256 items."
                    ],
                    "type": "dict"
                },
                "disabled": {
                    "default": false,
                    "description": [
                        "If \"yes\", ensure the check is created, but don't actually use it yet."
                    ],
                    "type": "bool"
                },
                "entity_id": {
                    "description": [
                        "ID of the rax_mon_entity to target with this check."
                    ],
                    "required": true,
                    "type": "str"
                },
                "env": {
                    "description": [
                        "Environment as configured in I(~/.pyrax.cfg), see U(https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration)."
                    ],
                    "type": "str"
                },
                "identity_type": {
                    "default": "rackspace",
                    "description": [
                        "Authentication mechanism to use, such as rackspace or keystone."
                    ],
                    "type": "str"
                },
                "label": {
                    "description": [
                        "Defines a label for this check, between 1 and 64 characters long."
                    ],
                    "required": true,
                    "type": "str"
                },
                "metadata": {
                    "description": [
                        "Hash of arbitrary key-value pairs to accompany this check if it fires. Keys and values must be strings between 1 and 255 characters long."
                    ],
                    "type": "dict"
                },
                "monitoring_zones_poll": {
                    "description": [
                        "Comma-separated list of the names of the monitoring zones the check should run from. Available monitoring zones include mzdfw, mzhkg, mziad, mzlon, mzord and mzsyd. Required for remote.* checks; prohibited for agent.* checks."
                    ],
                    "type": "str"
                },
                "period": {
                    "description": [
                        "The number of seconds between each time the check is performed. Must be greater than the minimum period set on your account."
                    ],
                    "type": "int"
                },
                "region": {
                    "description": [
                        "Region to create an instance in."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Ensure that a check with this C(label) exists or does not exist."
                    ],
                    "type": "str"
                },
                "target_alias": {
                    "description": [
                        "One of `target_alias` and `target_hostname` is required for remote.* checks, but prohibited for agent.* checks. Use the corresponding key in the entity's `ip_addresses` hash to resolve an IP address to target."
                    ],
                    "type": "str"
                },
                "target_hostname": {
                    "description": [
                        "One of `target_hostname` and `target_alias` is required for remote.* checks, but prohibited for agent.* checks. The hostname this check should target. Must be a valid IPv4, IPv6, or FQDN."
                    ],
                    "type": "str"
                },
                "tenant_id": {
                    "description": [
                        "The tenant ID used for authentication."
                    ],
                    "type": "str"
                },
                "tenant_name": {
                    "description": [
                        "The tenant name used for authentication."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "description": [
                        "The number of seconds this check will wait when attempting to collect results. Must be less than the period."
                    ],
                    "type": "int"
                },
                "username": {
                    "description": [
                        "Rackspace username, overrides I(credentials)."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "aliases": [
                        "verify_ssl"
                    ],
                    "description": [
                        "Whether or not to require SSL validation of API endpoints."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "python >= 2.6",
                "pyrax"
            ],
            "short_description": "Create or delete a Rackspace Cloud Monitoring check for an existing entity."
        },
        "examples": "\n- name: Create a monitoring check\n  gather_facts: False\n  hosts: local\n  connection: local\n  tasks:\n  - name: Associate a check with an existing entity.\n    community.general.rax_mon_check:\n      credentials: ~/.rax_pub\n      state: present\n      entity_id: \"{{ the_entity['entity']['id'] }}\"\n      label: the_check\n      check_type: remote.ping\n      monitoring_zones_poll: mziad,mzord,mzdfw\n      details:\n        count: 10\n      meta:\n        hurf: durf\n    register: the_check\n",
        "metadata": null,
        "return": null
    }
}
