{
    "community.aws.lambda_event": {
        "doc": {
            "author": "Pierre Jodouin (@pjodouin), Ryan Brown (@ryansb)",
            "collection": "community.aws",
            "description": [
                "This module allows the management of AWS Lambda function event source mappings such as DynamoDB and Kinesis stream events via the Ansible framework. These event source mappings are relevant only in the AWS Lambda pull model, where AWS Lambda invokes the function. It is idempotent and supports \"Check\" mode.  Use module M(community.aws.lambda) to manage the lambda function itself and M(community.aws.lambda_alias) to manage function aliases."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/aws/plugins/modules/lambda_event.py",
            "has_action": false,
            "module": "lambda_event",
            "notes": [
                "If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence C(AWS_URL) or C(EC2_URL), C(AWS_ACCESS_KEY_ID) or C(AWS_ACCESS_KEY) or C(EC2_ACCESS_KEY), C(AWS_SECRET_ACCESS_KEY) or C(AWS_SECRET_KEY) or C(EC2_SECRET_KEY), C(AWS_SECURITY_TOKEN) or C(EC2_SECURITY_TOKEN), C(AWS_REGION) or C(EC2_REGION)",
                "Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html",
                "C(AWS_REGION) or C(EC2_REGION) can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file"
            ],
            "options": {
                "alias": {
                    "description": [
                        "Name of the function alias.",
                        "Mutually exclusive with I(version)."
                    ],
                    "type": "str"
                },
                "aws_access_key": {
                    "aliases": [
                        "ec2_access_key",
                        "access_key"
                    ],
                    "description": [
                        "AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "aws_config": {
                    "description": [
                        "A dictionary to modify the botocore configuration.",
                        "Parameters can be found at U(https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html#botocore.config.Config).",
                        "Only the 'user_agent' key is used for boto modules. See U(http://boto.cloudhackers.com/en/latest/boto_config_tut.html#boto) for more boto configuration."
                    ],
                    "type": "dict"
                },
                "aws_secret_key": {
                    "aliases": [
                        "ec2_secret_key",
                        "secret_key"
                    ],
                    "description": [
                        "AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used."
                    ],
                    "type": "str"
                },
                "debug_botocore_endpoint_logs": {
                    "default": "no",
                    "description": [
                        "Use a botocore.endpoint logger to parse the unique (rather than total) \"resource:action\" API calls made during a task, outputing the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used."
                    ],
                    "type": "bool"
                },
                "ec2_url": {
                    "description": [
                        "Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used."
                    ],
                    "type": "str"
                },
                "event_source": {
                    "choices": [
                        "stream",
                        "sqs"
                    ],
                    "default": "stream",
                    "description": [
                        "Source of the event that triggers the lambda function.",
                        "For DynamoDB and Kinesis events, select C(stream)",
                        "For SQS queues, select C(sqs)"
                    ],
                    "type": "str"
                },
                "lambda_function_arn": {
                    "aliases": [
                        "function_name",
                        "function_arn"
                    ],
                    "description": [
                        "The name or ARN of the lambda function."
                    ],
                    "required": true,
                    "type": "str"
                },
                "profile": {
                    "description": [
                        "Uses a boto profile. Only works with boto >= 2.24.0."
                    ],
                    "type": "str"
                },
                "region": {
                    "aliases": [
                        "aws_region",
                        "ec2_region"
                    ],
                    "description": [
                        "The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)"
                    ],
                    "type": "str"
                },
                "security_token": {
                    "aliases": [
                        "access_token"
                    ],
                    "description": [
                        "AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used."
                    ],
                    "type": "str"
                },
                "source_params": {
                    "description": [
                        "Sub-parameters required for event source."
                    ],
                    "required": true,
                    "suboptions": {
                        "batch_size": {
                            "default": 100,
                            "description": [
                                "The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function."
                            ],
                            "type": "int"
                        },
                        "enabled": {
                            "default": "true.",
                            "description": [
                                "Indicates whether AWS Lambda should begin polling or readin from the event source."
                            ],
                            "type": "bool"
                        },
                        "source_arn": {
                            "description": [
                                "The Amazon Resource Name (ARN) of the SQS queue, Kinesis stream or DynamoDB stream that is the event source."
                            ],
                            "required": true,
                            "type": "str"
                        },
                        "starting_position": {
                            "choices": [
                                "TRIM_HORIZON",
                                "LATEST"
                            ],
                            "description": [
                                "The position in the stream where AWS Lambda should start reading.",
                                "Required when I(event_source=stream)."
                            ],
                            "type": "str"
                        }
                    },
                    "type": "dict"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Describes the desired state."
                    ],
                    "type": "str"
                },
                "validate_certs": {
                    "default": true,
                    "description": [
                        "When set to \"no\", SSL certificates will not be validated for boto versions >= 2.6.0."
                    ],
                    "type": "bool"
                },
                "version": {
                    "description": [
                        "Version of the Lambda function.",
                        "Mutually exclusive with I(alias)."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "boto",
                "boto3",
                "python >= 2.6"
            ],
            "short_description": "Creates, updates or deletes AWS Lambda function event mappings",
            "version_added": "1.0.0",
            "version_added_collection": "community.aws"
        },
        "examples": "\n# Example that creates a lambda event notification for a DynamoDB stream\n- name: DynamoDB stream event mapping\n  community.aws.lambda_event:\n    state: present\n    event_source: stream\n    function_name: \"{{ function_name }}\"\n    alias: Dev\n    source_params:\n    source_arn: arn:aws:dynamodb:us-east-1:123456789012:table/tableName/stream/2016-03-19T19:51:37.457\n    enabled: True\n    batch_size: 100\n    starting_position: TRIM_HORIZON\n  register: event\n\n- name: Show source event\n  ansible.builtin.debug:\n    var: event.lambda_stream_events\n",
        "metadata": null,
        "return": {
            "lambda_stream_events": {
                "description": "list of dictionaries returned by the API describing stream event mappings",
                "returned": "success",
                "type": "list"
            }
        }
    }
}
