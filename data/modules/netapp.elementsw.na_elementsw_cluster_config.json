{
    "netapp.elementsw.na_elementsw_cluster_config": {
        "doc": {
            "author": "NetApp Ansible Team (@carchi8py) <ng-ansibleteam@netapp.com>",
            "collection": "netapp.elementsw",
            "description": [
                "Configure Element Software cluster."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/netapp/elementsw/plugins/modules/na_elementsw_cluster_config.py",
            "has_action": false,
            "module": "na_elementsw_cluster_config",
            "notes": [
                "The modules prefixed with na\\\\_elementsw are built to support the SolidFire storage platform."
            ],
            "options": {
                "enable_virtual_volumes": {
                    "default": true,
                    "description": [
                        "Enable the NetApp SolidFire VVols cluster feature"
                    ],
                    "type": "bool"
                },
                "encryption_at_rest": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "description": [
                        "enable or disable the Advanced Encryption Standard (AES) 256-bit encryption at rest on the cluster"
                    ],
                    "type": "str"
                },
                "hostname": {
                    "description": [
                        "The hostname or IP address of the SolidFire cluster.",
                        "For na_elementsw_cluster, the Management IP (MIP) or hostname of the node to initiate the cluster creation from."
                    ],
                    "required": true,
                    "type": "str"
                },
                "modify_cluster_full_threshold": {
                    "description": [
                        "The capacity level at which the cluster generates an event",
                        "Requires a stage3_block_threshold_percent or",
                        "max_metadata_over_provision_factor or",
                        "stage2_aware_threshold"
                    ],
                    "suboptions": {
                        "max_metadata_over_provision_factor": {
                            "description": [
                                "The number of times metadata space can be overprovisioned relative to the amount of space available"
                            ],
                            "type": "int"
                        },
                        "stage2_aware_threshold": {
                            "description": [
                                "The number of nodes of capacity remaining in the cluster before the system triggers a notification"
                            ],
                            "type": "int"
                        },
                        "stage3_block_threshold_percent": {
                            "description": [
                                "The percentage below the \"Error\" threshold that triggers a cluster \"Warning\" alert"
                            ],
                            "type": "int"
                        }
                    },
                    "type": "dict"
                },
                "password": {
                    "aliases": [
                        "pass"
                    ],
                    "description": [
                        "Password for the specified user."
                    ],
                    "required": true,
                    "type": "str"
                },
                "set_ntp_info": {
                    "description": [
                        "configure NTP on cluster node",
                        "Requires a list of one or more ntp_servers"
                    ],
                    "suboptions": {
                        "broadcastclient": {
                            "default": false,
                            "description": [
                                "Enables every node in the cluster as a broadcast client"
                            ],
                            "type": "bool"
                        },
                        "ntp_servers": {
                            "description": [
                                "list of NTP servers to add to each nodes NTP configuration"
                            ],
                            "elements": "str",
                            "type": "list"
                        }
                    },
                    "type": "dict"
                },
                "username": {
                    "aliases": [
                        "user"
                    ],
                    "description": [
                        "Please ensure that the user has the adequate permissions. For more information, please read the official documentation U(https://mysupport.netapp.com/documentation/docweb/index.html?productID=62636&language=en-US)."
                    ],
                    "required": true,
                    "type": "str"
                }
            },
            "requirements": [
                "The modules were developed with SolidFire 10.1",
                "solidfire-sdk-python (1.1.0.92) or greater. Install using 'pip install solidfire-sdk-python'"
            ],
            "short_description": "Configure Element SW Cluster",
            "version_added": "2.8.0",
            "version_added_collection": "netapp.elementsw"
        },
        "examples": "\n\n  - name: Configure cluster\n    tags:\n    - elementsw_cluster_config\n    na_elementsw_cluster_config:\n      hostname: \"{{ elementsw_hostname }}\"\n      username: \"{{ elementsw_username }}\"\n      password: \"{{ elementsw_password }}\"\n      modify_cluster_full_threshold:\n        stage2_aware_threshold: 2\n        stage3_block_threshold_percent: 10\n        max_metadata_over_provision_factor: 2\n      encryption_at_rest: absent\n      set_ntp_info:\n        broadcastclient: False\n        ntp_servers:\n        - 1.1.1.1\n        - 2.2.2.2\n      enable_virtual_volumes: True\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": {
            "msg": {
                "description": "Success message",
                "returned": "success",
                "type": "str"
            }
        }
    }
}
