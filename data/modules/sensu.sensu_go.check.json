{
    "sensu.sensu_go.check": {
        "doc": {
            "author": [
                "Paul Arthur (@flowerysong)",
                "Aljaz Kosir (@aljazkosir)",
                "Miha Plesko (@miha-plesko)",
                "Tadej Borovsak (@tadeboro)"
            ],
            "collection": "sensu.sensu_go",
            "description": [
                "Create, update or delete Sensu Go check.",
                "For more information, refer to the Sensu Go documentation at U(https://docs.sensu.io/sensu-go/latest/reference/checks/)."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/sensu/sensu_go/plugins/modules/check.py",
            "has_action": false,
            "module": "check",
            "options": {
                "annotations": {
                    "description": [
                        "Custom metadata fields with fewer restrictions, as key/value pairs.",
                        "These are preserved by Sensu but not accessible as tokens or identifiers, and are mainly intended for use with external tools."
                    ],
                    "type": "dict"
                },
                "auth": {
                    "description": [
                        "Authentication parameters. Can define each of them with ENV as well."
                    ],
                    "suboptions": {
                        "api_key": {
                            "description": [
                                "The API key that should be used when authenticating. If this is not set, the value of the SENSU_API_KEY environment variable will be checked.",
                                "This replaces I(auth.user) and I(auth.password) parameters.",
                                "For more information about the API key, refer to the official Sensu documentation at U(https://docs.sensu.io/sensu-go/latest/guides/use-apikey-feature/)."
                            ],
                            "type": "str",
                            "version_added": "1.3.0",
                            "version_added_collection": "sensu.sensu_go"
                        },
                        "ca_path": {
                            "description": [
                                "Path to the CA bundle that should be used to validate the backend certificate.",
                                "If this parameter is not set, module will use the CA bundle that python is using.",
                                "It is also possible to set this parameter via the I(SENSU_CA_PATH) environment variable."
                            ],
                            "type": "path",
                            "version_added": "1.5.0",
                            "version_added_collection": "sensu.sensu_go"
                        },
                        "password": {
                            "default": "P@ssw0rd!",
                            "description": [
                                "The Sensu user's password. If this is not set the value of the SENSU_PASSWORD environment variable will be checked.",
                                "This parameter is ignored if the I(auth.api_key) parameter is set."
                            ],
                            "type": "str"
                        },
                        "url": {
                            "default": "http://localhost:8080",
                            "description": [
                                "Location of the Sensu backend API. If this is not set the value of the SENSU_URL environment variable will be checked."
                            ],
                            "type": "str"
                        },
                        "user": {
                            "default": "admin",
                            "description": [
                                "The username to use for connecting to the Sensu API. If this is not set the value of the SENSU_USER environment variable will be checked.",
                                "This parameter is ignored if the I(auth.api_key) parameter is set."
                            ],
                            "type": "str"
                        },
                        "verify": {
                            "default": true,
                            "description": [
                                "Flag that controls the certificate validation.",
                                "If you are using self-signed certificates, you can set this parameter to C(false).",
                                "ONLY USE THIS PARAMETER IN DEVELOPMENT SCENARIOS! In you use self-signed certificates in production, see the I(auth.ca_path) parameter.",
                                "It is also possible to set this parameter via the I(SENSU_VERIFY) environment variable."
                            ],
                            "type": "bool",
                            "version_added": "1.5.0",
                            "version_added_collection": "sensu.sensu_go"
                        }
                    },
                    "type": "dict"
                },
                "check_hooks": {
                    "description": [
                        "A mapping of response codes to hooks which will be run by the agent when that code is returned.",
                        "Note that the structure of this parameter is a bit different from the one described at U(https://docs.sensu.io/sensu-go/latest/reference/checks/#check-hooks-attribute).",
                        "See check hooks example below for more information on exact mapping structure."
                    ],
                    "type": "dict"
                },
                "command": {
                    "description": [
                        "Check command to run.",
                        "Required if I(state) is C(present)."
                    ],
                    "type": "str"
                },
                "cron": {
                    "description": [
                        "Schedule check requests using crontab syntax.",
                        "Cannot be used when I(interval) option is used."
                    ],
                    "type": "str"
                },
                "env_vars": {
                    "description": [
                        "A mapping of environment variable names and values to use with command execution."
                    ],
                    "type": "dict"
                },
                "handlers": {
                    "description": [
                        "List of handlers which receive check results."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "high_flap_threshold": {
                    "description": [
                        "High flap threshold."
                    ],
                    "type": "int"
                },
                "interval": {
                    "description": [
                        "Check request interval.",
                        "Cannot be used when I(cron) option is used."
                    ],
                    "type": "int"
                },
                "labels": {
                    "description": [
                        "Custom metadata fields that can be accessed within Sensu, as key/value pairs."
                    ],
                    "type": "dict"
                },
                "low_flap_threshold": {
                    "description": [
                        "Low flap threshold."
                    ],
                    "type": "int"
                },
                "name": {
                    "description": [
                        "The Sensu resource's name. This name (in combination with the namespace where applicable) uniquely identifies the resource that Ansible operates on.",
                        "If the resource with selected name already exists, Ansible module will update it to match the specification in the task.",
                        "Consult the I(name) metadata attribute specification in the upstream docs on U(https://docs.sensu.io/sensu-go/latest/reference/) for more details about valid names and other restrictions."
                    ],
                    "required": true,
                    "type": "str"
                },
                "namespace": {
                    "default": "default",
                    "description": [
                        "RBAC namespace to operate in. If this is not set the value of the SENSU_NAMESPACE environment variable will be used."
                    ],
                    "type": "str"
                },
                "output_metric_format": {
                    "choices": [
                        "graphite_plaintext",
                        "influxdb_line",
                        "nagios_perfdata",
                        "opentsdb_line"
                    ],
                    "description": [
                        "Enable parsing of metrics in the specified format from this check's output."
                    ],
                    "type": "str"
                },
                "output_metric_handlers": {
                    "description": [
                        "List of handlers which receive check results. I'm not sure why this exists."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "proxy_entity_name": {
                    "description": [
                        "Entity name to associate this check with instead of the agent it ran on."
                    ],
                    "type": "str"
                },
                "proxy_requests": {
                    "description": [
                        "Allows you to assign the check to run for multiple entities according to their entity_attributes."
                    ],
                    "suboptions": {
                        "entity_attributes": {
                            "description": [
                                "List of attribute checks for determining which proxy entities this check should be scheduled against."
                            ],
                            "elements": "str",
                            "type": "list"
                        },
                        "splay": {
                            "description": [
                                "Enables or disables splaying of check request scheduling."
                            ],
                            "type": "bool"
                        },
                        "splay_coverage": {
                            "description": [
                                "Percentage of the C(interval) over which to splay checks."
                            ],
                            "type": "int"
                        }
                    },
                    "type": "dict"
                },
                "publish": {
                    "description": [
                        "Enables or disables scheduled publication of check requests."
                    ],
                    "type": "bool"
                },
                "round_robin": {
                    "description": [
                        "An array of environment variables to use with command execution."
                    ],
                    "type": "bool"
                },
                "runtime_assets": {
                    "description": [
                        "List of runtime assets required to run the check."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "secrets": {
                    "description": [
                        "List of secrets that are available to the command."
                    ],
                    "elements": "dict",
                    "suboptions": {
                        "name": {
                            "description": [
                                "Variable name that will contain the sensitive data."
                            ],
                            "required": true,
                            "type": "str",
                            "version_added": "1.6.0",
                            "version_added_collection": "sensu.sensu_go"
                        },
                        "secret": {
                            "description": [
                                "Name of the secret that contains sensitive data."
                            ],
                            "required": true,
                            "type": "str",
                            "version_added": "1.6.0",
                            "version_added_collection": "sensu.sensu_go"
                        }
                    },
                    "type": "list",
                    "version_added": "1.6.0",
                    "version_added_collection": "sensu.sensu_go"
                },
                "state": {
                    "choices": [
                        "present",
                        "absent"
                    ],
                    "default": "present",
                    "description": [
                        "Target state of the Sensu object."
                    ],
                    "type": "str"
                },
                "stdin": {
                    "description": [
                        "Enables writing of serialized JSON data to the check command's stdin.",
                        "Only usable with checks written specifically for Sensu Go."
                    ],
                    "type": "bool"
                },
                "subscriptions": {
                    "description": [
                        "List of subscriptions which receive check requests.",
                        "Required if I(state) is C(present)."
                    ],
                    "elements": "str",
                    "type": "list"
                },
                "timeout": {
                    "description": [
                        "Check execution timeout."
                    ],
                    "type": "int"
                },
                "ttl": {
                    "description": [
                        "Amount of time after which a check result is considered stale."
                    ],
                    "type": "int"
                }
            },
            "requirements": [
                "python >= 2.7"
            ],
            "seealso": [
                {
                    "module": "sensu.sensu_go.check_info"
                }
            ],
            "short_description": "Manage Sensu checks",
            "version_added": "1.0.0",
            "version_added_collection": "sensu.sensu_go"
        },
        "examples": "\n- name: Check executing command every 30 seconds\n  sensu.sensu_go.check:\n    name: check\n    command: check-cpu.sh -w 75 -c 90\n    subscriptions:\n      - checks\n    interval: 30\n    publish: yes\n\n- name: Check executing command with cron scheduler\n  sensu.sensu_go.check:\n    name: check\n    command: check-cpu.sh -w 75 -c 90\n    subscriptions:\n      - systems\n    handlers:\n      - slack\n    cron: \"* * * * *\"\n    publish: yes\n\n- name: Ad-hoc scheduling\n  sensu.sensu_go.check:\n    name: check\n    command: check-cpu.sh -w 75 -c 90\n    subscriptions:\n      - systems\n    handlers:\n      - slack\n    interval: 60\n    publish: no\n\n- name: Report events under proxy entity name instead of agent entity\n  sensu.sensu_go.check:\n    name: check\n    command: http_check.sh https://sensu.io\n    subscriptions:\n      - proxy\n    handlers:\n      - slack\n    interval: 60\n    proxy_entity_name: sensu-site\n    round_robin: yes\n    publish: yes\n\n- name: Event that triggers hooks\n  sensu.sensu_go.check:\n    name: check\n    command: http_check.sh https://sensu.io\n    subscriptions: [ proxy ]\n    # The upstream JSON payload for the hooks below would look like this:\n    #\n    #   \"check_hooks\": [\n    #     {\"0\": [\"passing-hook\", \"always-run-this-hook\"]},\n    #     {\"critical\": [\"failing-hook\", \"always-run-this-hook\"]}\n    #   ]\n    #\n    # Ansible task simplifies this structure into a simple mapping:\n    check_hooks:\n      \"0\":\n        - passing-hook\n        - always-run-this-hook\n      critical:\n        - failing-hook\n        - always-run-this-hook\n\n- name: Remove check\n  sensu.sensu_go.check:\n    name: my-check\n    state: absent\n",
        "metadata": {
            "metadata_version": "1.1",
            "status": [
                "stableinterface"
            ],
            "supported_by": "certified"
        },
        "return": {
            "object": {
                "description": "Object representing Sensu check.",
                "returned": "success",
                "sample": {
                    "command": "collect.sh",
                    "handlers": [
                        "slack"
                    ],
                    "interval": 10,
                    "metadata": {
                        "name": "check_minimum",
                        "namespace": "default"
                    },
                    "publish": true,
                    "subscriptions": [
                        "system"
                    ]
                },
                "type": "dict"
            }
        }
    }
}
