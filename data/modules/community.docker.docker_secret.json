{
    "community.docker.docker_secret": {
        "doc": {
            "author": [
                "Chris Houseknecht (@chouseknecht)"
            ],
            "collection": "community.docker",
            "description": [
                "Create and remove Docker secrets in a Swarm environment. Similar to C(docker secret create) and C(docker secret rm).",
                "Adds to the metadata of new secrets 'ansible_key', an encrypted hash representation of the data, which is then used in future runs to test if a secret has changed. If 'ansible_key is not present, then a secret will not be updated unless the I(force) option is set.",
                "Updates to secrets are performed by removing the secret and creating it again."
            ],
            "filename": "/Users/ssbarnea/.pyenv/versions/3.9.2/lib/python3.9/site-packages/ansible_collections/community/docker/plugins/modules/docker_secret.py",
            "has_action": false,
            "module": "docker_secret",
            "notes": [
                "Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define C(DOCKER_HOST), C(DOCKER_TLS_HOSTNAME), C(DOCKER_API_VERSION), C(DOCKER_CERT_PATH), C(DOCKER_SSL_VERSION), C(DOCKER_TLS), C(DOCKER_TLS_VERIFY) and C(DOCKER_TIMEOUT). If you are using docker machine, run the script shipped with the product that sets up the environment. It will set these variables for you. See U(https://docs.docker.com/machine/reference/env/) for more details.",
                "When connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for Python, version 2.4 or newer, this can be done by installing C(docker[tls]) with M(ansible.builtin.pip).",
                "Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In general, it will use C($HOME/.docker/config.json) if the C(DOCKER_CONFIG) environment variable is not specified, and use C($DOCKER_CONFIG/config.json) otherwise.",
                "This module uses the L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) to communicate with the Docker daemon."
            ],
            "options": {
                "api_version": {
                    "aliases": [
                        "docker_api_version"
                    ],
                    "default": "auto",
                    "description": [
                        "The version of the Docker API running on the Docker Host.",
                        "Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "str"
                },
                "ca_cert": {
                    "aliases": [
                        "tls_ca_cert",
                        "cacert_path"
                    ],
                    "description": [
                        "Use a CA certificate when performing server verification by providing the path to a CA certificate file.",
                        "If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used."
                    ],
                    "type": "path"
                },
                "client_cert": {
                    "aliases": [
                        "tls_client_cert",
                        "cert_path"
                    ],
                    "description": [
                        "Path to the client's TLS certificate file.",
                        "If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used."
                    ],
                    "type": "path"
                },
                "client_key": {
                    "aliases": [
                        "tls_client_key",
                        "key_path"
                    ],
                    "description": [
                        "Path to the client's TLS key file.",
                        "If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used."
                    ],
                    "type": "path"
                },
                "data": {
                    "description": [
                        "The value of the secret. Required when state is C(present)."
                    ],
                    "type": "str"
                },
                "data_is_b64": {
                    "default": false,
                    "description": [
                        "If set to C(true), the data is assumed to be Base64 encoded and will be decoded before being used.",
                        "To use binary I(data), it is better to keep it Base64 encoded and let it be decoded by this option."
                    ],
                    "type": "bool"
                },
                "debug": {
                    "default": false,
                    "description": [
                        "Debug mode"
                    ],
                    "type": "bool"
                },
                "docker_host": {
                    "aliases": [
                        "docker_url"
                    ],
                    "default": "unix://var/run/docker.sock",
                    "description": [
                        "The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https).",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "str"
                },
                "force": {
                    "default": false,
                    "description": [
                        "Use with state C(present) to always remove and recreate an existing secret.",
                        "If C(true), an existing secret will be replaced, even if it has not changed."
                    ],
                    "type": "bool"
                },
                "labels": {
                    "description": [
                        "A map of key:value meta data, where both key and value are expected to be strings.",
                        "If new meta data is provided, or existing meta data is modified, the secret will be updated by removing it and creating it again."
                    ],
                    "type": "dict"
                },
                "name": {
                    "description": [
                        "The name of the secret."
                    ],
                    "required": true,
                    "type": "str"
                },
                "ssl_version": {
                    "description": [
                        "Provide a valid SSL version number. Default value determined by ssl.py module.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead."
                    ],
                    "type": "str"
                },
                "state": {
                    "choices": [
                        "absent",
                        "present"
                    ],
                    "default": "present",
                    "description": [
                        "Set to C(present), if the secret should exist, and C(absent), if it should not."
                    ],
                    "type": "str"
                },
                "timeout": {
                    "default": 60,
                    "description": [
                        "The maximum amount of time in seconds to wait on a response from the API.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "int"
                },
                "tls": {
                    "default": false,
                    "description": [
                        "Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "bool"
                },
                "tls_hostname": {
                    "description": [
                        "When verifying the authenticity of the Docker Host server, provide the expected name of the server.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.",
                        "The current default value is C(localhost). This default is deprecated and will change in community.docker 2.0.0 to be a value computed from I(docker_host). Explicitly specify C(localhost) to make sure this value will still be used, and to disable the deprecation message which will be shown otherwise."
                    ],
                    "type": "str"
                },
                "use_ssh_client": {
                    "default": false,
                    "description": [
                        "For SSH transports, use the C(ssh) CLI tool instead of paramiko.",
                        "Requires Docker SDK for Python 4.4.0 or newer."
                    ],
                    "type": "bool",
                    "version_added": "1.5.0",
                    "version_added_collection": "community.docker"
                },
                "validate_certs": {
                    "aliases": [
                        "tls_verify"
                    ],
                    "default": false,
                    "description": [
                        "Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.",
                        "If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used."
                    ],
                    "type": "bool"
                }
            },
            "requirements": [
                "Docker API >= 1.25",
                "Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-py/issues/1310) for details). This module does *not* work with docker-py.",
                "L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 2.1.0",
                "Python >= 2.7"
            ],
            "short_description": "Manage docker secrets."
        },
        "examples": "\n\n- name: Create secret foo (from a file on the control machine)\n  community.docker.docker_secret:\n    name: foo\n    # If the file is JSON or binary, Ansible might modify it (because\n    # it is first decoded and later re-encoded). Base64-encoding the\n    # file directly after reading it prevents this to happen.\n    data: \"{{ lookup('file', '/path/to/secret/file') | b64encode }}\"\n    data_is_b64: true\n    state: present\n\n- name: Change the secret data\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n    state: present\n\n- name: Add a new label\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n      # Adding a new label will cause a remove/create of the secret\n      two: '2'\n    state: present\n\n- name: No change\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: baz\n      one: '1'\n      # Even though 'two' is missing, there is no change to the existing secret\n    state: present\n\n- name: Update an existing label\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    labels:\n      bar: monkey   # Changing a label will cause a remove/create of the secret\n      one: '1'\n    state: present\n\n- name: Force the removal/creation of the secret\n  community.docker.docker_secret:\n    name: foo\n    data: Goodnight everyone!\n    force: yes\n    state: present\n\n- name: Remove secret foo\n  community.docker.docker_secret:\n    name: foo\n    state: absent\n",
        "metadata": null,
        "return": {
            "secret_id": {
                "description": [
                    "The ID assigned by Docker to the secret object."
                ],
                "returned": "success and I(state) is C(present)",
                "sample": "hzehrmyjigmcp2gb6nlhmjqcv",
                "type": "str"
            }
        }
    }
}
